id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:682725,Modifiability,variab,variables,682725,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:682918,Modifiability,variab,variables,682918,"le.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685716,Modifiability,variab,variables,685716,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685805,Modifiability,variab,variables,685805,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685946,Modifiability,variab,variables,685946,"word is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_global_option_changed(Ss); ; has_local_option_changed(...); has_local_option_changed( (str)arg1, (str)arg2) -> bool :; Returns boolean for whether the keyword *arg2* has been touched in the scope of the sp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:689982,Modifiability,plugin,plugin,689982,"signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:689995,Modifiability,plugin,plugin,689995,"); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:690126,Modifiability,plugin,plugin,690126,"); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:691316,Modifiability,variab,variables,691316,".); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; print_out(...); print_out( (str)arg1) -> None :; Prints a string (using sprintf-like notation) to the output file.; ; C++ signature :; void print_out(Ss); ; print_variables(...); print_variables() -> None :; Prints all PSI variables that have been set internally.; ; C++ signature :; void print_variables(); ; psi_top_srcdir(...); psi_top_srcdir() -> str :; Returns the location of the source code.; ; C++ signature :; Ss psi_top_srcdir(); ; psimrcc(...); psimrcc( (Wavefunction)arg1) -> float :; Runs the multireference coupled cluster code.; ; C++ signature :; d psimrcc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; reopen_outfile(...); reopen_outfile() -> None :; Reopens the output file.; ; C++ signature :; void reopen_outfile(); ; revoke_global_option_changed(...); revoke_global_option_changed( (str)arg1) -> None :; Given a string of a keyword name *arg1*, sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:693104,Modifiability,adapt,adapted,693104," the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revoke_local_option_changed(...); revoke_local_option_changed( (str)arg1, (str)arg2) -> None :; Given a string of a keyword name *arg2* and a particular module *arg1*, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_local_option_changed(Ss,Ss); ; run_gdma(...); run_gdma( (Wavefunction)arg1, (str)arg2) -> float :; Runs the GDMA code.; ; C++ signature :; d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); ; sapt(...); sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the symmetry adapted perturbation theory code.; ; C++ signature :; d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scatter(...); scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :; New Scatter function.; ; C++ signature :; void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:694567,Modifiability,variab,variable,694567,"6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Matrix :; Run scfhess, which is a specialized DF-SCF hessian program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfhess(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; set_active_molecule(...); set_active_molecule( (Molecule)arg1) -> None :; Activates a previously defined (in the input) molecule, by name.; ; C++ signature :; void set_active_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE); ; set_array_variable(...); set_array_variable( (str)arg1, (Matrix)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_array_variable(Ss,N5boost10shared_ptrIN3psi6MatrixEEE); ; set_efp_torque(...); set_efp_torque( (Matrix)arg1) -> None :; Assigns the global EFP gradient to the values stored in the Nefp by 6 Matrix argument.; ; C++ signature :; void set_efp_torque(N5boost10shared_ptrIN3psi6MatrixEEE); ; set_frequencies(...); set_frequencies( (Vector)arg1) -> None :; Assigns the global frequencies to the values stored in the 3N-6 Vector argument.; ; C++ signature :; void set_frequencies(N5boost10shared_ptrIN3psi6VectorEEE); ; set_global_option(...); set_global_option( (str)arg1, (str)arg2) -> bool :; Sets value *arg2* to string keyword *arg1* for all modules.; ; C++ signature :; b set_global_option(Ss,Ss); ; set_global_option( (str)arg1, (float)arg2) -> bool :; Sets value *arg2* to double keyword *arg1* for all modules.; ; C++ signature :; b set_global_option(Ss,d); ; set_global_option( (str)arg1, (int)arg2) -> bool :; Sets value *",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:698403,Modifiability,variab,variable,698403,"r)arg2, (list)arg3 [, (object)arg4]) -> bool :; ; C++ signature :; b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]); ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; Sets an option to a Python object, but scoped only to a single module.; ; C++ signature :; void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}); ; set_memory(...); set_memory( (int)arg1) -> None :; Sets the memory available to Psi (in bytes).; ; C++ signature :; void set_memory(m); ; set_nthread(...); set_nthread( (int)arg1) -> None :; Sets the number of threads to use in SMP parallel computations.; ; C++ signature :; void set_nthread(i); ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; ; C++ signature :; void set_parent_symmetry(Ss); ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_variable(Ss,d); ; thermo(...); thermo( (Wavefunction)arg1, (Vector)arg2) -> float :; Computes thermodynamic data.; ; C++ signature :; d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE); ; transqt2(...); transqt2( (Wavefunction)arg1) -> float :; Runs the (deprecated) transformation code.; ; C++ signature :; d transqt2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; version(...); version() -> str :; Returns the version ID of this copy of Psi.; ; C++ signature :; PKc version(). DATA; Angstrom = psi4.GeometryUnits.Angstrom; Ascending = psi4.DiagonalizeOrder.Ascending; Balk = psi4.PsiReturnType.Balk; Bohr = psi4.GeometryUnits.Bohr; Descending = psi4.DiagonalizeOrder.Descending; EndLoop = psi4.PsiReturnType.EndLoop; Failure = psi4.PsiReturnType.Failure; Success = psi4.PsiReturnType.Success. Table Of Contents. psi4: Linking C++ and Python; psi4; AOShellCombinationsIterator; AngularMoment",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:19846,Performance,optimiz,optimized,19846,"on dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d). psi4.dmrg()¶; Python Library Documentation: built-in function dmrg in module psi4; dmrg(...). dmrg( (Wavefunction)arg1) -> Wavefunction :. Runs the DMRG code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.efp_init()¶; Python Library Documentation: built-in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:34753,Performance,optimiz,optimized,34753,"ction()¶; Python Library Documentation: built-in function new_wavefunction in module psi4; new_wavefunction(...). new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :. Builds a new wavefunction from scratch.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss). psi4.nthread()¶; Python Library Documentation: built-in function nthread in module psi4; nthread(...). nthread() -> int :. Returns the number of threads to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plug",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35029,Performance,optimiz,optimizer,35029,"w_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss). psi4.nthread()¶; Python Library Documentation: built-in function nthread in module psi4; nthread(...). nthread() -> int :. Returns the number of threads to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35233,Performance,optimiz,optimization,35233,"s to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:208810,Performance,load,load,208810,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:208856,Performance,load,load,208856,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:208862,Performance,load,load,208862,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:208900,Performance,load,load,208900,", (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:208975,Performance,load,load,208975,"-> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:517622,Performance,load,load,517622,"xEEE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue},N3psi17diagonalize_orderE); | ; | doublet(...); | doublet( (Matrix)arg1, (Matrix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:517635,Performance,load,load,517635,"trix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:517720,Performance,load,load,517720,"trix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:678900,Performance,optimiz,optimized,678900,"lose_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Perfo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:689479,Performance,optimiz,optimized,689479,"eE mrcc_generate_input(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; mrcc_load_densities(...); mrcc_load_densities( (Wavefunction)arg1, (dict)arg2) -> PsiReturnType :; Reads in the density matrices from Kallay's MRCC code.; ; C++ signature :; N3psi13PsiReturnTypeE mrcc_load_densities(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:689666,Performance,optimiz,optimizer,689666,"density matrices from Kallay's MRCC code.; ; C++ signature :; N3psi13PsiReturnTypeE mrcc_load_densities(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:689785,Performance,optimiz,optimization,689785,"3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:107632,Security,hash,hash,107632,"i4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:111120,Security,hash,hash,111120,"i4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:153297,Security,hash,hash,153297,"m. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:156744,Security,hash,hash,156744,"m. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:276773,Security,hash,hash,276773,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:280300,Security,hash,hash,280300,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:283827,Security,hash,hash,283827,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:287354,Security,hash,hash,287354,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:427153,Security,hash,hash,427153,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:475050,Security,hash,hash,475050,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:588263,Security,hash,hash,588263,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:115344,Usability,clear,clear,115344," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:115358,Usability,clear,clear,115358," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:118744,Usability,clear,clear,118744," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:118758,Usability,clear,clear,118758," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:135469,Usability,clear,clear,135469,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:135516,Usability,clear,clear,135516,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:135523,Usability,clear,clear,135523,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:135573,Usability,clear,clear,135573,"e_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential method. setName( (ExternalPotential)arg1, (str)arg2) -> None :. docstring; C++ signature :. v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:135649,Usability,clear,clear,135649,"ature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential method. setName( (ExternalPotential)arg1, (str)arg2) -> None :. docstring; C++ signature :. void setName(N3psi17ExternalPotentialE {lvalue},Ss). F12¶. psi4.F12.comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:160950,Usability,clear,clear,160950," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:160964,Usability,clear,clear,160964," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:164341,Usability,clear,clear,164341," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:164355,Usability,clear,clear,164355," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:215067,Usability,simpl,simply,215067,"¶; Python Library Documentation: method sum_of_squares; sum_of_squares(...) unbound psi4.Matrix method. sum_of_squares( (Matrix)arg1) -> float :. docstring; C++ signature :. d sum_of_squares(N3psi6MatrixE {lvalue}). psi4.Matrix.symmetrize_gradient()¶; Python Library Documentation: method symmetrize_gradient; symmetrize_gradient(...) unbound psi4.Matrix method. symmetrize_gradient( (Matrix)arg1, (Molecule)arg2) -> None :. docstring; C++ signature :. void symmetrize_gradient(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.Matrix.symmetry()¶; Python Library Documentation: method symmetry; symmetry(...) unbound psi4.Matrix method. symmetry( (Matrix)arg1) -> int :. docstring; C++ signature :. i symmetry(N3psi6MatrixE {lvalue}). psi4.Matrix.to_array()¶; Python Library Documentation: method to_array in module p4util.numpy_helper; to_array(matrix, copy=True, dense=False) unbound psi4.Matrix method. Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. psi4.Matrix.trace()¶; Python Library Documentation: method trace; trace(...) unbound psi4.Matrix method. trace( (Matrix)arg1) -> float :. docstring; C++ signature :. d trace(N3psi6MatrixE {lvalue}). psi4.Matrix.transform()¶; Python Library Documentation: method transform; transform(...) unbound psi4.Matrix method. transform( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). transform( (Matrix)arg1, (Matrix)arg2 [, (Matrix)arg3]) -> None :. docstring; C++ signature :. void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE [,N5boost10shared_ptrIN3psi6MatrixEEE]). psi4.Matrix.vector_dot()¶; Python Library Documentation: method vector_dot; vector_dot(...) unbound psi4.Matrix method. vector_dot( (Matrix)arg1, (Matrix)arg2) -> float :. docstring; C++ signature :. d vector_dot(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.zero()¶",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:261175,Usability,clear,clear,261175,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:261222,Usability,clear,clear,261222,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:261229,Usability,clear,clear,261229,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:261268,Usability,clear,clear,261268," C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; set_Da_so(...) unbound psi4.OEProp method. set_Da_so( (OEProp)arg1, (Matrix)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:261333,Usability,clear,clear,261333,"lue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; set_Da_so(...) unbound psi4.OEProp method. set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_so(N3psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:291560,Usability,clear,clear,291560," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:291574,Usability,clear,clear,291574," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:294951,Usability,clear,clear,294951," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:294965,Usability,clear,clear,294965," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:352704,Usability,simpl,simply,352704,"si4.Vector method. print_out( (Vector)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6VectorE {lvalue}). psi4.Vector.scale()¶; Python Library Documentation: method scale; scale(...) unbound psi4.Vector method. scale( (Vector)arg1, (float)arg2) -> None :. docstring; C++ signature :. void scale(N3psi6VectorE {lvalue},d). psi4.Vector.set()¶; Python Library Documentation: method set; set(...) unbound psi4.Vector method. set( (Vector)arg1, (int)arg2, (float)arg3) -> None :. docstring; C++ signature :. void set(N3psi6VectorE {lvalue},i,d). set( (Vector)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :. docstring; C++ signature :. void set(N3psi6VectorE {lvalue},i,i,d). psi4.Vector.shape()¶; Python Library Documentation: property. psi4.Vector.to_array()¶; Python Library Documentation: method to_array in module p4util.numpy_helper; to_array(matrix, copy=True, dense=False) unbound psi4.Vector method. Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Vector3¶. psi4.Vector3.cross()¶; Python Library Documentation: method cross; cross(...) unbound psi4.Vector3 method. cross( (Vector3)arg1, (Vector3)arg2) -> Vector3 :. Returns cross product of arg1 and arg2; C++ signature :. N3psi7Vector3E cross(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.distance()¶; Python Library Documentation: method distance; distance(...) unbound psi4.Vector3 method. distance( (Vector3)arg1, (Vector3)arg2) -> float :. Returns distance between two points represented by arg1 and arg2; C++ signature :. d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.dot()¶; Python Library Documentation: method dot; dot(...) unbound psi4.Vector3 method. dot( (Vector3)arg1, (Vector3)arg2) -> float :. Returns dot product of arg1 and arg2; C++ signature :. d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.norm()¶; Python Library Documentation: method norm; norm(...) unbound psi4.Vector3 method. norm( (Vector3)arg1) -> float",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:452254,Usability,clear,clear,452254,"------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:452268,Usability,clear,clear,452268,".__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:452354,Usability,clear,clear,452354,".__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:521780,Usability,simpl,simply,521780,"xE {lvalue},N5boost6python4listE); | ; | set_name(...); | set_name( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi6MatrixE {lvalue},Ss); | ; | subtract(...); | subtract( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void subtract(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | sum_of_squares(...); | sum_of_squares( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d sum_of_squares(N3psi6MatrixE {lvalue}); | ; | symmetrize_gradient(...); | symmetrize_gradient( (Matrix)arg1, (Molecule)arg2) -> None :; | docstring; | ; | C++ signature :; | void symmetrize_gradient(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE); | ; | symmetry(...); | symmetry( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i symmetry(N3psi6MatrixE {lvalue}); | ; | to_array(matrix, copy=True, dense=False); | Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; | consturcts a view.; | ; | trace(...); | trace( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d trace(N3psi6MatrixE {lvalue}); | ; | transform(...); | transform( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | transform( (Matrix)arg1, (Matrix)arg2 [, (Matrix)arg3]) -> None :; | docstring; | ; | C++ signature :; | void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE [,N5boost10shared_ptrIN3psi6MatrixEEE]); | ; | vector_dot(...); | vector_dot( (Matrix)arg1, (Matrix)arg2) -> float :; | docstring; | ; | C++ signature :; | d vector_dot(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | zero(...); | zero( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi6MatrixE {lvalue}); | ; | zero_diagonal(...); | zero_diagonal( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero_diago",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:566479,Usability,clear,clear,566479," | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ sig",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:566493,Usability,clear,clear,566493,"------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:566568,Usability,clear,clear,566568,"------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:641120,Usability,simpl,simply,641120,"e :; | d get(N3psi6VectorE {lvalue},i); | ; | get( (Vector)arg1, (int)arg2, (int)arg3) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6VectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (Vector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6VectorE {lvalue}); | ; | print_out(...); | print_out( (Vector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6VectorE {lvalue}); | ; | scale(...); | scale( (Vector)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void scale(N3psi6VectorE {lvalue},d); | ; | set(...); | set( (Vector)arg1, (int)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi6VectorE {lvalue},i,d); | ; | set( (Vector)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi6VectorE {lvalue},i,i,d); | ; | to_array(matrix, copy=True, dense=False); | Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; | consturcts a view.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_array = array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None) from Boost.Python.class; | Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list).; | ; | Parameters; | ----------; | arr : array or list of arrays; | Numpy array or list of arrays to use as the data for a new psi4.Matrix; | name : str; | Name to give the new psi4.Matrix; | dim1 : list, tuple, or psi4.Dimension (optional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | ----",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:25179,Availability,avail,available,25179,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:26865,Availability,error,error,26865," :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 Vector object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(). psi4.get_global_option()¶; Python Library Documentation: built-in function get_global_option in module psi4; get_global_option(...). get_global_option( (str)arg1) -> object :. Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; C++ signature :. N5boost6python3api6objectE get_global_option(Ss). psi4.get_global_option_list()¶; Python Library Documentation: built-in function get_global_option_list in module psi4; get_global_option_list(...). get_global_option_list() -> list :. Returns a list of all global options.; C++ signature :. N5boost6python4listE get_global_option_list(). psi4.get_gradient()¶; Python Library Documentation: built-in function get_gradient in module psi4; get_gradient(...). get_gradient() -> Matrix :. Returns the most recently computed gradient, as a N by 3 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(). psi4.get_input_directory()¶; Python Library Documentation: built-in function get_input_directory in module psi4; get_input_directory(...). get_input_directory() -> str :. Returns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:28434,Availability,error,error,28434,"by 3 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(). psi4.get_input_directory()¶; Python Library Documentation: built-in function get_input_directory in module psi4; get_input_directory(...). get_input_directory() -> str :. Returns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function get_legacy_molecule in module psi4; get_legacy_molecule(...). get_legacy_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(). psi4.get_local_option()¶; Python Library Documentation: built-in function get_local_option in module psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:28719,Availability,avail,available,28719,"urns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function get_legacy_molecule in module psi4; get_legacy_molecule(...). get_legacy_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(). psi4.get_local_option()¶; Python Library Documentation: built-in function get_local_option in module psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_var",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:29157,Availability,error,error,29157,"le psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:29590,Availability,avail,available,29590,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:46521,Availability,avail,available,46521,"to double keyword arg2 scoped only to a specific module arg1.; C++ signature :. b set_local_option(Ss,Ss,d). set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :. Sets value arg3 to integer keyword arg2 scoped only to a specific module arg1.; C++ signature :. b set_local_option(Ss,Ss,i). set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool :. C++ signature :. b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]). psi4.set_local_option_python()¶; Python Library Documentation: built-in function set_local_option_python in module psi4; set_local_option_python(...). set_local_option_python( (str)arg1, (object)arg2) -> None :. Sets an option to a Python object, but scoped only to a single module.; C++ signature :. void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}). psi4.set_memory()¶; Python Library Documentation: built-in function set_memory in module psi4; set_memory(...). set_memory( (int)arg1) -> None :. Sets the memory available to Psi (in bytes).; C++ signature :. void set_memory(m). psi4.set_nthread()¶; Python Library Documentation: built-in function set_nthread in module psi4; set_nthread(...). set_nthread( (int)arg1) -> None :. Sets the number of threads to use in SMP parallel computations.; C++ signature :. void set_nthread(i). psi4.set_parent_symmetry()¶; Python Library Documentation: built-in function set_parent_symmetry in module psi4; set_parent_symmetry(...). set_parent_symmetry( (str)arg1) -> None :. Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; C++ signature :. void set_parent_symmetry(Ss). psi4.set_variable()¶; Python Library Documentation: built-in function set_variable in module psi4; set_variable(...). set_variable( (str)arg1, (float)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_variable(Ss,d). psi4.thermo()¶; Python Library Documentation: built-in function thermo in module p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:236112,Availability,fault,faulty,236112,"re :. void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.MoldenWriter.writeNO()¶; Python Library Documentation: method writeNO; writeNO(...) unbound psi4.MoldenWriter method. writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :. docstring; C++ signature :. void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). Molecule¶. psi4.Molecule.BFS()¶; Python Library Documentation: method BFS in module molutil; BFS(self) unbound psi4.Molecule method. Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:237540,Availability,toler,tolerance,237540,"ate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in fun",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:256405,Availability,toler,tolerance,256405,"up object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E). psi4.Molecule.units()¶; Python Library Documentation: property. Units (Angstrom or Bohr) used to define the geometry. psi4.Molecule.update_geometry()¶; Python Library Documentation: method update_geometry; update_geometry(...) unbound psi4.Molecule method. update_geometry( (Molecule)arg1) -> None :. Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; C++ signature :. void update_geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.x()¶; Python Library Documentation: method x; x(...) unbound psi4.Molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:542951,Availability,fault,faulty,542951,"rIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544395,Availability,toler,tolerance,544395,"oid __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:557785,Availability,toler,tolerance,557785,"ame(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:682735,Availability,avail,available,682735,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:683890,Availability,error,error,683890,"ary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; ; C++ signature :; N5boost6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:684932,Availability,error,error,684932,"t6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685126,Availability,avail,available,685126,"ature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_pref",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685477,Availability,error,error,685477,"y_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685815,Availability,avail,available,685815,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:697838,Availability,avail,available,697838," *arg3* to string keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,Ss); ; set_local_option( (str)arg1, (str)arg2, (float)arg3) -> bool :; Sets value *arg3* to double keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,d); ; set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :; Sets value *arg3* to integer keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,i); ; set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool :; ; C++ signature :; b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]); ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; Sets an option to a Python object, but scoped only to a single module.; ; C++ signature :; void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}); ; set_memory(...); set_memory( (int)arg1) -> None :; Sets the memory available to Psi (in bytes).; ; C++ signature :; void set_memory(m); ; set_nthread(...); set_nthread( (int)arg1) -> None :; Sets the number of threads to use in SMP parallel computations.; ; C++ signature :; void set_nthread(i); ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; ; C++ signature :; void set_parent_symmetry(Ss); ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_variable(Ss,d); ; thermo(...); thermo( (Wavefunction)arg1, (Vector)arg2) -> float :; Computes thermodynamic data.; ; C++ signature :; d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE); ; transqt2(...); transqt2( (Wavefunction)arg1) -> float :; Runs the (deprecated) transformation code.; ; C++ signature :; d transqt2(N5boost10shared_pt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:19250,Deployability,configurat,configuration,19250,"oid clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:116380,Deployability,update,update,116380,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.DiagonalizeOrder.real()¶; Python Library Documentation: get",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:116395,Deployability,update,update,116395,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.DiagonalizeOrder.real()¶; Python Library Documentation: getset descriptor __builtin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:119780,Deployability,update,update,119780,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Dimension¶. psi4.Dimension.from_list()¶; Python Library Documentation: method _dimension_from_list in module p4util.numpy_helper; _dimension_from_list(self, dims, name=’New Dimension’) method of Boost.Python.class instance. Builds a psi4.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:119795,Deployability,update,update,119795,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Dimension¶. psi4.Dimension.from_list()¶; Python Library Documentation: method _dimension_from_list in module p4util.numpy_helper; _dimension_from_list(self, dims, name=’New Dimension’) method of Boost.Python.class instance. Builds a psi4.Dimension object from a ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:161986,Deployability,update,update,161986,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.GeometryUnits.real()¶; Python Library Documentation: getset de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:162001,Deployability,update,update,162001,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.GeometryUnits.real()¶; Python Library Documentation: getset descriptor __builtin__.int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:165377,Deployability,update,update,165377,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. HF¶. psi4.HF.Ca()¶; Python Library Documentation: method Ca; Ca(...) unbound psi4.HF method. Ca( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}). psi4.HF.C",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:165392,Deployability,update,update,165392,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. HF¶. psi4.HF.Ca()¶; Python Library Documentation: method Ca; Ca(...) unbound psi4.HF method. Ca( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}). psi4.HF.Ca_subset()¶; Python Libr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:292596,Deployability,update,update,292596,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.PsiReturnType.real()¶; Python Library Documentation: getset de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:292611,Deployability,update,update,292611,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.PsiReturnType.real()¶; Python Library Documentation: getset descriptor __builtin__.int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:295987,Deployability,update,update,295987,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Psi_Numpy_Interface¶. QuadrupoleInt¶. psi4.QuadrupoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis1()¶; Python Library Documentation: property. The basis set on center one. psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:296002,Deployability,update,update,296002,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Psi_Numpy_Interface¶. QuadrupoleInt¶. psi4.QuadrupoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis1()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis2()",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:678466,Deployability,configurat,configuration,678466,":; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:700778,Deployability,update,updated,700778," ; version(...); version() -> str :; Returns the version ID of this copy of Psi.; ; C++ signature :; PKc version(). DATA; Angstrom = psi4.GeometryUnits.Angstrom; Ascending = psi4.DiagonalizeOrder.Ascending; Balk = psi4.PsiReturnType.Balk; Bohr = psi4.GeometryUnits.Bohr; Descending = psi4.DiagonalizeOrder.Descending; EndLoop = psi4.PsiReturnType.EndLoop; Failure = psi4.PsiReturnType.Failure; Success = psi4.PsiReturnType.Success. Table Of Contents. psi4: Linking C++ and Python; psi4; AOShellCombinationsIterator; AngularMomentumInt; BasisSet; BasisSetParser; BoysLocalizer; CIVector; CIWavefunction; CUHF; CdSalcList; CorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; DiagonalizeOrder; Dimension; DipoleInt; Dispersion; DoublePyBuffer; EFP; ERI; ElectricFieldInt; ElectrostaticInt; Environment; ErfComplementERI; ErfERI; ExternalPotential; F12; F12DoubleCommutator; F12G12; F12Squared; FCHKWriter; FittedSlaterCorrelationFactor; FittingMetric; Functional; Gaussian94BasisSetParser; GaussianShell; GeometryUnits; HF; IO; IOManager; IntVector; IntegralFactory; JK; KineticInt; LaplaceDenominator; LibParallelHelper; Localizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleInt; MultipoleSymmetry; NBOWriter; NablaInt; OEProp; OneBodyAOInt; OrbitalSpace; OverlapInt; PMLocalizer; PetiteList; PointGroup; PotentialInt; Process; PseudoTrial; PseudospectralInt; PsiReturnType; Psi_Numpy_Interface; QuadrupoleInt; RHF; ROHF; SOBasisSet; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; TwoBodyAOInt; TwoElectronInt; Vector; Vector3; View; Wavefunction; matrix_vector; vector_of_doubles; Full Docs Output. Previous topic; Python Driver. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:15704,Energy Efficiency,energy,energy,15704,"arg2) -> None :. docstring; C++ signature :. void benchmark_disk(i,d). psi4.benchmark_integrals()¶; Python Library Documentation: built-in function benchmark_integrals in module psi4; benchmark_integrals(...). benchmark_integrals( (int)arg1, (float)arg2) -> None :. docstring; C++ signature :. void benchmark_integrals(i,d). psi4.benchmark_math()¶; Python Library Documentation: built-in function benchmark_math in module psi4; benchmark_math(...). benchmark_math( (float)arg1) -> None :. docstring; C++ signature :. void benchmark_math(d). psi4.ccdensity()¶; Python Library Documentation: built-in function ccdensity in module psi4; ccdensity(...). ccdensity( (Wavefunction)arg1) -> float :. Runs the code to compute coupled cluster density matrices.; C++ signature :. d ccdensity(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ccenergy()¶; Python Library Documentation: built-in function ccenergy in module psi4; ccenergy(...). ccenergy( (Wavefunction)arg1) -> Wavefunction :. Runs the coupled cluster energy code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE ccenergy(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cceom()¶; Python Library Documentation: built-in function cceom in module psi4; cceom(...). cceom( (Wavefunction)arg1) -> float :. Runs the equation of motion coupled cluster code, for excited states.; C++ signature :. d cceom(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cchbar()¶; Python Library Documentation: built-in function cchbar in module psi4; cchbar(...). cchbar( (Wavefunction)arg1) -> None :. Runs the code to generate the similarity transformed Hamiltonian.; C++ signature :. void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cclambda()¶; Python Library Documentation: built-in function cclambda in module psi4; cclambda(...). cclambda( (Wavefunction)arg1) -> Wavefunction :. Runs the coupled cluster lambda equations code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12Wavefunc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:17723,Energy Efficiency,energy,energy,17723,"response()¶; Python Library Documentation: built-in function ccresponse in module psi4; ccresponse(...). ccresponse( (Wavefunction)arg1) -> float :. Runs the coupled cluster response theory code.; C++ signature :. d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ccsort()¶; Python Library Documentation: built-in function ccsort in module psi4; ccsort(...). ccsort() -> float :. Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; C++ signature :. d ccsort(). psi4.cctransort()¶; Python Library Documentation: built-in function cctransort in module psi4; cctransort(...). cctransort( (Wavefunction)arg1) -> None :. Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; C++ signature :. void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cctriples()¶; Python Library Documentation: built-in function cctriples in module psi4; cctriples(...). cctriples( (Wavefunction)arg1) -> float :. Runs the coupled cluster (T) energy code.; C++ signature :. d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.clean()¶; Python Library Documentation: built-in function clean in module psi4; clean(...). clean() -> None :. Function to remove scratch files. Call between independent jobs.; C++ signature :. void clean(). psi4.clean_variables()¶; Python Library Documentation: built-in function clean_variables in module psi4; clean_variables(...). clean_variables() -> None :. Empties all PSI variables that have set internally.; C++ signature :. void clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ sig",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:21313,Energy Efficiency,energy,energy,21313,"atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d). psi4.dmrg()¶; Python Library Documentation: built-in function dmrg in module psi4; dmrg(...). dmrg( (Wavefunction)arg1) -> Wavefunction :. Runs the DMRG code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.efp_init()¶; Python Library Documentation: built-in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(). psi4.efp_set_options()¶; Python Library Documentation: built-in function efp_set_options in module psi4; efp_set_options(...). efp_set_options() -> None :. Set EFP options from environment options object.; C++ signature :. void efp_set_options(). psi4.fd_1_0()¶; Python Library Documentation: built-in function fd_1_0 in module psi4; fd_1_0(...). fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :. Performs a finite difference gradient computation, from energy points.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:21679,Energy Efficiency,energy,energy,21679,"in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(). psi4.efp_set_options()¶; Python Library Documentation: built-in function efp_set_options in module psi4; efp_set_options(...). efp_set_options() -> None :. Set EFP options from environment options object.; C++ signature :. void efp_set_options(). psi4.fd_1_0()¶; Python Library Documentation: built-in function fd_1_0 in module psi4; fd_1_0(...). fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :. Performs a finite difference gradient computation, from energy points.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Document",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:22479,Energy Efficiency,energy,energy,22479,"istE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Documentation: built-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:22896,Energy Efficiency,energy,energy,22896,"rary Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Documentation: built-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:23686,Energy Efficiency,adapt,adapted,23686,"lt-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:24187,Energy Efficiency,energy,energy,24187,"...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables ava",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:25833,Energy Efficiency,charge,charges,25833,"10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 Vector object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(). psi4.get_global_option()¶; Python Library Documentation: built-in function get_global_option in module psi4; get_global_option(...). get_global_option( (str)arg1) -> object :. Given a string of a keyword name arg1, returns the value associated with the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:40237,Energy Efficiency,adapt,adapted,40237,"ocal_option_changed in module psi4; revoke_local_option_changed(...). revoke_local_option_changed( (str)arg1, (str)arg2) -> None :. Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; C++ signature :. void revoke_local_option_changed(Ss,Ss). psi4.run_gdma()¶; Python Library Documentation: built-in function run_gdma in module psi4; run_gdma(...). run_gdma( (Wavefunction)arg1, (str)arg2) -> float :. Runs the GDMA code.; C++ signature :. d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss). psi4.sapt()¶; Python Library Documentation: built-in function sapt in module psi4; sapt(...). sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :. Runs the symmetry adapted perturbation theory code.; C++ signature :. d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scatter()¶; Python Library Documentation: built-in function scatter in module psi4; scatter(...). scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :. New Scatter function.; C++ signature :. void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE). psi4.scf()¶; Python Library Documentation: built-in function scf in module psi4; scf(...). scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :. Runs the SCF code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object). psi4.scfgrad()¶; Python Library Documentation: built-in function scfgrad in module psi4; scfgrad(...). scfgrad( (Wavefunction)arg1) -> Matrix :. Run scfgrad, w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:69753,Energy Efficiency,energy,energy,69753,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:69801,Energy Efficiency,energy,energy,69801,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:69809,Energy Efficiency,energy,energy,69809,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:69857,Energy Efficiency,energy,energy,69857,"_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:69927,Energy Efficiency,energy,energy,69927,"eep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_b_subset()¶; Python Library Documentati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:91289,Energy Efficiency,energy,energy,91289,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:91337,Energy Efficiency,energy,energy,91337,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:91345,Energy Efficiency,energy,energy,91345,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:91383,Energy Efficiency,energy,energy,91383,"e :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_b_subset()¶; Python Library Documentatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:91453,Energy Efficiency,energy,energy,91453,"ute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.CUHF m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:171513,Energy Efficiency,energy,energy,171513,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:171561,Energy Efficiency,energy,energy,171561,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:171569,Energy Efficiency,energy,energy,171569,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:171605,Energy Efficiency,energy,energy,171605,"ng; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_b_subset()¶; Python Library Documentation: method epsi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:171675,Energy Efficiency,energy,energy,171675,". psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.HF method. epsilon_b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:210077,Energy Efficiency,power,power,210077,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:210124,Energy Efficiency,power,power,210124,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:210131,Energy Efficiency,power,power,210131,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:210170,Energy Efficiency,power,power,210170,"void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.rms()¶; Python Library Documentation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:210278,Energy Efficiency,power,power,210278,"tation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.rms()¶; Python Library Documentation: method rms; rms(...) unbound psi4.Matrix method. rms( (Matrix)arg1) -> float :. doc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:236352,Energy Efficiency,charge,charge,236352,"orEEE). psi4.MoldenWriter.writeNO()¶; Python Library Documentation: method writeNO; writeNO(...) unbound psi4.MoldenWriter method. writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :. docstring; C++ signature :. void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). Molecule¶. psi4.Molecule.BFS()¶; Python Library Documentation: method BFS in module molutil; BFS(self) unbound psi4.Molecule method. Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:237139,Energy Efficiency,charge,charge,237139," and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:237961,Energy Efficiency,charge,charge,237961,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:238009,Energy Efficiency,charge,charge,238009,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:238017,Energy Efficiency,charge,charge,238017,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:238059,Energy Efficiency,charge,charge,238059,"n Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:238111,Energy Efficiency,charge,charge,238111,"g6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a string reexpressing in input format the curr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:238146,Energy Efficiency,charge,charge,238146," and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a string reexpressing in input format the current states of the molecule; C++ signat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:244569,Energy Efficiency,charge,charge,244569," Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Documentation: method molecular_charge; molecular_charge(...) unbound psi4.Molecule method. molecular_charge( (Molecule)arg1) -> int :. Gets the molecular charge; C++ signature :. i molecular_charge(N3psi8MoleculeE {lvalue}). psi4.Molecule.move_to_com()¶; Python Library Documentation: method move_to_com; move_to_com(...) unbound psi4.Molecule method. move_to_com( (Molecule)arg1) -> None :. Moves molecule to center of mass; C++ signature :. void move_to_com(N3psi8MoleculeE {lvalue}). psi4.Molecule.multiplicity()¶; Python Library Documentation: method multiplicity; multiplicity(...) unbound psi4.Molecule method. multiplicity( (Molecule)arg1) -> int :. Gets the multiplicity (defined as 2Ms + 1); C++ signature :. i multiplicity(N3psi8MoleculeE {lvalue}). psi4.Molecule.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Molecule method. name( (Molecule)arg1) -> str :. Gets molecule name; C++ signature :. Ss name(N3psi8MoleculeE {lvalue}). psi4.Molecule.natom()¶; Python Library Documentation: method natom; natom(...) unbound psi4.Molecule method. natom( (Molecule)arg1) -> int :. Number of real atoms; C++ signature :. i nat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:246113,Energy Efficiency,energy,energy,246113," 1); C++ signature :. i multiplicity(N3psi8MoleculeE {lvalue}). psi4.Molecule.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Molecule method. name( (Molecule)arg1) -> str :. Gets molecule name; C++ signature :. Ss name(N3psi8MoleculeE {lvalue}). psi4.Molecule.natom()¶; Python Library Documentation: method natom; natom(...) unbound psi4.Molecule method. natom( (Molecule)arg1) -> int :. Number of real atoms; C++ signature :. i natom(N3psi8MoleculeE {lvalue}). psi4.Molecule.nfragments()¶; Python Library Documentation: method nfragments; nfragments(...) unbound psi4.Molecule method. nfragments( (Molecule)arg1) -> int :. Gets the number of fragments in the molecule; C++ signature :. i nfragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.nuclear_repulsion_energy()¶; Python Library Documentation: method nuclear_repulsion_energy; nuclear_repulsion_energy(...) unbound psi4.Molecule method. nuclear_repulsion_energy( (Molecule)arg1) -> float :. Computes nuclear repulsion energy; C++ signature :. d nuclear_repulsion_energy(N3psi8MoleculeE {lvalue}). psi4.Molecule.point_group()¶; Python Library Documentation: method point_group; point_group(...) unbound psi4.Molecule method. point_group( (Molecule)arg1) -> PointGroup :. Returns the current point group object; C++ signature :. N5boost10shared_ptrIN3psi10PointGroupEEE point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.print_cluster()¶; Python Library Documentation: method print_cluster; print_cluster(...) unbound psi4.Molecule method. print_cluster( (Molecule)arg1) -> None :. Prints the molecule in Cartesians in input units adding fragment separators; C++ signature :. void print_cluster(N3psi8MoleculeE {lvalue}). psi4.Molecule.print_in_input_format()¶; Python Library Documentation: method print_in_input_format; print_in_input_format(...) unbound psi4.Molecule method. print_in_input_format( (Molecule)arg1) -> None :. Prints the molecule as Cartesian or ZMatrix entries, just as inputted.; C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:249657,Energy Efficiency,energy,energy,249657,"t_group(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.rotational_constants()¶; Python Library Documentation: method rotational_constants; rotational_constants(...) unbound psi4.Molecule method. rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :. Prints the rotational constants of the molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Libra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:249722,Energy Efficiency,energy,energy,249722,"t_group(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.rotational_constants()¶; Python Library Documentation: method rotational_constants; rotational_constants(...) unbound psi4.Molecule method. rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :. Prints the rotational constants of the molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Libra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:254515,Energy Efficiency,charge,charge,254515,"arg1, (int)arg2) -> None :. Sets the specified fragment arg2 to be Ghost; C++ signature :. void set_ghost_fragment(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_ghost_fragments()¶; Python Library Documentation: method set_ghost_fragments; set_ghost_fragments(...) unbound psi4.Molecule method. set_ghost_fragments( (Molecule)arg1, (list)arg2) -> None :. Sets the specified list arg2 of fragments to be Ghost; C++ signature :. void set_ghost_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE). psi4.Molecule.set_mass()¶; Python Library Documentation: method set_mass; set_mass(...) unbound psi4.Molecule method. set_mass( (Molecule)arg1, (int)arg2, (float)arg3) -> None :. Gets mass of atom arg2; C++ signature :. void set_mass(N3psi8MoleculeE {lvalue},i,d). psi4.Molecule.set_molecular_charge()¶; Python Library Documentation: method set_molecular_charge; set_molecular_charge(...) unbound psi4.Molecule method. set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :. Sets the molecular charge; C++ signature :. void set_molecular_charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_multiplicity()¶; Python Library Documentation: method set_multiplicity; set_multiplicity(...) unbound psi4.Molecule method. set_multiplicity( (Molecule)arg1, (int)arg2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:303411,Energy Efficiency,energy,energy,303411,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:303459,Energy Efficiency,energy,energy,303459,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:303467,Energy Efficiency,energy,energy,303467,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:303504,Energy Efficiency,energy,energy,303504,"signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_b_subset()¶; Python Library Documentation: meth",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:303574,Energy Efficiency,energy,energy,303574,"HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.RHF method. e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:318297,Energy Efficiency,energy,energy,318297,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:318345,Energy Efficiency,energy,energy,318345,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:318353,Energy Efficiency,energy,energy,318353,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:318391,Energy Efficiency,energy,energy,318391,"e :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_b_subset()¶; Python Library Documentatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:318461,Energy Efficiency,energy,energy,318461,"ute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.ROHF m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:329531,Energy Efficiency,allocate,allocate,329531," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:329581,Energy Efficiency,allocate,allocate,329581," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:329591,Energy Efficiency,allocate,allocate,329591," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:329642,Energy Efficiency,allocate,allocate,329642,"PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4.SuperFunctional method. c_alpha( (SuperFunctional)arg1) -> float :. docstring; C++ signature :. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:329719,Energy Efficiency,allocate,allocate,329719,"eListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4.SuperFunctional method. c_alpha( (SuperFunctional)arg1) -> float :. docstring; C++ signature :. d c_alpha(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.c_functio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:359851,Energy Efficiency,energy,energy,359851,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:359899,Energy Efficiency,energy,energy,359899,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:359907,Energy Efficiency,energy,energy,359907,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:359953,Energy Efficiency,energy,energy,359953,"unction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.Wavef",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:360023,Energy Efficiency,energy,energy,360023,"mpute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_b_subset()¶; Python Library Documentation: method eps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:397814,Energy Efficiency,energy,energy,397814,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:397829,Energy Efficiency,energy,energy,397829," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:397909,Energy Efficiency,energy,energy,397909," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:409443,Energy Efficiency,energy,energy,409443,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:409458,Energy Efficiency,energy,energy,409458," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:409538,Energy Efficiency,energy,energy,409538," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:482535,Energy Efficiency,energy,energy,482535,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:482550,Energy Efficiency,energy,energy,482550," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:482630,Energy Efficiency,energy,energy,482630," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:518407,Energy Efficiency,power,power,518407,"nature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:518421,Energy Efficiency,power,power,518421,"); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE rowdim(N3psi6MatrixE {lvalue}); | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signatur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:518539,Energy Efficiency,power,power,518539,"); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE rowdim(N3psi6MatrixE {lvalue}); | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signatur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:542607,Energy Efficiency,charge,charge,542607,"hared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule cla",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:543117,Energy Efficiency,charge,charge,543117,"dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void ad",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544095,Energy Efficiency,charge,charge,544095,". Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lva",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544719,Energy Efficiency,charge,charge,544719,"tivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544734,Energy Efficiency,charge,charge,544734," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544788,Energy Efficiency,charge,charge,544788," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:544831,Energy Efficiency,charge,charge,544831," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:549475,Energy Efficiency,charge,charge,549475,"_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | name( (Molecule)arg1) -> str :; | Gets molecule name; | ; | C++ signature :; | Ss name(N3psi8MoleculeE {lvalue}); | ; | natom(...); | natom( (Molecule)arg1) -> int :; | Number of real atoms; | ; | C++ signature :; | i natom(N3psi8MoleculeE {lvalue}); | ; | nfragments(...); | nfragments( (Molecule)arg1) -> int :; | Gets the number of fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi8MoleculeE {lvalue}); | ; | nuclear_repulsion_energy(...); | nuclear_repulsion_energy( (Molecule)arg1) -> float :; | Computes nuclear repulsion energy; | ; | C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:550473,Energy Efficiency,energy,energy,550473," | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | name( (Molecule)arg1) -> str :; | Gets molecule name; | ; | C++ signature :; | Ss name(N3psi8MoleculeE {lvalue}); | ; | natom(...); | natom( (Molecule)arg1) -> int :; | Number of real atoms; | ; | C++ signature :; | i natom(N3psi8MoleculeE {lvalue}); | ; | nfragments(...); | nfragments( (Molecule)arg1) -> int :; | Gets the number of fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi8MoleculeE {lvalue}); | ; | nuclear_repulsion_energy(...); | nuclear_repulsion_energy( (Molecule)arg1) -> float :; | Computes nuclear repulsion energy; | ; | C++ signature :; | d nuclear_repulsion_energy(N3psi8MoleculeE {lvalue}); | ; | point_group(...); | point_group( (Molecule)arg1) -> PointGroup :; | Returns the current point group object; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PointGroupEEE point_group(N3psi8MoleculeE {lvalue}); | ; | print_cluster(...); | print_cluster( (Molecule)arg1) -> None :; | Prints the molecule in Cartesians in input units adding fragment separators; | ; | C++ signature :; | void print_cluster(N3psi8MoleculeE {lvalue}); | ; | print_in_input_format(...); | print_in_input_format( (Molecule)arg1) -> None :; | Prints the molecule as Cartesian or ZMatrix entries, just as inputted.; | ; | C++ signature :; | void print_in_input_format(N3psi8MoleculeE {lvalue}); | ; | print_out(...); | print_out( (Molecule)arg1) -> None :; | Prints the molecule in Cartesians in input units; | ; | C++ signature :; | void print_out(N3psi8MoleculeE {lvalue}); | ; | print_out_in_angstrom(...); | print_out_in_angstrom( (Mol",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:552992,Energy Efficiency,energy,energy,552992,"(N3psi8MoleculeE {lvalue},b); | ; | reset_point_group(...); | reset_point_group( (Molecule)arg1, (str)arg2) -> None :; | Overrides symmetry from outside the molecule string; | ; | C++ signature :; | void reset_point_group(N3psi8MoleculeE {lvalue},Ss); | ; | rotational_constants(...); | rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:553063,Energy Efficiency,energy,energy,553063,"(N3psi8MoleculeE {lvalue},b); | ; | reset_point_group(...); | reset_point_group( (Molecule)arg1, (str)arg2) -> None :; | Overrides symmetry from outside the molecule string; | ; | C++ signature :; | void reset_point_group(N3psi8MoleculeE {lvalue},Ss); | ; | rotational_constants(...); | rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:556443,Energy Efficiency,charge,charge,556443,"..); | set_geometry( (Molecule)arg1, (Matrix)arg2) -> None :; | Sets the geometry, given a (Natom X 3) matrix arg2 of coordinates (in Bohr); | ; | C++ signature :; | void set_geometry(N3psi8MoleculeE {lvalue},N3psi6MatrixE); | ; | set_ghost_fragment(...); | set_ghost_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Ghost; | ; | C++ signature :; | void set_ghost_fragment(N3psi8MoleculeE {lvalue},i); | ; | set_ghost_fragments(...); | set_ghost_fragments( (Molecule)arg1, (list)arg2) -> None :; | Sets the specified list arg2 of fragments to be Ghost; | ; | C++ signature :; | void set_ghost_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE); | ; | set_mass(...); | set_mass( (Molecule)arg1, (int)arg2, (float)arg3) -> None :; | Gets mass of atom arg2; | ; | C++ signature :; | void set_mass(N3psi8MoleculeE {lvalue},i,d); | ; | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:598815,Energy Efficiency,energy,energy,598815,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:598830,Energy Efficiency,energy,energy,598830," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:598910,Energy Efficiency,energy,energy,598910," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:610918,Energy Efficiency,energy,energy,610918,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:610933,Energy Efficiency,energy,energy,610933," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:611013,Energy Efficiency,energy,energy,611013," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:619355,Energy Efficiency,allocate,allocate,619355,"--; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:619372,Energy Efficiency,allocate,allocate,619372," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_os_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_ss_alpha(...); | c_ss_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_ss_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:619459,Energy Efficiency,allocate,allocate,619459," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_os_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_ss_alpha(...); | c_ss_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_ss_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:652326,Energy Efficiency,energy,energy,652326,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:652341,Energy Efficiency,energy,energy,652341," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:652421,Energy Efficiency,energy,energy,652421," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:676061,Energy Efficiency,energy,energy,676061,"arg2) -> None :; docstring; ; C++ signature :; void benchmark_blas1(i,d); ; benchmark_blas2(...); benchmark_blas2( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_blas2(i,d); ; benchmark_blas3(...); benchmark_blas3( (int)arg1, (float)arg2, (int)arg3) -> None :; docstring; ; C++ signature :; void benchmark_blas3(i,d,i); ; benchmark_disk(...); benchmark_disk( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_disk(i,d); ; benchmark_integrals(...); benchmark_integrals( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_integrals(i,d); ; benchmark_math(...); benchmark_math( (float)arg1) -> None :; docstring; ; C++ signature :; void benchmark_math(d); ; ccdensity(...); ccdensity( (Wavefunction)arg1) -> float :; Runs the code to compute coupled cluster density matrices.; ; C++ signature :; d ccdensity(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccenergy(...); ccenergy( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster energy code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE ccenergy(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cceom(...); cceom( (Wavefunction)arg1) -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; C++ signature :; d cceom(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cchbar(...); cchbar( (Wavefunction)arg1) -> None :; Runs the code to generate the similarity transformed Hamiltonian.; ; C++ signature :; void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cclambda(...); cclambda( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster lambda equations code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() ->",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:677475,Energy Efficiency,energy,energy,677475,"ns the code to generate the similarity transformed Hamiltonian.; ; C++ signature :; void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cclambda(...); cclambda( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster lambda equations code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; C++ signature :; d ccsort(); ; cctransort(...); cctransort( (Wavefunction)arg1) -> None :; Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; ; C++ signature :; void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cctriples(...); cctriples( (Wavefunction)arg1) -> float :; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:679920,Energy Efficiency,energy,energy,679920,"the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:680197,Energy Efficiency,energy,energy,680197,"s one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a gi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:680813,Energy Efficiency,energy,energy,680813,"ect.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturba",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:681129,Energy Efficiency,energy,energy,681129,"0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:681735,Energy Efficiency,adapt,adapted,681735,"1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:682058,Energy Efficiency,energy,energy,682058,"ite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:683161,Energy Efficiency,charge,charges,683161,"EE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; ; C++ signature :; N5boost6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6py",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:693104,Energy Efficiency,adapt,adapted,693104," the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revoke_local_option_changed(...); revoke_local_option_changed( (str)arg1, (str)arg2) -> None :; Given a string of a keyword name *arg2* and a particular module *arg1*, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_local_option_changed(Ss,Ss); ; run_gdma(...); run_gdma( (Wavefunction)arg1, (str)arg2) -> float :; Runs the GDMA code.; ; C++ signature :; d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); ; sapt(...); sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the symmetry adapted perturbation theory code.; ; C++ signature :; d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scatter(...); scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :; New Scatter function.; ; C++ signature :; void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:54191,Integrability,depend,depending,54191,"nature :. i max_am(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_function_per_shell()¶; Python Library Documentation: method max_function_per_shell; max_function_per_shell(...) unbound psi4.BasisSet method. max_function_per_shell( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_function_per_shell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_nprimitive()¶; Python Library Documentation: method max_nprimitive; max_nprimitive(...) unbound psi4.BasisSet method. max_nprimitive( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nao()¶; Python Library Documentation: method nao; nao(...) unbound psi4.BasisSet method. nao( (BasisSet)arg1) -> int :. Returns number of atomic orbitals (Cartesian); C++ signature :. i nao(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nbf()¶; Python Library Documentation: method nbf; nbf(...) unbound psi4.BasisSet method. nbf( (BasisSet)arg1) -> int :. Returns number of basis functions (Cartesian or spherical depending on has_puream); C++ signature :. i nbf(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nprimitive()¶; Python Library Documentation: method nprimitive; nprimitive(...) unbound psi4.BasisSet method. nprimitive( (BasisSet)arg1) -> int :. Returns total number of primitives in all contractions; C++ signature :. i nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell()¶; Python Library Documentation: method nshell; nshell(...) unbound psi4.BasisSet method. nshell( (BasisSet)arg1) -> int :. Returns number of shells; C++ signature :. i nshell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell_on_center()¶; Python Library Documentation: method nshell_on_center; nshell_on_center(...) unbound psi4.BasisSet method. nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i nshell_on_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.print_detail_out()¶; Python Library Documentation: method print_detail_out; print_detail_out(...) unbound psi4.BasisSet method. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:54471,Integrability,contract,contractions,54471,". i max_function_per_shell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_nprimitive()¶; Python Library Documentation: method max_nprimitive; max_nprimitive(...) unbound psi4.BasisSet method. max_nprimitive( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nao()¶; Python Library Documentation: method nao; nao(...) unbound psi4.BasisSet method. nao( (BasisSet)arg1) -> int :. Returns number of atomic orbitals (Cartesian); C++ signature :. i nao(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nbf()¶; Python Library Documentation: method nbf; nbf(...) unbound psi4.BasisSet method. nbf( (BasisSet)arg1) -> int :. Returns number of basis functions (Cartesian or spherical depending on has_puream); C++ signature :. i nbf(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nprimitive()¶; Python Library Documentation: method nprimitive; nprimitive(...) unbound psi4.BasisSet method. nprimitive( (BasisSet)arg1) -> int :. Returns total number of primitives in all contractions; C++ signature :. i nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell()¶; Python Library Documentation: method nshell; nshell(...) unbound psi4.BasisSet method. nshell( (BasisSet)arg1) -> int :. Returns number of shells; C++ signature :. i nshell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell_on_center()¶; Python Library Documentation: method nshell_on_center; nshell_on_center(...) unbound psi4.BasisSet method. nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i nshell_on_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.print_detail_out()¶; Python Library Documentation: method print_detail_out; print_detail_out(...) unbound psi4.BasisSet method. print_detail_out( (BasisSet)arg1) -> None :. docstring; C++ signature :. void print_detail_out(N3psi8BasisSetE {lvalue}). psi4.BasisSet.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.BasisSet method. print_out( (BasisSet)arg1) -> None :. do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:58548,Integrability,contract,contraction,58548,"Set method. shell_to_ao_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_ao_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_basis_function()¶; Python Library Documentation: method shell_to_basis_function; shell_to_basis_function(...) unbound psi4.BasisSet method. shell_to_basis_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_basis_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_center()¶; Python Library Documentation: method shell_to_center; shell_to_center(...) unbound psi4.BasisSet method. shell_to_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.zero_ao_basis_set()¶; Python Library Documentation: built-in function zero_ao_basis_set; zero_ao_basis_set(...). zero_ao_basis_set() -> BasisSet :. Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; C++ signature :. N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(). BasisSetParser¶. BoysLocalizer¶. psi4.BoysLocalizer.L()¶; Python Library Documentation: property. Localized orbital coefficients. psi4.BoysLocalizer.U()¶; Python Library Documentation: property. Orbital rotation matrix. psi4.BoysLocalizer.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :. docstring; C++ signature :. N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.BoysLocalizer.converged()¶; Python Library Documentation: property. Did the localization procedure converge?. psi4.BoysLocalizer.localize()¶; Python Library Documentation: method localize; localize(...) unbound psi4.BoysLocalizer method. localize( (Localizer)arg1) -> None :. Perform the localization procedure; C++ signature :. void localize(N3psi9LocalizerE {lvalue}). C",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:250000,Integrability,interface,interface,250000," molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Library Documentation: method save_xyz_file; save_xyz_file(...) unbound psi4.Molecule method. save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :. Saves an XYZ file to arg2; C++ signature :. void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b). psi4.Molecule.schoenflies_symbol()¶; Python Li",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:377253,Integrability,depend,depending,377253,"set per atom in CFOUR format; | ; | C++ signature :; | Ss genbas(N3psi8BasisSetE {lvalue}); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | Spherical harmonics?; | ; | C++ signature :; | b has_puream(N3psi8BasisSetE {lvalue}); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | Returns maximum angular momentum used; | ; | C++ signature :; | i max_am(N3psi8BasisSetE {lvalue}); | ; | max_function_per_shell(...); | max_function_per_shell( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_function_per_shell(N3psi8BasisSetE {lvalue}); | ; | max_nprimitive(...); | max_nprimitive( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_nprimitive(N3psi8BasisSetE {lvalue}); | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | Returns number of atomic orbitals (Cartesian); | ; | C++ signature :; | i nao(N3psi8BasisSetE {lvalue}); | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | Returns number of basis functions (Cartesian or spherical depending on has_puream); | ; | C++ signature :; | i nbf(N3psi8BasisSetE {lvalue}); | ; | nprimitive(...); | nprimitive( (BasisSet)arg1) -> int :; | Returns total number of primitives in all contractions; | ; | C++ signature :; | i nprimitive(N3psi8BasisSetE {lvalue}); | ; | nshell(...); | nshell( (BasisSet)arg1) -> int :; | Returns number of shells; | ; | C++ signature :; | i nshell(N3psi8BasisSetE {lvalue}); | ; | nshell_on_center(...); | nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i nshell_on_center(N3psi8BasisSetE {lvalue},i); | ; | print_detail_out(...); | print_detail_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_detail_out(N3psi8BasisSetE {lvalue}); | ; | print_out(...); | print_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi8BasisSetE {lvalue}); | ; | shell(...); | shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :; | docstring; | ; | C++ signature :; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:377444,Integrability,contract,contractions,377444,"ignature :; | b has_puream(N3psi8BasisSetE {lvalue}); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | Returns maximum angular momentum used; | ; | C++ signature :; | i max_am(N3psi8BasisSetE {lvalue}); | ; | max_function_per_shell(...); | max_function_per_shell( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_function_per_shell(N3psi8BasisSetE {lvalue}); | ; | max_nprimitive(...); | max_nprimitive( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_nprimitive(N3psi8BasisSetE {lvalue}); | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | Returns number of atomic orbitals (Cartesian); | ; | C++ signature :; | i nao(N3psi8BasisSetE {lvalue}); | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | Returns number of basis functions (Cartesian or spherical depending on has_puream); | ; | C++ signature :; | i nbf(N3psi8BasisSetE {lvalue}); | ; | nprimitive(...); | nprimitive( (BasisSet)arg1) -> int :; | Returns total number of primitives in all contractions; | ; | C++ signature :; | i nprimitive(N3psi8BasisSetE {lvalue}); | ; | nshell(...); | nshell( (BasisSet)arg1) -> int :; | Returns number of shells; | ; | C++ signature :; | i nshell(N3psi8BasisSetE {lvalue}); | ; | nshell_on_center(...); | nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i nshell_on_center(N3psi8BasisSetE {lvalue},i); | ; | print_detail_out(...); | print_detail_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_detail_out(N3psi8BasisSetE {lvalue}); | ; | print_out(...); | print_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi8BasisSetE {lvalue}); | ; | shell(...); | shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE shell(N3psi8BasisSetE {lvalue},i); | ; | shell( (BasisSet)arg1, (int)arg2, (int)arg3) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE she",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:381088,Integrability,contract,contraction,381088,"basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_auxiliary(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,Ss,Ss [,i]); | ; | pyconstruct_orbital(...); | pyconstruct_orbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :; | Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:438963,Integrability,interface,interface,438963,"efined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:553375,Integrability,interface,interface,553375,"at)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflies_symbol(...); | schoenflies_symbol( (Molecule)arg1) -> str :; | Returns the Schoenflies symbol; | ; | C++ signature :; | Ss schoenflies_symbol(N3psi8MoleculeE {lvalue}); | ; | set_active_fragment(...); | set_active_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Real; | ; | C++ signature",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:18196,Modifiability,variab,variables,18196,"sort(). psi4.cctransort()¶; Python Library Documentation: built-in function cctransort in module psi4; cctransort(...). cctransort( (Wavefunction)arg1) -> None :. Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; C++ signature :. void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cctriples()¶; Python Library Documentation: built-in function cctriples in module psi4; cctriples(...). cctriples( (Wavefunction)arg1) -> float :. Runs the coupled cluster (T) energy code.; C++ signature :. d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.clean()¶; Python Library Documentation: built-in function clean in module psi4; clean(...). clean() -> None :. Function to remove scratch files. Call between independent jobs.; C++ signature :. void clean(). psi4.clean_variables()¶; Python Library Documentation: built-in function clean_variables in module psi4; clean_variables(...). clean_variables() -> None :. Empties all PSI variables that have set internally.; C++ signature :. void clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:19250,Modifiability,config,configuration,19250,"oid clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:23686,Modifiability,adapt,adapted,23686,"lt-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:25080,Modifiability,variab,variables,25080,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:25169,Modifiability,variab,variables,25169,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:25471,Modifiability,variab,variables,25471,"active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 V",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:29491,Modifiability,variab,variables,29491,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:29580,Modifiability,variab,variables,29580,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:29818,Modifiability,variab,variables,29818," built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-in function has_global_option_changed in module psi4; has_global_option_changed(...). has_global_option_changed( (str)arg1) -> bool :. Returns boolean for whether the keyword arg1 has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35526,Modifiability,plugin,plugin,35526,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35585,Modifiability,plugin,plugin,35585,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35608,Modifiability,plugin,plugin,35608,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35621,Modifiability,plugin,plugin,35621,"-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_module(...). prepare_options_for_module( (str)arg1) -> None :. Sets the options mod",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35750,Modifiability,plugin,plugin,35750,"timized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_module(...). prepare_options_for_module( (str)arg1) -> None :. Sets the options module up to return options pertaining to the named argument (e.g. SCF).; C++ signature :. void prepare_optio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:37754,Modifiability,variab,variables,37754,le(Ss). psi4.print_global_options()¶; Python Library Documentation: built-in function print_global_options in module psi4; print_global_options(...). print_global_options() -> None :. Prints the currently set global (all modules) options to the output file.; C++ signature :. void print_global_options(). psi4.print_options()¶; Python Library Documentation: built-in function print_options in module psi4; print_options(...). print_options() -> None :. Prints the currently set options (to the output file) for the current module.; C++ signature :. void print_options(). psi4.print_out()¶; Python Library Documentation: built-in function print_out in module psi4; print_out(...). print_out( (str)arg1) -> None :. Prints a string (using sprintf-like notation) to the output file.; C++ signature :. void print_out(Ss). psi4.print_variables()¶; Python Library Documentation: built-in function print_variables in module psi4; print_variables(...). print_variables() -> None :. Prints all PSI variables that have been set internally.; C++ signature :. void print_variables(). psi4.psi_top_srcdir()¶; Python Library Documentation: built-in function psi_top_srcdir in module psi4; psi_top_srcdir(...). psi_top_srcdir() -> str :. Returns the location of the source code.; C++ signature :. Ss psi_top_srcdir(). psi4.psimrcc()¶; Python Library Documentation: built-in function psimrcc in module psi4; psimrcc(...). psimrcc( (Wavefunction)arg1) -> float :. Runs the multireference coupled cluster code.; C++ signature :. d psimrcc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.reopen_outfile()¶; Python Library Documentation: built-in function reopen_outfile in module psi4; reopen_outfile(...). reopen_outfile() -> None :. Reopens the output file.; C++ signature :. void reopen_outfile(). psi4.revoke_global_option_changed()¶; Python Library Documentation: built-in function revoke_global_option_changed in module psi4; revoke_global_option_changed(...). revoke_global_option_changed( (str)arg1) -> None :.,MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:40237,Modifiability,adapt,adapted,40237,"ocal_option_changed in module psi4; revoke_local_option_changed(...). revoke_local_option_changed( (str)arg1, (str)arg2) -> None :. Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; C++ signature :. void revoke_local_option_changed(Ss,Ss). psi4.run_gdma()¶; Python Library Documentation: built-in function run_gdma in module psi4; run_gdma(...). run_gdma( (Wavefunction)arg1, (str)arg2) -> float :. Runs the GDMA code.; C++ signature :. d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss). psi4.sapt()¶; Python Library Documentation: built-in function sapt in module psi4; sapt(...). sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :. Runs the symmetry adapted perturbation theory code.; C++ signature :. d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scatter()¶; Python Library Documentation: built-in function scatter in module psi4; scatter(...). scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :. New Scatter function.; C++ signature :. void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE). psi4.scf()¶; Python Library Documentation: built-in function scf in module psi4; scf(...). scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :. Runs the SCF code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object). psi4.scfgrad()¶; Python Library Documentation: built-in function scfgrad in module psi4; scfgrad(...). scfgrad( (Wavefunction)arg1) -> Matrix :. Run scfgrad, w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:42248,Modifiability,variab,variable,42248," a specialized DF-SCF gradient program.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scfhess()¶; Python Library Documentation: built-in function scfhess in module psi4; scfhess(...). scfhess( (Wavefunction)arg1) -> Matrix :. Run scfhess, which is a specialized DF-SCF hessian program.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE scfhess(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.set_active_molecule()¶; Python Library Documentation: built-in function set_active_molecule in module psi4; set_active_molecule(...). set_active_molecule( (Molecule)arg1) -> None :. Activates a previously defined (in the input) molecule, by name.; C++ signature :. void set_active_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.set_array_variable()¶; Python Library Documentation: built-in function set_array_variable in module psi4; set_array_variable(...). set_array_variable( (str)arg1, (Matrix)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_array_variable(Ss,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.set_efp_torque()¶; Python Library Documentation: built-in function set_efp_torque in module psi4; set_efp_torque(...). set_efp_torque( (Matrix)arg1) -> None :. Assigns the global EFP gradient to the values stored in the Nefp by 6 Matrix argument.; C++ signature :. void set_efp_torque(N5boost10shared_ptrIN3psi6MatrixEEE). psi4.set_frequencies()¶; Python Library Documentation: built-in function set_frequencies in module psi4; set_frequencies(...). set_frequencies( (Vector)arg1) -> None :. Assigns the global frequencies to the values stored in the 3N-6 Vector argument.; C++ signature :. void set_frequencies(N5boost10shared_ptrIN3psi6VectorEEE). psi4.set_global_option()¶; Python Library Documentation: built-in function set_global_option in module psi4; set_global_option(...). set_global_option( (str)arg1, (str)arg2) -> bool :. Sets value arg2 to string keyword arg1 for all modules.; C++ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:47383,Modifiability,variab,variable,47383,"Library Documentation: built-in function set_memory in module psi4; set_memory(...). set_memory( (int)arg1) -> None :. Sets the memory available to Psi (in bytes).; C++ signature :. void set_memory(m). psi4.set_nthread()¶; Python Library Documentation: built-in function set_nthread in module psi4; set_nthread(...). set_nthread( (int)arg1) -> None :. Sets the number of threads to use in SMP parallel computations.; C++ signature :. void set_nthread(i). psi4.set_parent_symmetry()¶; Python Library Documentation: built-in function set_parent_symmetry in module psi4; set_parent_symmetry(...). set_parent_symmetry( (str)arg1) -> None :. Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; C++ signature :. void set_parent_symmetry(Ss). psi4.set_variable()¶; Python Library Documentation: built-in function set_variable in module psi4; set_variable(...). set_variable( (str)arg1, (float)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_variable(Ss,d). psi4.thermo()¶; Python Library Documentation: built-in function thermo in module psi4; thermo(...). thermo( (Wavefunction)arg1, (Vector)arg2) -> float :. Computes thermodynamic data.; C++ signature :. d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.transqt2()¶; Python Library Documentation: built-in function transqt2 in module psi4; transqt2(...). transqt2( (Wavefunction)arg1) -> float :. Runs the (deprecated) transformation code.; C++ signature :. d transqt2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.version()¶; Python Library Documentation: built-in function version in module psi4; version(...). version() -> str :. Returns the version ID of this copy of Psi.; C++ signature :. PKc version(). AOShellCombinationsIterator¶. psi4.AOShellCombinationsIterator.first()¶; Python Library Documentation: method first; first(...) unbound psi4.AOShellCombinationsIterator method. first( (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:106842,Modifiability,inherit,inherited,106842,"erence( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_ignore_reference(N3psi5DerivE {lvalue},b). psi4.Deriv.set_tpdm_presorted()¶; Python Library Documentation: method set_tpdm_presorted; set_tpdm_presorted(...) unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:107001,Modifiability,inherit,inherited,107001,")¶; Python Library Documentation: method set_tpdm_presorted; set_tpdm_presorted(...) unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:107076,Modifiability,inherit,inherited,107076,") unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:109304,Modifiability,inherit,inherited,109304,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... —————————————",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:109606,Modifiability,inherit,inherited,109606,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:110330,Modifiability,inherit,inherited,110330," denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:110489,Modifiability,inherit,inherited,110489,"umber in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:110564,Modifiability,inherit,inherited,110564,"————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:112792,Modifiability,inherit,inherited,112792,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.DiagonalizeOrder.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.DiagonalizeOrder.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:113094,Modifiability,inherit,inherited,113094,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.DiagonalizeOrder.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.DiagonalizeOrder.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.DiagonalizeOrder.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.DiagonalizeOrder.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.DiagonalizeOrder.names()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:152507,Modifiability,inherit,inherited,152507,"anShell.nfunction()¶; Python Library Documentation: property. docstring. psi4.GaussianShell.nprimitive()¶; Python Library Documentation: property. docstring. psi4.GaussianShell.original_coef()¶; Python Library Documentation: method original_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:152666,Modifiability,inherit,inherited,152666,"ng. psi4.GaussianShell.original_coef()¶; Python Library Documentation: method original_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:152741,Modifiability,inherit,inherited,152741,"nal_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:154969,Modifiability,inherit,inherited,154969,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:155271,Modifiability,inherit,inherited,155271,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:155954,Modifiability,inherit,inherited,155954,"criptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:156113,Modifiability,inherit,inherited,156113," numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:156188,Modifiability,inherit,inherited,156188," of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:158416,Modifiability,inherit,inherited,158416,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.GeometryUnits.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.GeometryUnits.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:158718,Modifiability,inherit,inherited,158718,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.GeometryUnits.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.GeometryUnits.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.GeometryUnits.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.GeometryUnits.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.GeometryUnits.names()¶; Python Library Do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:243367,Modifiability,variab,variable,243367,"g2) -> None :. Uses the point group object obtain by calling point_group(); C++ signature :. void form_symmetry_information(N3psi8MoleculeE {lvalue},d). psi4.Molecule.geometry()¶; Python Library Documentation: method geometry; geometry(...) unbound psi4.Molecule method. geometry( (Molecule)arg1) -> Matrix :. Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); C++ signature :. N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_full_point_group()¶; Python Library Documentation: method get_full_point_group; get_full_point_group(...) unbound psi4.Molecule method. get_full_point_group( (Molecule)arg1) -> str :. Gets point group name such as C3v or S8; C++ signature :. Ss get_full_point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_variable()¶; Python Library Documentation: method get_variable; get_variable(...) unbound psi4.Molecule method. get_variable( (Molecule)arg1, (str)arg2) -> float :. Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; C++ signature :. d get_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.is_variable()¶; Python Library Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Docum",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:243715,Modifiability,variab,variable,243715," X 3) matrix of coordinates (in Bohr); C++ signature :. N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_full_point_group()¶; Python Library Documentation: method get_full_point_group; get_full_point_group(...) unbound psi4.Molecule method. get_full_point_group( (Molecule)arg1) -> str :. Gets point group name such as C3v or S8; C++ signature :. Ss get_full_point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_variable()¶; Python Library Documentation: method get_variable; get_variable(...) unbound psi4.Molecule method. get_variable( (Molecule)arg1, (str)arg2) -> float :. Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; C++ signature :. d get_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.is_variable()¶; Python Library Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Documentation: method molecular_charge; molecular_charge(...) unbound psi4.Molecule method. molecular_charge( (Molecule)arg1) -> int :. Gets the molecular charge; C++ signature :. i molecular_charge(N3psi8MoleculeE {lvalue}). psi4.Molecule.move_to_com()¶; Python Library Documentation: method move_to_com; move_to_com(...) unbound psi4.Molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:249951,Modifiability,extend,extended,249951," molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Library Documentation: method save_xyz_file; save_xyz_file(...) unbound psi4.Molecule method. save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :. Saves an XYZ file to arg2; C++ signature :. void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b). psi4.Molecule.schoenflies_symbol()¶; Python Li",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:255747,Modifiability,variab,variable,255747,"2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:255785,Modifiability,variab,variables,255785,"2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:257142,Modifiability,variab,variable,257142,"culeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E). psi4.Molecule.units()¶; Python Library Documentation: property. Units (Angstrom or Bohr) used to define the geometry. psi4.Molecule.update_geometry()¶; Python Library Documentation: method update_geometry; update_geometry(...) unbound psi4.Molecule method. update_geometry( (Molecule)arg1) -> None :. Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; C++ signature :. void update_geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.x()¶; Python Library Documentation: method x; x(...) unbound psi4.Molecule method. x( (Molecule)arg1, (int)arg2) -> float :. x position of atom; C++ signature :. d x(N3psi8MoleculeE {lvalue},i). psi4.Molecule.y()¶; Python Library Documentation: method y; y(...) unbound psi4.Molecule method. y( (Molecule)arg1, (int)arg2) -> float :. y position of atom; C++ signature :. d y(N3psi8MoleculeE {lvalue},i). psi4.Molecule.z()¶; Python Library Documentation: method z; z(...) unbound psi4.Molecule method. z( (Molecule)arg1, (int)arg2) -> float :. z position of atom; C++ signature :. d z(N3psi8MoleculeE {lvalue},i). MultipoleInt¶. psi4.MultipoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.MultipoleInt.basis1()¶; Python Library Documentation: property. The basis set on center",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:272531,Modifiability,inherit,inherited,272531,"g. psi4.PotentialInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.PotentialInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). Process¶. psi4.Process.environment()¶; Python Library Documentation: Environment in module psi4 object; class Environment(Boost.Python.instance). Method resolution order:. Environment. Boost.Python.instance. __builtin__.object. Methods defined here:. __getitem__(...). __getitem__( (Environment)arg1, (str)arg2) -> str :. docstring. C++ signature :. Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss). __init__(...). __init__( (object)arg1) -> None :. C++ signature :. void __init__(P7_object). __reduce__ = <unnamed Boost.Python function>(...). ———————————————————————-. Data and other attributes defined here:. __instance_size__ = 464. ———————————————————————-. Data descriptors inherited from Boost.Python.instance:. __dict__. __weakref__. ———————————————————————-. Data and other attributes inherited from Boost.Python.instance:. __new__ = <built-in method __new__ of Boost.Python.class object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. PseudoTrial¶. psi4.PseudoTrial.getA()¶; Python Library Documentation: method getA; getA(...) unbound psi4.PseudoTrial method. getA( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getI()¶; Python Library Documentation: method getI; getI(...) unbound psi4.PseudoTrial method. getI( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getIPS()¶; Python Library Documentation: method getIPS; getIPS(...) unbound psi4.PseudoTrial method. getIPS( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:272645,Modifiability,inherit,inherited,272645,"ble_pybuffer(...) unbound psi4.PotentialInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). Process¶. psi4.Process.environment()¶; Python Library Documentation: Environment in module psi4 object; class Environment(Boost.Python.instance). Method resolution order:. Environment. Boost.Python.instance. __builtin__.object. Methods defined here:. __getitem__(...). __getitem__( (Environment)arg1, (str)arg2) -> str :. docstring. C++ signature :. Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss). __init__(...). __init__( (object)arg1) -> None :. C++ signature :. void __init__(P7_object). __reduce__ = <unnamed Boost.Python function>(...). ———————————————————————-. Data and other attributes defined here:. __instance_size__ = 464. ———————————————————————-. Data descriptors inherited from Boost.Python.instance:. __dict__. __weakref__. ———————————————————————-. Data and other attributes inherited from Boost.Python.instance:. __new__ = <built-in method __new__ of Boost.Python.class object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. PseudoTrial¶. psi4.PseudoTrial.getA()¶; Python Library Documentation: method getA; getA(...) unbound psi4.PseudoTrial method. getA( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getI()¶; Python Library Documentation: method getI; getI(...) unbound psi4.PseudoTrial method. getI( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getIPS()¶; Python Library Documentation: method getIPS; getIPS(...) unbound psi4.PseudoTrial method. getIPS( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getQ()¶; Python Library Documentation:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:275983,Modifiability,inherit,inherited,275983,"n Library Documentation: property. docstring. psi4.PseudospectralInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.PseudospectralInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:276142,Modifiability,inherit,inherited,276142,"_enable_pybuffer(...) unbound psi4.PseudospectralInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:276217,Modifiability,inherit,inherited,276217,"OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:278445,Modifiability,inherit,inherited,278445,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:278747,Modifiability,inherit,inherited,278747,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:279510,Modifiability,inherit,inherited,279510,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:279669,Modifiability,inherit,inherited,279669,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:279744,Modifiability,inherit,inherited,279744,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:281972,Modifiability,inherit,inherited,281972,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:282274,Modifiability,inherit,inherited,282274,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:283037,Modifiability,inherit,inherited,283037,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:283196,Modifiability,inherit,inherited,283196,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:283271,Modifiability,inherit,inherited,283271,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:285499,Modifiability,inherit,inherited,285499,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:285801,Modifiability,inherit,inherited,285801,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:286564,Modifiability,inherit,inherited,286564,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:286723,Modifiability,inherit,inherited,286723,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:286798,Modifiability,inherit,inherited,286798,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:289026,Modifiability,inherit,inherited,289026,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.PsiReturnType.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.PsiReturnType.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:289328,Modifiability,inherit,inherited,289328,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.PsiReturnType.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.PsiReturnType.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.PsiReturnType.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.PsiReturnType.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.PsiReturnType.names()¶; Python Library Do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:369436,Modifiability,extend,extend,369436,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:369484,Modifiability,extend,extend,369484,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:369492,Modifiability,extend,extend,369492,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:369539,Modifiability,extend,extend,369539,"i4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:369615,Modifiability,extend,extend,369615,"unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:370030,Modifiability,extend,extend,370030,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:370078,Modifiability,extend,extend,370078,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:370086,Modifiability,extend,extend,370086,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:370137,Modifiability,extend,extend,370137,"Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OneBodyAOInt; AngularMomentumInt; DipoleInt; ElectricFieldInt; ElectrostaticInt; KineticInt; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:370217,Modifiability,extend,extend,370217,"end( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OneBodyAOInt; AngularMomentumInt; DipoleInt; ElectricFieldInt; ElectrostaticInt; KineticInt; MultipoleInt; NablaInt; OverlapInt; PotentialInt; PseudospectralInt; QuadrupoleI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:372990,Modifiability,inherit,inherited,372990,"n); matrix_vector; vector_of_doubles; ; class AOShellCombinationsIterator(Boost.Python.instance); | Method resolution order:; | AOShellCombinationsIterator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | first(...); | first( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void first(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | is_done(...); | is_done( (AOShellCombinationsIterator)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_done(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | next(...); | next( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void next(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | p; | docstring; | ; | q; | docstring; | ; | r; | docstring; | ; | s; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:373170,Modifiability,inherit,inherited,373170,"{lvalue}); | ; | is_done(...); | is_done( (AOShellCombinationsIterator)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_done(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | next(...); | next( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void next(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | p; | docstring; | ; | q; | docstring; | ; | r; | docstring; | ; | s; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void comp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:373932,Modifiability,inherit,inherited,373932,"built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:374443,Modifiability,inherit,inherited,374443,"; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(..",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:374849,Modifiability,inherit,inherited,374849,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_to_shell(...); | ao_to_shell( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i ao_to_shell(N3psi8BasisSetE {lvalue},i); | ; | decontract(...); | decontract( (BasisSet)arg1) -> BasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE decontract(N3psi8BasisSetE {lvalue}); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:375029,Modifiability,inherit,inherited,375029," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_to_shell(...); | ao_to_shell( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i ao_to_shell(N3psi8BasisSetE {lvalue},i); | ; | decontract(...); | decontract( (BasisSet)arg1) -> BasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE decontract(N3psi8BasisSetE {lvalue}); | ; | function_to_center(...); | function_to_center( (BasisSet)arg1, (int)arg2) -> int :; | Given a function number, return the number of the center it is on.; | ; | C++ signature :; | i fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:381530,Modifiability,inherit,inherited,381530,"rbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :; | Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This cl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:381710,Modifiability,inherit,inherited,381710,"arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:382466,Modifiability,inherit,inherited,382466," here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:382646,Modifiability,inherit,inherited,382646,"t__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:383392,Modifiability,inherit,inherited,383392,"; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | -------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:383680,Modifiability,inherit,inherited,383680,"--------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:384050,Modifiability,inherit,inherited,384050,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:384314,Modifiability,inherit,inherited,384314,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:384494,Modifiability,inherit,inherited,384494,"alize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ signature :; | void axpy(N3psi5detci6CIvectE {lvalue},d,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | close_io_files(...); | close_io_files( (CIVector)arg1, (int)arg2) -> None :; | docstring; | ; | C++ signature :; | void close_io_files(N3psi5detci6CIvectE {lvalue},i); | ; | copy(...); | copy( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:387748,Modifiability,inherit,inherited,387748," None :; | docstring; | ; | C++ signature :; | void set_nvec(N3psi5detci6CIvectE {lvalue},i); | ; | symnormalize(...); | symnormalize( (CIVector)arg1, (float)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void symnormalize(N3psi5detci6CIvectE {lvalue},d,i); | ; | vdot(...); | vdot( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> float :; | docstring; | ; | C++ signature :; | d vdot(N3psi5detci6CIvectE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | write(...); | write( (CIVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i write(N3psi5detci6CIvectE {lvalue},i,i); | ; | zero(...); | zero( (CIVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi5detci6CIvectE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | Returns a view of the CIVector's buffer; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIWavefunction(Wavefunction); | docstring; | ; | Method resolution order:; | CIWavefunction; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Hd_vector(...); | Hd_vector( (CIWavefunction)arg1, (int)arg2) -> CIVector :; | docstring; | ; | C++ signature :; | N5boost10sh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:387928,Modifiability,inherit,inherited,387928,"{lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | write(...); | write( (CIVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i write(N3psi5detci6CIvectE {lvalue},i,i); | ; | zero(...); | zero( (CIVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi5detci6CIvectE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | Returns a view of the CIVector's buffer; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIWavefunction(Wavefunction); | docstring; | ; | Method resolution order:; | CIWavefunction; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Hd_vector(...); | Hd_vector( (CIWavefunction)arg1, (int)arg2) -> CIVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi5detci6CIvectEEE Hd_vector(N3psi5detci14CIWavefunctionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_mcscf(...); | compute_mcscf( (CIWavefunction)arg1) -> None :; | docstring; | ; | C++ signature :; | void com",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:393957,Modifiability,inherit,inherited,393957," -> None :; | docstring; | ; | C++ signature :; | void sigma(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | tpdm(...); | tpdm( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE tpdm(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | transform_ci_integrals(...); | transform_ci_integrals( (CIWavefunction)arg1) -> None :; | docstring; | ; | C++ signature :; | void transform_ci_integrals(N3psi5detci14CIWavefunctionE {lvalue}); | ; | transform_mcscf_integrals(...); | transform_mcscf_integrals( (CIWavefunction)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void transform_mcscf_integrals(N3psi5detci14CIWavefunctionE {lvalue},b); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:404047,Modifiability,inherit,inherited,404047,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | -------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:404227,Modifiability,inherit,inherited,404227,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:404971,Modifiability,inherit,inherited,404971,"function)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunctio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:405586,Modifiability,inherit,inherited,405586,"avefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:415676,Modifiability,inherit,inherited,415676,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:415856,Modifiability,inherit,inherited,415856,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:416922,Modifiability,inherit,inherited,416922,"hon.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:417102,Modifiability,inherit,inherited,417102,"ass CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:418202,Modifiability,inherit,inherited,418202,"------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:418382,Modifiability,inherit,inherited,418382,".instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __we",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:419252,Modifiability,inherit,inherited,419252,"--------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFChargeFitter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFChargeFitter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:419432,Modifiability,inherit,inherited,419432,"ther attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFChargeFitter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFChargeFitter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...); | fit( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE fit(N3psi14DFChargeFitterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:421162,Modifiability,inherit,inherited,421162,">(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...); | fit( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE fit(N3psi14DFChargeFitterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setAuxiliary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | setD(...); | setD( (DFChargeFitter)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void setD(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | setPrimary(...); | setPrimary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setPrimary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFTensor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFTensor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Idfmo(...); | Idfmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Idfmo(N3psi8DFTensorE {lvalue}); | ; | Imo(...); | Imo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:421342,Modifiability,inherit,inherited,421342,"itterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setAuxiliary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | setD(...); | setD( (DFChargeFitter)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void setD(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | setPrimary(...); | setPrimary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setPrimary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFTensor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFTensor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Idfmo(...); | Idfmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Idfmo(N3psi8DFTensorE {lvalue}); | ; | Imo(...); | Imo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Imo(N3psi8DFTensorE {lvalue}); | ; | Qmo(...); | Qmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qmo(N3psi8DFTensorE {lvalue}); | ; | Qoo(...); | Qoo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_pt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:423413,Modifiability,inherit,inherited,423413,"x :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qov(N3psi8DFTensorE {lvalue}); | ; | Qso(...); | Qso( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qso(N3psi8DFTensorE {lvalue}); | ; | Qvv(...); | Qvv( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qvv(N3psi8DFTensorE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (Matrix)arg4, (int)arg5, (int)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,i); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Deriv(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Deriv; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:423593,Modifiability,inherit,inherited,423593,"trix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qso(N3psi8DFTensorE {lvalue}); | ; | Qvv(...); | Qvv( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qvv(N3psi8DFTensorE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (Matrix)arg4, (int)arg5, (int)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,i); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Deriv(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Deriv; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:425204,Modifiability,inherit,inherited,425204,"WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ; | set_deriv_density_backtransformed(...); | set_deriv_density_backtransformed( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_deriv_density_backtransformed(N3psi5DerivE {lvalue},b); | ; | set_ignore_reference(...); | set_ignore_reference( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_ignore_reference(N3psi5DerivE {lvalue},b); | ; | set_tpdm_presorted(...); | set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_tpdm_presorted(N3psi5DerivE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | -----------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:425384,Modifiability,inherit,inherited,425384,"e__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ; | set_deriv_density_backtransformed(...); | set_deriv_density_backtransformed( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_deriv_density_backtransformed(N3psi5DerivE {lvalue},b); | ; | set_ignore_reference(...); | set_ignore_reference( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_ignore_reference(N3psi5DerivE {lvalue},b); | ; | set_tpdm_presorted(...); | set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_tpdm_presorted(N3psi5DerivE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:426133,Modifiability,inherit,inherited,426133,"lue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnew",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:426362,Modifiability,inherit,inherited,426362,"------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:426497,Modifiability,inherit,inherited,426497,"_new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:429176,Modifiability,inherit,inherited,429176,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dimension(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dimension; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Dimension)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i __getitem__(N3psi9DimensionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | vo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:429564,Modifiability,inherit,inherited,429564," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dimension(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dimension; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Dimension)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i __getitem__(N3psi9DimensionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __init__( (object)arg1, (int)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,Ss); | ; | __r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:431921,Modifiability,inherit,inherited,431921," | n(...); | n( (Dimension)arg1) -> int :; | The order of the dimension; | ; | C++ signature :; | i n(N3psi9DimensionE {lvalue}); | ; | print_out(...); | print_out( (Dimension)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9DimensionE {lvalue}); | ; | to_tuple = _dimension_to_tuple(dim); | Converts a psi4.Dimension object to a tuple.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_list = _dimension_from_list(self, dims, name='New Dimension') from Boost.Python.class; | Builds a psi4.Dimension object from a python list or tuple. If a dimension; | object is passed a copy will be returned.; | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | name; | The name of the dimension. Used in printing.; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | --------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:432101,Modifiability,inherit,inherited,432101,"| void print_out(N3psi9DimensionE {lvalue}); | ; | to_tuple = _dimension_to_tuple(dim); | Converts a psi4.Dimension object to a tuple.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_list = _dimension_from_list(self, dims, name='New Dimension') from Boost.Python.class; | Builds a psi4.Dimension object from a python list or tuple. If a dimension; | object is passed a copy will be returned.; | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | name; | The name of the dimension. Used in printing.; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:432845,Modifiability,inherit,inherited,432845,"--------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:433356,Modifiability,inherit,inherited,433356,"on order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:433762,Modifiability,inherit,inherited,433762,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | a1(...); | a1( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a1(N3psi10DispersionE {lvalue}); | ; | a2(...); | a2( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a2(N3psi10DispersionE {lvalue}); | ; | bibtex(...); | bibtex( (Dispersion)arg1) -> str :; | Get the BibTeX key for the lit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:433942,Modifiability,inherit,inherited,433942," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | a1(...); | a1( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a1(N3psi10DispersionE {lvalue}); | ; | a2(...); | a2( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a2(N3psi10DispersionE {lvalue}); | ; | bibtex(...); | bibtex( (Dispersion)arg1) -> str :; | Get the BibTeX key for the literature reference.; | ; | C++ signature :; | Ss bibtex(N3psi10DispersionE {lvalue}); | ; | citation(...); | citation( (Dispersion)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:438551,Modifiability,inherit,inherited,438551,"tation( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_citation(N3psi10DispersionE {lvalue},Ss); | ; | set_description(...); | set_description( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_description(N3psi10DispersionE {lvalue},Ss); | ; | set_name(...); | set_name( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10DispersionE {lvalue},Ss); | ; | sr6(...); | sr6( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d sr6(N3psi10DispersionE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:438731,Modifiability,inherit,inherited,438731,"(str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10DispersionE {lvalue},Ss); | ; | sr6(...); | sr6( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d sr6(N3psi10DispersionE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:439682,Modifiability,inherit,inherited,439682,"---------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class EFP(Boost.Python.instance); | Class interfacing with libefp; | ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:439862,Modifiability,inherit,inherited,439862,"method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class EFP(Boost.Python.instance); | Class interfacing with libefp; | ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:441224,Modifiability,inherit,inherited,441224,"| ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | print_out( (EFP)arg1) -> None :; | Prints options settings and EFP and QM geometries; | ; | C++ signature :; | void print_out(N3psi3efp3EFPE {lvalue}); | ; | set_qm_atoms(...); | set_qm_atoms( (EFP)arg1) -> None :; | Provides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:441404,Modifiability,inherit,inherited,441404,"ject,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | print_out( (EFP)arg1) -> None :; | Prints options settings and EFP and QM geometries; | ; | C++ signature :; | void print_out(N3psi3efp3EFPE {lvalue}); | ; | set_qm_atoms(...); | set_qm_atoms( (EFP)arg1) -> None :; | Provides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:442156,Modifiability,inherit,inherited,442156,"ides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:442689,Modifiability,inherit,inherited,442689,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:442883,Modifiability,inherit,inherited,442883,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:443063,Modifiability,inherit,inherited,443063," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:443821,Modifiability,inherit,inherited,443821,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:444332,Modifiability,inherit,inherited,444332,"r:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:444738,Modifiability,inherit,inherited,444738,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:444918,Modifiability,inherit,inherited,444918," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:445676,Modifiability,inherit,inherited,445676,"he one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:446187,Modifiability,inherit,inherited,446187,"r:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:446593,Modifiability,inherit,inherited,446593,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ---------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:446773,Modifiability,inherit,inherited,446773," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:447701,Modifiability,inherit,inherited,447701,"riptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:447881,Modifiability,inherit,inherited,447881," | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstrin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:448659,Modifiability,inherit,inherited,448659,"---------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:449192,Modifiability,inherit,inherited,449192,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:449386,Modifiability,inherit,inherited,449386,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:449566,Modifiability,inherit,inherited,449566," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signatu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:450324,Modifiability,inherit,inherited,450324,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:450857,Modifiability,inherit,inherited,450857,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:451051,Modifiability,inherit,inherited,451051,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:451231,Modifiability,inherit,inherited,451231," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:453262,Modifiability,inherit,inherited,453262,"otential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class can",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:453442,Modifiability,inherit,inherited,453442,"otentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:454194,Modifiability,inherit,inherited,454194,"------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:454727,Modifiability,inherit,inherited,454727,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:454921,Modifiability,inherit,inherited,454921,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:455101,Modifiability,inherit,inherited,455101," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:455885,Modifiability,inherit,inherited,455885,"BodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:456418,Modifiability,inherit,inherited,456418,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:456612,Modifiability,inherit,inherited,456612,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:456792,Modifiability,inherit,inherited,456792," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signatu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:457550,Modifiability,inherit,inherited,457550,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:458083,Modifiability,inherit,inherited,458083,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:458277,Modifiability,inherit,inherited,458277,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:458457,Modifiability,inherit,inherited,458457," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:459223,Modifiability,inherit,inherited,459223,"inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:459756,Modifiability,inherit,inherited,459756,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:459950,Modifiability,inherit,inherited,459950,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:460130,Modifiability,inherit,inherited,460130," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | --------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:460959,Modifiability,inherit,inherited,460959," ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:461139,Modifiability,inherit,inherited,461139,"---------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:461984,Modifiability,inherit,inherited,461984,"----------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:462380,Modifiability,inherit,inherited,462380,"f Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (bool)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | form_QR_inverse(...); | form_QR_inverse( (FittingMetric)arg1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:462560,Modifiability,inherit,inherited,462560,"e; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (bool)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | form_QR_inverse(...); | form_QR_inverse( (FittingMetric)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void form_QR_inverse(N3psi13FittingMetricE {lvalue},d); | ; | form_cholesky_inverse(...); | form_cholesky_inverse( (FittingMetric)arg1) -> None :; | docstring; | ; | C++ signature :; | void form_cholesky_inverse",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:465249,Modifiability,inherit,inherited,465249," str :; | docstring; | ; | C++ signature :; | Ss get_algorithm(N3psi13FittingMetricE {lvalue}); | ; | get_metric(...); | get_metric( (FittingMetric)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE get_metric(N3psi13FittingMetricE {lvalue}); | ; | get_pivots(...); | get_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_pivots(N3psi13FittingMetricE {lvalue}); | ; | get_reverse_pivots(...); | get_reverse_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_reverse_pivots(N3psi13FittingMetricE {lvalue}); | ; | is_inverted(...); | is_inverted( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_inverted(N3psi13FittingMetricE {lvalue}); | ; | is_poisson(...); | is_poisson( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_poisson(N3psi13FittingMetricE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Functional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Functional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | alpha(...); | alpha( (Functional)arg1) -> float :; | docstring; | ; | C++ signature :; | d alpha(N3psi10FunctionalE {lvalue}); | ; | citation(...); | citation( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss citation(N3psi10FunctionalE {lvalue}); | ; | description(...); | descr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:465429,Modifiability,inherit,inherited,465429,"d_ptrIN3psi6MatrixEEE get_metric(N3psi13FittingMetricE {lvalue}); | ; | get_pivots(...); | get_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_pivots(N3psi13FittingMetricE {lvalue}); | ; | get_reverse_pivots(...); | get_reverse_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_reverse_pivots(N3psi13FittingMetricE {lvalue}); | ; | is_inverted(...); | is_inverted( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_inverted(N3psi13FittingMetricE {lvalue}); | ; | is_poisson(...); | is_poisson( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_poisson(N3psi13FittingMetricE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Functional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Functional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | alpha(...); | alpha( (Functional)arg1) -> float :; | docstring; | ; | C++ signature :; | d alpha(N3psi10FunctionalE {lvalue}); | ; | citation(...); | citation( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss citation(N3psi10FunctionalE {lvalue}); | ; | description(...); | description( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss description(N3psi10FunctionalE {lvalue}); | ; | is_gga(...); | is_gga( (Functional)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:469861,Modifiability,inherit,inherited,469861,"loat)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_meta_cutoff(N3psi10FunctionalE {lvalue},d); | ; | set_name(...); | set_name( (Functional)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10FunctionalE {lvalue},Ss); | ; | set_omega(...); | set_omega( (Functional)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_omega(N3psi10FunctionalE {lvalue},d); | ; | set_parameter(...); | set_parameter( (Functional)arg1, (str)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_parameter(N3psi10FunctionalE {lvalue},Ss,d); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_base(...); | build_base( (str)arg1) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE build_base(Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ---------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:470041,Modifiability,inherit,inherited,470041,"ne :; | docstring; | ; | C++ signature :; | void set_omega(N3psi10FunctionalE {lvalue},d); | ; | set_parameter(...); | set_parameter( (Functional)arg1, (str)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_parameter(N3psi10FunctionalE {lvalue},Ss,d); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_base(...); | build_base( (str)arg1) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE build_base(Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:470848,Modifiability,inherit,inherited,470848,"t be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GaussianShell(Boost.Python.instance); | docstring; | ; | Method resolution order:; | GaussianShell; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | coef(...); | coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d coef(N3psi13GaussianShellE {lvalue},i); | ; | erd_coef(...); | erd_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d erd_coef(N3psi13Gaussi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:471028,Modifiability,inherit,inherited,471028,"-------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GaussianShell(Boost.Python.instance); | docstring; | ; | Method resolution order:; | GaussianShell; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | coef(...); | coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d coef(N3psi13GaussianShellE {lvalue},i); | ; | erd_coef(...); | erd_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d erd_coef(N3psi13GaussianShellE {lvalue},i); | ; | exp(...); | exp( (GaussianShell)arg1, (int)arg2) -> float :; | Returns the exponent of the given primitive; | ; | C++ signature :; | d exp(N3psi13GaussianShellE {lvalue},i); | ; | is_cartesian(...); | i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:473131,Modifiability,inherit,inherited,473131,"ianShellE {lvalue},i); | ; | is_cartesian(...); | is_cartesian( (GaussianShell)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_cartesian(N3psi13GaussianShellE {lvalue}); | ; | is_pure(...); | is_pure( (GaussianShell)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_pure(N3psi13GaussianShellE {lvalue}); | ; | original_coef(...); | original_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d original_coef(N3psi13GaussianShellE {lvalue},i); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | AMCHAR; | docstring; | ; | am; | docstring; | ; | amchar; | docstring; | ; | function_index; | Basis function index where this shell starts.; | ; | ncartesian; | docstring; | ; | ncenter; | docstring; | ; | nfunction; | docstring; | ; | nprimitive; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:473311,Modifiability,inherit,inherited,473311,"riginal_coef(...); | original_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d original_coef(N3psi13GaussianShellE {lvalue},i); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | AMCHAR; | docstring; | ; | am; | docstring; | ; | amchar; | docstring; | ; | function_index; | Basis function index where this shell starts.; | ; | ncartesian; | docstring; | ; | ncenter; | docstring; | ; | nfunction; | docstring; | ; | nprimitive; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:474030,Modifiability,inherit,inherited,474030,"lass cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __get",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:474259,Modifiability,inherit,inherited,474259,"| ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:474394,Modifiability,inherit,inherited,474394,"| __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:477073,Modifiability,inherit,inherited,477073,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:477461,Modifiability,inherit,inherited,477461," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:478678,Modifiability,inherit,inherited,478678,"d from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:488768,Modifiability,inherit,inherited,488768,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IO(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IO; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | close(...); | close( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void close(N3psi4PSIOE {lvalue},j,i); | ; | open(...); | open( (IO)arg1, (int)arg2, (int)arg3) -> N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:488948,Modifiability,inherit,inherited,488948,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IO(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IO; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | close(...); | close( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void close(N3psi4PSIOE {lvalue},j,i); | ; | open(...); | open( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void open(N3psi4PSIOE {lvalue},j,i); | ; | open_check(...); | open_check( (IO)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i open_check(N3psi4PSIOE {lvalue},j)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:491670,Modifiability,inherit,inherited,491670,"cstring; | ; | C++ signature :; | void tocprint(N3psi4PSIOE {lvalue},j); | ; | tocwrite(...); | tocwrite( (IO)arg1, (int)arg2) -> None :; | docstring; | ; | C++ signature :; | void tocwrite(N3psi4PSIOE {lvalue},j); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | change_file_namespace(...); | change_file_namespace( (int)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void change_file_namespace(j,Ss,Ss); | ; | get_default_namespace(...); | get_default_namespace() -> str :; | docstring; | ; | C++ signature :; | Ss get_default_namespace(); | ; | set_default_namespace(...); | set_default_namespace( (str)arg1) -> None :; | docstring; | ; | C++ signature :; | void set_default_namespace(Ss); | ; | shared_object(...); | shared_object() -> IO :; | ; | C++ signature :; | N5boost10shared_ptrIN3psi4PSIOEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IOManager(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IOManager; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | crashclean(...); | crashclean( (IOManager)arg1) -> None :; | docstring; | ; | C++ signature :; | void crashclean(N3psi11PSIOManage",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:491850,Modifiability,inherit,inherited,491850,"----------; | Static methods defined here:; | ; | change_file_namespace(...); | change_file_namespace( (int)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void change_file_namespace(j,Ss,Ss); | ; | get_default_namespace(...); | get_default_namespace() -> str :; | docstring; | ; | C++ signature :; | Ss get_default_namespace(); | ; | set_default_namespace(...); | set_default_namespace( (str)arg1) -> None :; | docstring; | ; | C++ signature :; | void set_default_namespace(Ss); | ; | shared_object(...); | shared_object() -> IO :; | ; | C++ signature :; | N5boost10shared_ptrIN3psi4PSIOEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IOManager(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IOManager; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | crashclean(...); | crashclean( (IOManager)arg1) -> None :; | docstring; | ; | C++ signature :; | void crashclean(N3psi11PSIOManagerE {lvalue}); | ; | get_default_path(...); | get_default_path( (IOManager)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss get_default_path(N3psi11PSIOManagerE {lvalue}); | ; | get_file_path(...); | get_file_path( (IOManager)arg1, (int)arg2) -> str :; | docstring; | ; | C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:494670,Modifiability,inherit,inherited,494670,"d set_default_path(N3psi11PSIOManagerE {lvalue},Ss); | ; | set_specific_path(...); | set_specific_path( (IOManager)arg1, (int)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_path(N3psi11PSIOManagerE {lvalue},i,Ss); | ; | set_specific_retention(...); | set_specific_retention( (IOManager)arg1, (int)arg2, (bool)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_retention(N3psi11PSIOManagerE {lvalue},i,b); | ; | write_scratch_file(...); | write_scratch_file( (IOManager)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void write_scratch_file(N3psi11PSIOManagerE {lvalue},Ss,Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> IOManager :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi11PSIOManagerEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:494850,Modifiability,inherit,inherited,494850,"cific_retention( (IOManager)arg1, (int)arg2, (bool)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_retention(N3psi11PSIOManagerE {lvalue},i,b); | ; | write_scratch_file(...); | write_scratch_file( (IOManager)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void write_scratch_file(N3psi11PSIOManagerE {lvalue},Ss,Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> IOManager :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi11PSIOManagerEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); | dim( (IntVector)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:496444,Modifiability,inherit,inherited,496444,"ne :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); | dim( (IntVector)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (IntVector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi9IntVectorE {lvalue}); | ; | print_out(...); | print_out( (IntVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9IntVectorE {lvalue}); | ; | set(...); | set( (IntVector)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi9IntVectorE {lvalue},i,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntegralFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntegralFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:496624,Modifiability,inherit,inherited,496624,"ignature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (IntVector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi9IntVectorE {lvalue}); | ; | print_out(...); | print_out( (IntVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9IntVectorE {lvalue}); | ; | set(...); | set( (IntVector)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi9IntVectorE {lvalue},i,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntegralFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntegralFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __init__( (object)arg1, (BasisSet)arg2 [, (BasisSet)arg3]) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE [,N5boost10shared_ptrIN3psi8BasisSetEEE]); | ; | __reduce__ = <unnamed Boost.Python",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:502881,Modifiability,inherit,inherited,502881,"3 [, (bool)arg4]]) -> TwoBodyAOInt :; | docstring; | ; | C++ signature :; | PN3psi12TwoBodyAOIntE f12g12(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]]); | ; | overlap_3c(...); | overlap_3c( (IntegralFactory)arg1) -> ThreeCenterOverlapInt :; | docstring; | ; | C++ signature :; | PN3psi21ThreeCenterOverlapIntE overlap_3c(N3psi15IntegralFactoryE {lvalue}); | ; | shells_iterator(...); | shells_iterator( (IntegralFactory)arg1) -> AOShellCombinationsIterator :; | docstring; | ; | C++ signature :; | PN3psi27AOShellCombinationsIteratorE shells_iterator(N3psi15IntegralFactoryE {lvalue}); | ; | so_multipoles(...); | so_multipoles( (IntegralFactory)arg1, (int)arg2) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_multipoles(N3psi15IntegralFactoryE {lvalue},i); | ; | so_overlap(...); | so_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_overlap(N3psi15IntegralFactoryE {lvalue} [,i]); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class JK(Boost.Python.instance); | docstring; | ; | Method resolution order:; | JK; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C_left(...); | C_left( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_left(N3psi2JKE {lvalue}); | ; | C_right(...); | C_right( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_right(N3psi2JKE {lvalue}); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:503061,Modifiability,inherit,inherited,503061,"ralFactory)arg1) -> ThreeCenterOverlapInt :; | docstring; | ; | C++ signature :; | PN3psi21ThreeCenterOverlapIntE overlap_3c(N3psi15IntegralFactoryE {lvalue}); | ; | shells_iterator(...); | shells_iterator( (IntegralFactory)arg1) -> AOShellCombinationsIterator :; | docstring; | ; | C++ signature :; | PN3psi27AOShellCombinationsIteratorE shells_iterator(N3psi15IntegralFactoryE {lvalue}); | ; | so_multipoles(...); | so_multipoles( (IntegralFactory)arg1, (int)arg2) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_multipoles(N3psi15IntegralFactoryE {lvalue},i); | ; | so_overlap(...); | so_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_overlap(N3psi15IntegralFactoryE {lvalue} [,i]); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class JK(Boost.Python.instance); | docstring; | ; | Method resolution order:; | JK; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C_left(...); | C_left( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_left(N3psi2JKE {lvalue}); | ; | C_right(...); | C_right( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_right(N3psi2JKE {lvalue}); | ; | D(...); | D( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE D(N3psi2JKE {lvalue}); | ; | J(...); | J( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:505524,Modifiability,inherit,inherited,505524,"mpute( (JK)arg1) -> None :; | ; | C++ signature :; | void compute(N3psi2JKE {lvalue}); | ; | finalize(...); | finalize( (JK)arg1) -> None :; | ; | C++ signature :; | void finalize(N3psi2JKE {lvalue}); | ; | initialize(...); | initialize( (JK)arg1) -> None :; | ; | C++ signature :; | void initialize(N3psi2JKE {lvalue}); | ; | print_header(...); | print_header( (JK)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_header(N3psi2JKE {lvalue}); | ; | wK(...); | wK( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE wK(N3psi2JKE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_JK(...); | build_JK( (BasisSet)arg1) -> JK :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi2JKEEE build_JK(N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:505704,Modifiability,inherit,inherited,505704,"t_header( (JK)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_header(N3psi2JKE {lvalue}); | ; | wK(...); | wK( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE wK(N3psi2JKE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_JK(...); | build_JK( (BasisSet)arg1) -> JK :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi2JKEEE build_JK(N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:506450,Modifiability,inherit,inherited,506450,"; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:506961,Modifiability,inherit,inherited,506961,"n order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:507367,Modifiability,inherit,inherited,507367,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:507547,Modifiability,inherit,inherited,507547," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:508723,Modifiability,inherit,inherited,508723,"| __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_vir(N3psi18LaplaceDenominatorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LibParallelHelper(Boost.Python.instance); | Method resolution order:; | LibParallelHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | AddTask(...); | AddTask( (LibParallelHelper)arg1, (str)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void AddTask(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python3strE {lvalue},i); | ; | Begin(...); | Begin( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Begin(N3psi11LibParall",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:508903,Modifiability,inherit,inherited,508903,"or; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_vir(N3psi18LaplaceDenominatorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LibParallelHelper(Boost.Python.instance); | Method resolution order:; | LibParallelHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | AddTask(...); | AddTask( (LibParallelHelper)arg1, (str)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void AddTask(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python3strE {lvalue},i); | ; | Begin(...); | Begin( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Begin(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Done(...); | Done( (LibParallelHelper)arg1) -> bool :; | ; | C++ signature :; | b Done(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | MakeJob(...); | MakeJob( (LibParallelHelper)arg1) -> None :; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:510717,Modifiability,inherit,inherited,510717,"llelHelperE {lvalue}); | ; | Done(...); | Done( (LibParallelHelper)arg1) -> bool :; | ; | C++ signature :; | b Done(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | MakeJob(...); | MakeJob( (LibParallelHelper)arg1) -> None :; | ; | C++ signature :; | void MakeJob(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Next(...); | Next( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Next(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Synch(...); | Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :; | ; | C++ signature :; | N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 48; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:510897,Modifiability,inherit,inherited,510897," :; | ; | C++ signature :; | void MakeJob(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Next(...); | Next( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Next(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Synch(...); | Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :; | ; | C++ signature :; | N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 48; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:512417,Modifiability,inherit,inherited,512417,"__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Matrix(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Matrix; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Matrix)arg1, (tuple)arg2) -> float ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:512597,Modifiability,inherit,inherited,512597,"-----------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Matrix(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Matrix; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Matrix)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6MatrixE {lvalue},N5boost6python5tupleE); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,i); | ; | __init__( (object)arg1, (str)arg2, (int)arg3, (int)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss,i,i); | ; | __init__( (object)arg1, (str)arg2, (Dimension)a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:524848,Modifiability,inherit,inherited,524848,"ptional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MatrixFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:525028,Modifiability,inherit,inherited,525028," | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MatrixFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ---------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:526463,Modifiability,inherit,inherited,526463,"olution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> MatrixFactory :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi13MatrixFactoryEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MintsHelper(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MintsHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_angular_momentum(...); | ao_angular_momentum( (Mints",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:526643,Modifiability,inherit,inherited,526643,"); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> MatrixFactory :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi13MatrixFactoryEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MintsHelper(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MintsHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_angular_momentum(...); | ao_angular_momentum( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE ao_angular_momentum(N3psi11MintsHelperE {lvalue}); | ; | ao_erf_eri(...); | ao_erf_eri( (MintsHelper)arg1, (float)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:540455,Modifiability,inherit,inherited,540455," so_overlap( (MintsHelper)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_overlap(N3psi11MintsHelperE {lvalue}); | ; | so_potential(...); | so_potential( (MintsHelper)arg1, (bool)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_potential(N3psi11MintsHelperE {lvalue},b); | ; | so_quadrupole(...); | so_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | so_traceless_quadrupole(...); | so_traceless_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_traceless_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | sobasisset(...); | sobasisset( (MintsHelper)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi11MintsHelperE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MoldenWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MoldenWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:540635,Modifiability,inherit,inherited,540635,"rix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_potential(N3psi11MintsHelperE {lvalue},b); | ; | so_quadrupole(...); | so_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | so_traceless_quadrupole(...); | so_traceless_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_traceless_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | sobasisset(...); | sobasisset( (MintsHelper)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi11MintsHelperE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MoldenWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MoldenWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:542131,Modifiability,inherit,inherited,542131,"st.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:542311,Modifiability,inherit,inherited,542311,"te( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Functio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:548621,Modifiability,variab,variable,548621,"on(...); | fix_orientation( (Molecule)arg1, (bool)arg2) -> None :; | Fix the orientation at its current frame; | ; | C++ signature :; | void fix_orientation(N3psi8MoleculeE {lvalue},b); | ; | form_symmetry_information(...); | form_symmetry_information( (Molecule)arg1, (float)arg2) -> None :; | Uses the point group object obtain by calling point_group(); | ; | C++ signature :; | void form_symmetry_information(N3psi8MoleculeE {lvalue},d); | ; | geometry(...); | geometry( (Molecule)arg1) -> Matrix :; | Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); | ; | C++ signature :; | N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}); | ; | get_full_point_group(...); | get_full_point_group( (Molecule)arg1) -> str :; | Gets point group name such as C3v or S8; | ; | C++ signature :; | Ss get_full_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:548878,Modifiability,variab,variable,548878,"mation( (Molecule)arg1, (float)arg2) -> None :; | Uses the point group object obtain by calling point_group(); | ; | C++ signature :; | void form_symmetry_information(N3psi8MoleculeE {lvalue},d); | ; | geometry(...); | geometry( (Molecule)arg1) -> Matrix :; | Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); | ; | C++ signature :; | N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}); | ; | get_full_point_group(...); | get_full_point_group( (Molecule)arg1) -> str :; | Gets point group name such as C3v or S8; | ; | C++ signature :; | Ss get_full_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:553324,Modifiability,extend,extended,553324,"at)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflies_symbol(...); | schoenflies_symbol( (Molecule)arg1) -> str :; | Returns the Schoenflies symbol; | ; | C++ signature :; | Ss schoenflies_symbol(N3psi8MoleculeE {lvalue}); | ; | set_active_fragment(...); | set_active_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Real; | ; | C++ signature",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:557297,Modifiability,variab,variable,557297," | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:557335,Modifiability,variab,variables,557335," | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:558218,Modifiability,variab,variable,558218,"; | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_strin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:559632,Modifiability,inherit,inherited,559632,"nition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | units; | Units (Angstrom or Bohr) used to define the geometry; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:559812,Modifiability,inherit,inherited,559812,"f atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | units; | Units (Angstrom or Bohr) used to define the geometry; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:560562,Modifiability,inherit,inherited,560562,"--------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:561073,Modifiability,inherit,inherited,561073,"order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:561479,Modifiability,inherit,inherited,561479,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:561659,Modifiability,inherit,inherited,561659," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE creat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:562741,Modifiability,inherit,inherited,562741,"---------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE create_matrices(N3psi16OperatorSymmetryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:562921,Modifiability,inherit,inherited,562921,"metry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE create_matrices(N3psi16OperatorSymmetryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:563745,Modifiability,inherit,inherited,563745,"); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:563925,Modifiability,inherit,inherited,563925,"--------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12One",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:564667,Modifiability,inherit,inherited,564667,"( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:565178,Modifiability,inherit,inherited,565178,"ion order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:565584,Modifiability,inherit,inherited,565584,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:565764,Modifiability,inherit,inherited,565764," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:568134,Modifiability,inherit,inherited,568134,"signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_so(...); | set_Db_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_title(...); | set_title( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_title(N3psi6OEPropE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OneBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:568314,Modifiability,inherit,inherited,568314,"3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_so(...); | set_Db_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_title(...); | set_title( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_title(N3psi6OEPropE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OneBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:569841,Modifiability,inherit,inherited,569841," Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OrbitalSpace(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OrbitalSpace; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C(...); | C( (OrbitalSpace)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE C(N3psi12OrbitalSpaceE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (str)arg2, (str)arg3, (Matrix)arg4, (Vector)arg5, (BasisSet)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:570021,Modifiability,inherit,inherited,570021,"_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OrbitalSpace(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OrbitalSpace; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C(...); | C( (OrbitalSpace)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE C(N3psi12OrbitalSpaceE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (str)arg2, (str)arg3, (Matrix)arg4, (Vector)arg5, (BasisSet)arg6, (IntegralFactory)arg7) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss,Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE); | ; | __init__( (object)arg1, (str)arg2, (str)arg3, (Matr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:573375,Modifiability,inherit,inherited,573375,"ral(N3psi12OrbitalSpaceE {lvalue}); | ; | name(...); | name( (OrbitalSpace)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi12OrbitalSpaceE {lvalue}); | ; | nirrep(...); | nirrep( (OrbitalSpace)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi12OrbitalSpaceE {lvalue}); | ; | print_out(...); | print_out( (OrbitalSpace)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi12OrbitalSpaceE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_cabs_space(...); | build_cabs_space( (OrbitalSpace)arg1, (OrbitalSpace)arg2, (float)arg3) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_cabs_space(N3psi12OrbitalSpaceE,N3psi12OrbitalSpaceE,d); | ; | build_ri_space(...); | build_ri_space( (Molecule)arg1, (str)arg2, (str)arg3, (float)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:573555,Modifiability,inherit,inherited,573555,"e :; | i nirrep(N3psi12OrbitalSpaceE {lvalue}); | ; | print_out(...); | print_out( (OrbitalSpace)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi12OrbitalSpaceE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_cabs_space(...); | build_cabs_space( (OrbitalSpace)arg1, (OrbitalSpace)arg2, (float)arg3) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_cabs_space(N3psi12OrbitalSpaceE,N3psi12OrbitalSpaceE,d); | ; | build_ri_space(...); | build_ri_space( (Molecule)arg1, (str)arg2, (str)arg3, (float)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:574301,Modifiability,inherit,inherited,574301,"string; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:574812,Modifiability,inherit,inherited,574812,"n order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:575218,Modifiability,inherit,inherited,575218,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inheri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:575398,Modifiability,inherit,inherited,575398," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:576140,Modifiability,inherit,inherited,576140,"origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | -------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:576428,Modifiability,inherit,inherited,576428,"------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:576798,Modifiability,inherit,inherited,576798,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:577062,Modifiability,inherit,inherited,577062,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:577242,Modifiability,inherit,inherited,577242,"alize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ---------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:578481,Modifiability,inherit,inherited,578481,"erited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:578661,Modifiability,inherit,inherited,578661," | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_siz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:579703,Modifiability,inherit,inherited,579703,"ance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class canno",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:579883,Modifiability,inherit,inherited,579883," S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:580633,Modifiability,inherit,inherited,580633,"--------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:581144,Modifiability,inherit,inherited,581144,"order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ sign",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:581550,Modifiability,inherit,inherited,581550,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:581730,Modifiability,inherit,inherited,581730," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:582606,Modifiability,inherit,inherited,582606,"buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudoTrial(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PseudoTrial; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:582786,Modifiability,inherit,inherited,582786,"ttributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudoTrial(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PseudoTrial; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}); | ; | getI(...); | getI( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:584397,Modifiability,inherit,inherited,584397,"++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}); | ; | getI(...); | getI( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}); | ; | getQ(...); | getQ( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getQ(N3psi11PseudoTrialE {lvalue}); | ; | getR(...); | getR( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getR(N3psi11PseudoTrialE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:584577,Modifiability,inherit,inherited,584577,"l)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}); | ; | getQ(...); | getQ( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getQ(N3psi11PseudoTrialE {lvalue}); | ; | getR(...); | getR( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getR(N3psi11PseudoTrialE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:585337,Modifiability,inherit,inherited,585337,"----------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:585848,Modifiability,inherit,inherited,585848,":; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:586254,Modifiability,inherit,inherited,586254,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ---------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:586434,Modifiability,inherit,inherited,586434," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:587243,Modifiability,inherit,inherited,587243,"-------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnew",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:587472,Modifiability,inherit,inherited,587472," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:587607,Modifiability,inherit,inherited,587607," a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:590286,Modifiability,inherit,inherited,590286,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ---------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:590674,Modifiability,inherit,inherited,590674," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | --------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:591572,Modifiability,inherit,inherited,591572,"; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:591752,Modifiability,inherit,inherited,591752,"om __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:592504,Modifiability,inherit,inherited,592504,"init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:593015,Modifiability,inherit,inherited,593015,"rder:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:593421,Modifiability,inherit,inherited,593421,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inheri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:593601,Modifiability,inherit,inherited,593601," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:594343,Modifiability,inherit,inherited,594343,"e origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunctio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:594958,Modifiability,inherit,inherited,594958,"avefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:605048,Modifiability,inherit,inherited,605048,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:605228,Modifiability,inherit,inherited,605228,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4ROHFE {lvalue}); | ; | moFeff(...); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ---------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:606446,Modifiability,inherit,inherited,606446,"nherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4ROHFE {lvalue}); | ; | moFeff(...); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:607061,Modifiability,inherit,inherited,607061,"); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:617151,Modifiability,inherit,inherited,617151,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:617331,Modifiability,inherit,inherited,617331,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data desc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:618274,Modifiability,inherit,inherited,618274,"WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_func",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:618454,Modifiability,inherit,inherited,618454,"uilt-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:627072,Modifiability,inherit,inherited,627072,"g1) -> float :; | docstring; | ; | C++ signature :; | d x_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | x_functional(...); | x_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE x_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | x_omega(...); | x_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d x_omega(N3psi15SuperFunctionalE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | blank(...); | blank() -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(); | ; | build(...); | build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SymmetryOperation(Boost.Python.instance); | Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; | ; | Method resolution order:; | SymmetryOperation; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | E(...); | E( (SymmetryOperation)arg1) -> None :; | Set equal to E; | ; | C++ signature :; | void E(N3psi17Sy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:627252,Modifiability,inherit,inherited,627252,"perFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d x_omega(N3psi15SuperFunctionalE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | blank(...); | blank() -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(); | ; | build(...); | build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SymmetryOperation(Boost.Python.instance); | Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; | ; | Method resolution order:; | SymmetryOperation; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | E(...); | E( (SymmetryOperation)arg1) -> None :; | Set equal to E; | ; | C++ signature :; | void E(N3psi17SymmetryOperationE {lvalue}); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (SymmetryOperation)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi17SymmetryOperationE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | c2_x(...); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:631295,Modifiability,inherit,inherited,631295,"peration)arg1) -> float :; | Returns trace of transformation matrix; | ; | C++ signature :; | d trace(N3psi17SymmetryOperationE {lvalue}); | ; | transform(...); | transform( (SymmetryOperation)arg1, (SymmetryOperation)arg2) -> SymmetryOperation :; | Performs the transform arg2 * arg1 * arg2~; | ; | C++ signature :; | N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE); | ; | transpose(...); | transpose( (SymmetryOperation)arg1) -> None :; | Performs transposition of matrix operation; | ; | C++ signature :; | void transpose(N3psi17SymmetryOperationE {lvalue}); | ; | unit(...); | unit( (SymmetryOperation)arg1) -> None :; | Set equal to a unit matrix; | ; | C++ signature :; | void unit(N3psi17SymmetryOperationE {lvalue}); | ; | zero(...); | zero( (SymmetryOperation)arg1) -> None :; | Zero out the symmetry operation; | ; | C++ signature :; | void zero(N3psi17SymmetryOperationE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 96; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverla",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:631475,Modifiability,inherit,inherited,631475,"ignature :; | N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE); | ; | transpose(...); | transpose( (SymmetryOperation)arg1) -> None :; | Performs transposition of matrix operation; | ; | C++ signature :; | void transpose(N3psi17SymmetryOperationE {lvalue}); | ; | unit(...); | unit( (SymmetryOperation)arg1) -> None :; | Set equal to a unit matrix; | ; | C++ signature :; | void unit(N3psi17SymmetryOperationE {lvalue}); | ; | zero(...); | zero( (SymmetryOperation)arg1) -> None :; | Zero out the symmetry operation; | ; | C++ signature :; | void zero(N3psi17SymmetryOperationE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 96; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ---------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:632827,Modifiability,inherit,inherited,632827,".instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:633007,Modifiability,inherit,inherited,633007,"te_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:633777,Modifiability,inherit,inherited,633777," function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:634288,Modifiability,inherit,inherited,634288,"TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python func",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:634694,Modifiability,inherit,inherited,634694,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:634874,Modifiability,inherit,inherited,634874," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:636211,Modifiability,inherit,inherited,636211,"ted from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:636391,Modifiability,inherit,inherited,636391,"shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:637145,Modifiability,inherit,inherited,637145,"it__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:637678,Modifiability,inherit,inherited,637678,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:637872,Modifiability,inherit,inherited,637872,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:638052,Modifiability,inherit,inherited,638052," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},N5boost6python5tupleE); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __init__( (object)arg1, (Dimension)arg2) -> None :; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:642906,Modifiability,inherit,inherited,642906,"ptional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector3(Boost.Python.instance); | Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; | ; | Method resolution order:; | Vector3; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (Vector3)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __add__(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | __ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:643086,Modifiability,inherit,inherited,643086," | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector3(Boost.Python.instance); | Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; | ; | Method resolution order:; | Vector3; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (Vector3)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __add__(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | __getitem__(...); | __getitem__( (Vector3)arg1, (int)arg2) -> float :; | Returns the arg2-th element of arg1.; | ; | C++ signature :; | d __getitem__(N3psi7Vector3E {lvalue},i); | ; | __iadd__(...); | __iadd__( (object)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __iadd__(N5boost6python14back_referenceIRN3psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:646576,Modifiability,inherit,inherited,646576,"{lvalue},N3psi7Vector3E); | ; | cross(...); | cross( (Vector3)arg1, (Vector3)arg2) -> Vector3 :; | Returns cross product of arg1 and arg2; | ; | C++ signature :; | N3psi7Vector3E cross(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | distance(...); | distance( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns distance between two points represented by arg1 and arg2; | ; | C++ signature :; | d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | dot(...); | dot( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns dot product of arg1 and arg2; | ; | C++ signature :; | d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | norm(...); | norm( (Vector3)arg1) -> float :; | Returns Euclidean norm of arg1; | ; | C++ signature :; | d norm(N3psi7Vector3E {lvalue}); | ; | normalize(...); | normalize( (Vector3)arg1) -> None :; | Returns vector of unit length and arg1 direction; | ; | C++ signature :; | void normalize(N3psi7Vector3E {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:646756,Modifiability,inherit,inherited,646756,"ns distance between two points represented by arg1 and arg2; | ; | C++ signature :; | d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | dot(...); | dot( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns dot product of arg1 and arg2; | ; | C++ signature :; | d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | norm(...); | norm( (Vector3)arg1) -> float :; | Returns Euclidean norm of arg1; | ; | C++ signature :; | d norm(N3psi7Vector3E {lvalue}); | ; | normalize(...); | normalize( (Vector3)arg1) -> None :; | Returns vector of unit length and arg1 direction; | ; | C++ signature :; | void normalize(N3psi7Vector3E {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9Dimen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:647904,Modifiability,inherit,inherited,647904,">; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Wavefunction(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:648084,Modifiability,inherit,inherited,648084,"n.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Wavefunction(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wav",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:658799,Modifiability,inherit,inherited,658799,"e},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class matrix_vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | matrix_vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (matrix_vector)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __delitem__(...); | __d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:658979,Modifiability,inherit,inherited,658979,"allow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class matrix_vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | matrix_vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (matrix_vector)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __delitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __getitem__(...); | __getitem__( (object)arg1, (object)arg2) -> object :; | ; | C++ signature :; | N5boost6python3api6objectE __getitem__(N5boost6python14back_refere",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:661133,Modifiability,extend,extend,661133," | ; | C++ signature :; | void __init__(P7_object); | ; | __iter__(...); | __iter__( (object)arg1) -> object :; | ; | C++ signature :; | N5boost6python7objects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPNS_10shared_ptrIN3psi6MatrixEEESt6vectorISC_SaISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:661148,Modifiability,extend,extend,661148,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:661232,Modifiability,extend,extend,661232,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:661579,Modifiability,inherit,inherited,661579,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:661759,Modifiability,inherit,inherited,661759,".); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __delitem__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __getitem__(...); | __getitem__( (object)arg1, (object)arg2) -> object :; | ; | C++ signature :; | N5boost6python3api6objectE __getitem__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE,P7_object); | ; | __init__(...)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:663663,Modifiability,extend,extend,663663,"3api6objectE __getitem__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE,P7_object); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __iter__(...); | __iter__( (object)arg1) -> object :; | ; | C++ signature :; | N5boost6python7objects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:663678,Modifiability,extend,extend,663678,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:663766,Modifiability,extend,extend,663766,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:664077,Modifiability,inherit,inherited,664077,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:664257,Modifiability,inherit,inherited,664257,"; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> None :; docstring; ; C++ signature :; void DCOPY(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DDOT(...); DDOT( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> float :; docstring; ; C++",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:677766,Modifiability,variab,variables,677766,"E cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; C++ signature :; d ccsort(); ; cctransort(...); cctransort( (Wavefunction)arg1) -> None :; Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; ; C++ signature :; void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cctriples(...); cctriples( (Wavefunction)arg1) -> float :; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:678466,Modifiability,config,configuration,678466,":; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:681735,Modifiability,adapt,adapted,681735,"1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:682636,Modifiability,variab,variables,682636,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:682725,Modifiability,variab,variables,682725,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:682918,Modifiability,variab,variables,682918,"le.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685716,Modifiability,variab,variables,685716,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685805,Modifiability,variab,variables,685805,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:685946,Modifiability,variab,variables,685946,"word is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_global_option_changed(Ss); ; has_local_option_changed(...); has_local_option_changed( (str)arg1, (str)arg2) -> bool :; Returns boolean for whether the keyword *arg2* has been touched in the scope of the sp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:689982,Modifiability,plugin,plugin,689982,"signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> No",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:689995,Modifiability,plugin,plugin,689995,"); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:690126,Modifiability,plugin,plugin,690126,"); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:691316,Modifiability,variab,variables,691316,".); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_options() -> None :; Prints the currently set global (all modules) options to the output file.; ; C++ signature :; void print_global_options(); ; print_options(...); print_options() -> None :; Prints the currently set options (to the output file) for the current module.; ; C++ signature :; void print_options(); ; print_out(...); print_out( (str)arg1) -> None :; Prints a string (using sprintf-like notation) to the output file.; ; C++ signature :; void print_out(Ss); ; print_variables(...); print_variables() -> None :; Prints all PSI variables that have been set internally.; ; C++ signature :; void print_variables(); ; psi_top_srcdir(...); psi_top_srcdir() -> str :; Returns the location of the source code.; ; C++ signature :; Ss psi_top_srcdir(); ; psimrcc(...); psimrcc( (Wavefunction)arg1) -> float :; Runs the multireference coupled cluster code.; ; C++ signature :; d psimrcc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; reopen_outfile(...); reopen_outfile() -> None :; Reopens the output file.; ; C++ signature :; void reopen_outfile(); ; revoke_global_option_changed(...); revoke_global_option_changed( (str)arg1) -> None :; Given a string of a keyword name *arg1*, sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:693104,Modifiability,adapt,adapted,693104," the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revoke_local_option_changed(...); revoke_local_option_changed( (str)arg1, (str)arg2) -> None :; Given a string of a keyword name *arg2* and a particular module *arg1*, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_local_option_changed(Ss,Ss); ; run_gdma(...); run_gdma( (Wavefunction)arg1, (str)arg2) -> float :; Runs the GDMA code.; ; C++ signature :; d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); ; sapt(...); sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the symmetry adapted perturbation theory code.; ; C++ signature :; d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scatter(...); scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :; New Scatter function.; ; C++ signature :; void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:694567,Modifiability,variab,variable,694567,"6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Matrix :; Run scfhess, which is a specialized DF-SCF hessian program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfhess(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; set_active_molecule(...); set_active_molecule( (Molecule)arg1) -> None :; Activates a previously defined (in the input) molecule, by name.; ; C++ signature :; void set_active_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE); ; set_array_variable(...); set_array_variable( (str)arg1, (Matrix)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_array_variable(Ss,N5boost10shared_ptrIN3psi6MatrixEEE); ; set_efp_torque(...); set_efp_torque( (Matrix)arg1) -> None :; Assigns the global EFP gradient to the values stored in the Nefp by 6 Matrix argument.; ; C++ signature :; void set_efp_torque(N5boost10shared_ptrIN3psi6MatrixEEE); ; set_frequencies(...); set_frequencies( (Vector)arg1) -> None :; Assigns the global frequencies to the values stored in the 3N-6 Vector argument.; ; C++ signature :; void set_frequencies(N5boost10shared_ptrIN3psi6VectorEEE); ; set_global_option(...); set_global_option( (str)arg1, (str)arg2) -> bool :; Sets value *arg2* to string keyword *arg1* for all modules.; ; C++ signature :; b set_global_option(Ss,Ss); ; set_global_option( (str)arg1, (float)arg2) -> bool :; Sets value *arg2* to double keyword *arg1* for all modules.; ; C++ signature :; b set_global_option(Ss,d); ; set_global_option( (str)arg1, (int)arg2) -> bool :; Sets value *",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:698403,Modifiability,variab,variable,698403,"r)arg2, (list)arg3 [, (object)arg4]) -> bool :; ; C++ signature :; b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]); ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; Sets an option to a Python object, but scoped only to a single module.; ; C++ signature :; void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}); ; set_memory(...); set_memory( (int)arg1) -> None :; Sets the memory available to Psi (in bytes).; ; C++ signature :; void set_memory(m); ; set_nthread(...); set_nthread( (int)arg1) -> None :; Sets the number of threads to use in SMP parallel computations.; ; C++ signature :; void set_nthread(i); ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; ; C++ signature :; void set_parent_symmetry(Ss); ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_variable(Ss,d); ; thermo(...); thermo( (Wavefunction)arg1, (Vector)arg2) -> float :; Computes thermodynamic data.; ; C++ signature :; d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE); ; transqt2(...); transqt2( (Wavefunction)arg1) -> float :; Runs the (deprecated) transformation code.; ; C++ signature :; d transqt2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; version(...); version() -> str :; Returns the version ID of this copy of Psi.; ; C++ signature :; PKc version(). DATA; Angstrom = psi4.GeometryUnits.Angstrom; Ascending = psi4.DiagonalizeOrder.Ascending; Balk = psi4.PsiReturnType.Balk; Bohr = psi4.GeometryUnits.Bohr; Descending = psi4.DiagonalizeOrder.Descending; EndLoop = psi4.PsiReturnType.EndLoop; Failure = psi4.PsiReturnType.Failure; Success = psi4.PsiReturnType.Success. Table Of Contents. psi4: Linking C++ and Python; psi4; AOShellCombinationsIterator; AngularMoment",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:19846,Performance,optimiz,optimized,19846,"on dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d). psi4.dmrg()¶; Python Library Documentation: built-in function dmrg in module psi4; dmrg(...). dmrg( (Wavefunction)arg1) -> Wavefunction :. Runs the DMRG code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.efp_init()¶; Python Library Documentation: built-in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:34753,Performance,optimiz,optimized,34753,"ction()¶; Python Library Documentation: built-in function new_wavefunction in module psi4; new_wavefunction(...). new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :. Builds a new wavefunction from scratch.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss). psi4.nthread()¶; Python Library Documentation: built-in function nthread in module psi4; nthread(...). nthread() -> int :. Returns the number of threads to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plug",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35029,Performance,optimiz,optimizer,35029,"w_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss). psi4.nthread()¶; Python Library Documentation: built-in function nthread in module psi4; nthread(...). nthread() -> int :. Returns the number of threads to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:35233,Performance,optimiz,optimization,35233,"s to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:208810,Performance,load,load,208810,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:208856,Performance,load,load,208856,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:208862,Performance,load,load,208862,"method gemm; gemm(...) unbound psi4.Matrix method. gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:208900,Performance,load,load,208900,", (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:208975,Performance,load,load,208975,"-> None :. docstring; C++ signature :. void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d). psi4.Matrix.get()¶; Python Library Documentation: method get; get(...) unbound psi4.Matrix method. get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :. docstring; C++ signature :. d get(N3psi6MatrixE {lvalue},i,i [,i]). psi4.Matrix.identity()¶; Python Library Documentation: method identity; identity(...) unbound psi4.Matrix method. identity( (Matrix)arg1) -> None :. docstring; C++ signature :. void identity(N3psi6MatrixE {lvalue}). psi4.Matrix.invert()¶; Python Library Documentation: method invert; invert(...) unbound psi4.Matrix method. invert( (Matrix)arg1) -> None :. docstring; C++ signature :. void invert(N3psi6MatrixE {lvalue}). psi4.Matrix.load()¶; Python Library Documentation: method load; load(...) unbound psi4.Matrix method. load( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.load_mpqc()¶; Python Library Documentation: method load_mpqc; load_mpqc(...) unbound psi4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:517622,Performance,load,load,517622,"xEEE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE {lvalue},N3psi17diagonalize_orderE); | ; | doublet(...); | doublet( (Matrix)arg1, (Matrix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:517635,Performance,load,load,517635,"trix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:517720,Performance,load,load,517720,"trix)arg2, (bool)arg3, (bool)arg4) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE doublet(N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,b,b); | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | C++ signature :; | void gemm(N3psi6MatrixE {lvalue},b,b,d,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,d); | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:678900,Performance,optimiz,optimized,678900,"lose_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Perfo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:689479,Performance,optimiz,optimized,689479,"eE mrcc_generate_input(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; mrcc_load_densities(...); mrcc_load_densities( (Wavefunction)arg1, (dict)arg2) -> PsiReturnType :; Reads in the density matrices from Kallay's MRCC code.; ; C++ signature :; N3psi13PsiReturnTypeE mrcc_load_densities(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:689666,Performance,optimiz,optimizer,689666,"density matrices from Kallay's MRCC code.; ; C++ signature :; N3psi13PsiReturnTypeE mrcc_load_densities(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:689785,Performance,optimiz,optimization,689785,"3psi12WavefunctionEEE,N5boost6python4dictE); ; new_wavefunction(...); new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :; Builds a new wavefunction from scratch.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss); ; nthread(...); nthread() -> int :; Returns the number of threads to use in SMP parallel computations.; ; C++ signature :; i nthread(); ; nuclear_dipole(...); nuclear_dipole( (Molecule)arg1) -> Vector :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE); ; occ(...); occ( (Wavefunction)arg1) -> Wavefunction :; Runs the orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; opt_clean(...); opt_clean() -> None :; Cleans up the optimizer's scratch files.; ; C++ signature :; void opt_clean(); ; optking(...); optking() -> int :; Runs the geometry optimization / frequency analysis code.; ; C++ signature :; i optking(); ; outfile_name(...); outfile_name() -> str :; Returns the name of the output file.; ; C++ signature :; Ss outfile_name(); ; plugin(...); plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :; docstring; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; plugin_close(...); plugin_close( (str)arg1) -> None :; docstring; ; C++ signature :; void plugin_close(Ss); ; plugin_close_all(...); plugin_close_all() -> None :; docstring; ; C++ signature :; void plugin_close_all(); ; plugin_load(...); plugin_load( (str)arg1) -> int :; docstring; ; C++ signature :; i plugin_load(Ss); ; prepare_options_for_module(...); prepare_options_for_module( (str)arg1) -> None :; Sets the options module up to return options pertaining to the named argument (e.g. SCF).; ; C++ signature :; void prepare_options_for_module(Ss); ; print_global_options(...); print_global_option",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:107632,Security,hash,hash,107632,"i4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:111120,Security,hash,hash,111120,"i4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:153297,Security,hash,hash,153297,"m. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:156744,Security,hash,hash,156744,"m. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:276773,Security,hash,hash,276773,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:280300,Security,hash,hash,280300,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:283827,Security,hash,hash,283827,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:287354,Security,hash,hash,287354,"s = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__() <==> oct(x). __or__(...). x.__or__(y) <==> x|y. __pos__(...). x.__pos__() <==> +x. __pow__(...). x.__pow__(y[, z]) <==> pow(x, y[, z]). __radd__(...). x.__radd__(y) <==> y+x. __rand__(...). x.__rand__(y) <==> y&x. __rdiv__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:427153,Security,hash,hash,427153,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:475050,Security,hash,hash,475050,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:588263,Security,hash,hash,588263,"hon.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshift__(y) <==> x<<y; | ; | __mod__(...); | x.__mod__(y) <==> x%y; | ; | __mul__(...); | x.__mul__(y) <==> x*y; | ; | __neg__(...); | x.__neg__() <==> -x; | ; | __nonzero__(...); | x.__nonzero__() <==> x != 0; | ; | __oct__(...); | x.__oct__() <==> oct(x); | ; | __or__(...); | x.__or__(y) <==> x|y; | ; | __pos__(...); | x.__pos__() <==> +x; | ; | __pow__(...); | x.__pow__(y[, z]) <==> pow(x, y[, z]); | ; | __radd__(...); | x.__radd__(y) <==> y+x; | ; | __rand__(...); | x.__rand__(y) <==> y&x; | ; | __rdiv__(...); | x.__rdiv__(y) <==> y/x; | ; | __rdivmod__(...); | x.__rdivmod__(y) <==> divmod(y, x); | ; | __rfloordiv__(...); | x.__rfloordiv__(y) <==> y//x; | ; | __rlshift__(...); | x.__rlshift__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:115344,Usability,clear,clear,115344," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:115358,Usability,clear,clear,115358," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:118744,Usability,clear,clear,118744," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:118758,Usability,clear,clear,118758," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:135469,Usability,clear,clear,135469,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:135516,Usability,clear,clear,135516,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:135523,Usability,clear,clear,135523,"on: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.ErfERI method. set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:135573,Usability,clear,clear,135573,"e_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential method. setName( (ExternalPotential)arg1, (str)arg2) -> None :. docstring; C++ signature :. v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:135649,Usability,clear,clear,135649,"ature :. void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b). ExternalPotential¶. psi4.ExternalPotential.addBasis()¶; Python Library Documentation: method addBasis; addBasis(...) unbound psi4.ExternalPotential method. addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :. docstring; C++ signature :. void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.ExternalPotential.addCharge()¶; Python Library Documentation: method addCharge; addCharge(...) unbound psi4.ExternalPotential method. addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :. docstring; C++ signature :. void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d). psi4.ExternalPotential.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.ExternalPotential method. clear( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void clear(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.computePotentialMatrix()¶; Python Library Documentation: method computePotentialMatrix; computePotentialMatrix(...) unbound psi4.ExternalPotential method. computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE). psi4.ExternalPotential.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.ExternalPotential method. print_out( (ExternalPotential)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi17ExternalPotentialE {lvalue}). psi4.ExternalPotential.setName()¶; Python Library Documentation: method setName; setName(...) unbound psi4.ExternalPotential method. setName( (ExternalPotential)arg1, (str)arg2) -> None :. docstring; C++ signature :. void setName(N3psi17ExternalPotentialE {lvalue},Ss). F12¶. psi4.F12.comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:160950,Usability,clear,clear,160950," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:160964,Usability,clear,clear,160964," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:164341,Usability,clear,clear,164341," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:164355,Usability,clear,clear,164355," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:215067,Usability,simpl,simply,215067,"¶; Python Library Documentation: method sum_of_squares; sum_of_squares(...) unbound psi4.Matrix method. sum_of_squares( (Matrix)arg1) -> float :. docstring; C++ signature :. d sum_of_squares(N3psi6MatrixE {lvalue}). psi4.Matrix.symmetrize_gradient()¶; Python Library Documentation: method symmetrize_gradient; symmetrize_gradient(...) unbound psi4.Matrix method. symmetrize_gradient( (Matrix)arg1, (Molecule)arg2) -> None :. docstring; C++ signature :. void symmetrize_gradient(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.Matrix.symmetry()¶; Python Library Documentation: method symmetry; symmetry(...) unbound psi4.Matrix method. symmetry( (Matrix)arg1) -> int :. docstring; C++ signature :. i symmetry(N3psi6MatrixE {lvalue}). psi4.Matrix.to_array()¶; Python Library Documentation: method to_array in module p4util.numpy_helper; to_array(matrix, copy=True, dense=False) unbound psi4.Matrix method. Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. psi4.Matrix.trace()¶; Python Library Documentation: method trace; trace(...) unbound psi4.Matrix method. trace( (Matrix)arg1) -> float :. docstring; C++ signature :. d trace(N3psi6MatrixE {lvalue}). psi4.Matrix.transform()¶; Python Library Documentation: method transform; transform(...) unbound psi4.Matrix method. transform( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). transform( (Matrix)arg1, (Matrix)arg2 [, (Matrix)arg3]) -> None :. docstring; C++ signature :. void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE [,N5boost10shared_ptrIN3psi6MatrixEEE]). psi4.Matrix.vector_dot()¶; Python Library Documentation: method vector_dot; vector_dot(...) unbound psi4.Matrix method. vector_dot( (Matrix)arg1, (Matrix)arg2) -> float :. docstring; C++ signature :. d vector_dot(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.zero()¶",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:261175,Usability,clear,clear,261175,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:261222,Usability,clear,clear,261222,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:261229,Usability,clear,clear,261229,"compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :. docstring; C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; se",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:261268,Usability,clear,clear,261268," C++ signature :. void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; set_Da_so(...) unbound psi4.OEProp method. set_Da_so( (OEProp)arg1, (Matrix)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:261333,Usability,clear,clear,261333,"lue},i,i). psi4.NablaInt.origin()¶; Python Library Documentation: property. The origin about which the one body ints are being computed. psi4.NablaInt.py_buffer()¶; Python Library Documentation: property. docstring. psi4.NablaInt.py_buffer_object()¶; Python Library Documentation: property. docstring. psi4.NablaInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.NablaInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). OEProp¶. psi4.OEProp.add()¶; Python Library Documentation: method add; add(...) unbound psi4.OEProp method. add( (OEProp)arg1, (str)arg2) -> None :. docstring; C++ signature :. void add(N3psi6OEPropE {lvalue},Ss). psi4.OEProp.clear()¶; Python Library Documentation: method clear; clear(...) unbound psi4.OEProp method. clear( (OEProp)arg1) -> None :. docstring; C++ signature :. void clear(N3psi6OEPropE {lvalue}). psi4.OEProp.compute()¶; Python Library Documentation: method compute; compute(...) unbound psi4.OEProp method. compute( (OEProp)arg1) -> None :. docstring; C++ signature :. void compute(N3psi6OEPropE {lvalue}). psi4.OEProp.set_Da_ao()¶; Python Library Documentation: method set_Da_ao; set_Da_ao(...) unbound psi4.OEProp method. set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :. docstring; C++ signature :. void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i). psi4.OEProp.set_Da_mo()¶; Python Library Documentation: method set_Da_mo; set_Da_mo(...) unbound psi4.OEProp method. set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.OEProp.set_Da_so()¶; Python Library Documentation: method set_Da_so; set_Da_so(...) unbound psi4.OEProp method. set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void set_Da_so(N3psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:291560,Usability,clear,clear,291560," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:291574,Usability,clear,clear,291574," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:294951,Usability,clear,clear,294951," k, v in iterable:. d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:294965,Usability,clear,clear,294965," d[k] = v. dict(**kwargs) -> new dictionary initialized with the name=value pairs. in the keyword argument list. For example: dict(one=1, two=2). Methods defined here:. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __contains__(...). D.__contains__(k) -> True if D has a key k, else False. __delitem__(...). x.__delitem__(y) <==> del x[y]. __eq__(...). x.__eq__(y) <==> x==y. __ge__(...). x.__ge__(y) <==> x>=y. __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getitem__(...). x.__getitem__(y) <==> x[y]. __gt__(...). x.__gt__(y) <==> x>y. __init__(...). x.__init__(...) initializes x; see help(type(x)) for signature. __iter__(...). x.__iter__() <==> iter(x). __le__(...). x.__le__(y) <==> x<=y. __len__(...). x.__len__() <==> len(x). __lt__(...). x.__lt__(y) <==> x<y. __ne__(...). x.__ne__(y) <==> x!=y. __repr__(...). x.__repr__() <==> repr(x). __setitem__(...). x.__setitem__(i, y) <==> x[i]=y. __sizeof__(...). D.__sizeof__() -> size of D in memory, in bytes. clear(...). D.clear() -> None. Remove all items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:352704,Usability,simpl,simply,352704,"si4.Vector method. print_out( (Vector)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6VectorE {lvalue}). psi4.Vector.scale()¶; Python Library Documentation: method scale; scale(...) unbound psi4.Vector method. scale( (Vector)arg1, (float)arg2) -> None :. docstring; C++ signature :. void scale(N3psi6VectorE {lvalue},d). psi4.Vector.set()¶; Python Library Documentation: method set; set(...) unbound psi4.Vector method. set( (Vector)arg1, (int)arg2, (float)arg3) -> None :. docstring; C++ signature :. void set(N3psi6VectorE {lvalue},i,d). set( (Vector)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :. docstring; C++ signature :. void set(N3psi6VectorE {lvalue},i,i,d). psi4.Vector.shape()¶; Python Library Documentation: property. psi4.Vector.to_array()¶; Python Library Documentation: method to_array in module p4util.numpy_helper; to_array(matrix, copy=True, dense=False) unbound psi4.Vector method. Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Vector3¶. psi4.Vector3.cross()¶; Python Library Documentation: method cross; cross(...) unbound psi4.Vector3 method. cross( (Vector3)arg1, (Vector3)arg2) -> Vector3 :. Returns cross product of arg1 and arg2; C++ signature :. N3psi7Vector3E cross(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.distance()¶; Python Library Documentation: method distance; distance(...) unbound psi4.Vector3 method. distance( (Vector3)arg1, (Vector3)arg2) -> float :. Returns distance between two points represented by arg1 and arg2; C++ signature :. d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.dot()¶; Python Library Documentation: method dot; dot(...) unbound psi4.Vector3 method. dot( (Vector3)arg1, (Vector3)arg2) -> float :. Returns dot product of arg1 and arg2; C++ signature :. d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E). psi4.Vector3.norm()¶; Python Library Documentation: method norm; norm(...) unbound psi4.Vector3 method. norm( (Vector3)arg1) -> float",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:452254,Usability,clear,clear,452254,"------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:452268,Usability,clear,clear,452268,".__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:452354,Usability,clear,clear,452354,".__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ---",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:521780,Usability,simpl,simply,521780,"xE {lvalue},N5boost6python4listE); | ; | set_name(...); | set_name( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi6MatrixE {lvalue},Ss); | ; | subtract(...); | subtract( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void subtract(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | sum_of_squares(...); | sum_of_squares( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d sum_of_squares(N3psi6MatrixE {lvalue}); | ; | symmetrize_gradient(...); | symmetrize_gradient( (Matrix)arg1, (Molecule)arg2) -> None :; | docstring; | ; | C++ signature :; | void symmetrize_gradient(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi8MoleculeEEE); | ; | symmetry(...); | symmetry( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i symmetry(N3psi6MatrixE {lvalue}); | ; | to_array(matrix, copy=True, dense=False); | Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; | consturcts a view.; | ; | trace(...); | trace( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d trace(N3psi6MatrixE {lvalue}); | ; | transform(...); | transform( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | transform( (Matrix)arg1, (Matrix)arg2 [, (Matrix)arg3]) -> None :; | docstring; | ; | C++ signature :; | void transform(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE [,N5boost10shared_ptrIN3psi6MatrixEEE]); | ; | vector_dot(...); | vector_dot( (Matrix)arg1, (Matrix)arg2) -> float :; | docstring; | ; | C++ signature :; | d vector_dot(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | zero(...); | zero( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi6MatrixE {lvalue}); | ; | zero_diagonal(...); | zero_diagonal( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero_diago",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:566479,Usability,clear,clear,566479," | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ sig",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:566493,Usability,clear,clear,566493,"------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:566568,Usability,clear,clear,566568,"------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute(N3psi6OEPropE {lvalue}); | ; | set_Da_ao(...); | set_Da_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Da_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Da_mo(...); | set_Da_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html:641120,Usability,simpl,simply,641120,"e :; | d get(N3psi6VectorE {lvalue},i); | ; | get( (Vector)arg1, (int)arg2, (int)arg3) -> float :; | docstring; | ; | C++ signature :; | d get(N3psi6VectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (Vector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6VectorE {lvalue}); | ; | print_out(...); | print_out( (Vector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6VectorE {lvalue}); | ; | scale(...); | scale( (Vector)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void scale(N3psi6VectorE {lvalue},d); | ; | set(...); | set( (Vector)arg1, (int)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi6VectorE {lvalue},i,d); | ; | set( (Vector)arg1, (int)arg2, (int)arg3, (float)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi6VectorE {lvalue},i,i,d); | ; | to_array(matrix, copy=True, dense=False); | Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; | consturcts a view.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_array = array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None) from Boost.Python.class; | Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list).; | ; | Parameters; | ----------; | arr : array or list of arrays; | Numpy array or list of arrays to use as the data for a new psi4.Matrix; | name : str; | Name to give the new psi4.Matrix; | dim1 : list, tuple, or psi4.Dimension (optional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | ----",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html:820,Deployability,update,updated,820,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html:217,Modifiability,variab,variable,217,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html:242,Modifiability,variab,variable,242,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html:820,Deployability,update,updated,820,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html:217,Modifiability,variab,variable,217,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html:242,Modifiability,variab,variable,242,"﻿. PSI Variables by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Previous topic; PSI Variables by Alpha; Next topic; ADC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4625,Deployability,update,updated,4625,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:5363,Deployability,update,updated,5363,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:762,Energy Efficiency,energy,energy,762,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1004,Energy Efficiency,energy,energy,1004,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1316,Energy Efficiency,energy,energy,1316,"ings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1850,Energy Efficiency,energy,energy,1850,"si-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:2469,Energy Efficiency,energy,energy,2469,"iety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; sing",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:2837,Energy Efficiency,energy,energy,2837,"si-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4430,Energy Efficiency,energy,energy,4430,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4654,Energy Efficiency,energy,energy,4654,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4920,Energy Efficiency,energy,energy,4920,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4606,Modifiability,variab,variables,4606,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:879,Performance,optimiz,optimization,879,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1180,Performance,optimiz,optimization,1180,"le; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1432,Performance,optimiz,optimization,1432,"n, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:1999,Performance,optimiz,optimization,1999,"energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSD",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:2932,Performance,optimiz,optimization,2932,"-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:3669,Performance,optimiz,optimization,3669,"ation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:3719,Performance,optimiz,optimization,3719,"fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4045,Performance,optimiz,optimization,4045,"le-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Prev",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:4706,Performance,perform,performed,4706,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:287,Testability,test,testing,287,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:2283,Testability,test,testing,2283," cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:3398,Testability,test,tests,3398,"set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:3986,Testability,test,testing,3986," CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4625,Deployability,update,updated,4625,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:5363,Deployability,update,updated,5363,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:762,Energy Efficiency,energy,energy,762,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1004,Energy Efficiency,energy,energy,1004,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1316,Energy Efficiency,energy,energy,1316,"ings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1850,Energy Efficiency,energy,energy,1850,"si-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:2469,Energy Efficiency,energy,energy,2469,"iety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; sing",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:2837,Energy Efficiency,energy,energy,2837,"si-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4430,Energy Efficiency,energy,energy,4430,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4654,Energy Efficiency,energy,energy,4654,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4920,Energy Efficiency,energy,energy,4920,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4606,Modifiability,variab,variables,4606,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:879,Performance,optimiz,optimization,879,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1180,Performance,optimiz,optimization,1180,"le; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1432,Performance,optimiz,optimization,1432,"n, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:1999,Performance,optimiz,optimization,1999,"energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSD",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:2932,Performance,optimiz,optimization,2932,"-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:3669,Performance,optimiz,optimization,3669,"ation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:3719,Performance,optimiz,optimization,3719,"fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4045,Performance,optimiz,optimization,4045,"le-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Prev",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:4706,Performance,perform,performed,4706,"our/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. Previous topic; MRCC; Next topic; LIBEFP. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:287,Testability,test,testing,287,"﻿. CFOUR — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; op",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:2283,Testability,test,testing,2283," cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:3398,Testability,test,tests,3398,"set spherical/Cartesian with basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html:3986,Testability,test,testing,3986," CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:5700,Availability,checkpoint,checkpoint,5700," Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; M",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2339,Deployability,update,update,2339,"quence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11373,Deployability,update,update,11373,"sing RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17043,Deployability,update,update,17043,"tion via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22166,Deployability,update,updated,22166,"provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22435,Deployability,update,update,22435,"tesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step updat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:23446,Deployability,update,update,23446,"mulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30153,Deployability,install,install,30153,"on, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a tes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30536,Deployability,update,updated,30536,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32054,Deployability,update,update,32054,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32831,Deployability,update,updated,32831,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:418,Energy Efficiency,energy,energy,418,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:924,Energy Efficiency,energy,energy,924,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1079,Energy Efficiency,energy,energy,1079," next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1168,Energy Efficiency,energy,energy,1168,"e Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1267,Energy Efficiency,energy,energy,1267,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1839,Energy Efficiency,energy,energy,1839,"outing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1999,Energy Efficiency,energy,energy,1999,"y Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2476,Energy Efficiency,energy,energy,2476,"d types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RH",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2887,Energy Efficiency,energy,energy,2887,"pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the bui",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3015,Energy Efficiency,energy,energy,3015,"nce computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH mol",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3562,Energy Efficiency,energy,energy,3562,"egrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functiona",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3737,Energy Efficiency,energy,energy,3737,"and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3992,Energy Efficiency,energy,energy,3992,"CSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4149,Energy Efficiency,energy,energy,4149,"culation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This check",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4993,Energy Efficiency,energy,energy,4993,"ergy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the trip",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:5150,Energy Efficiency,energy,energy,5150,"C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:5624,Energy Efficiency,energy,energy,5624," testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6268,Energy Efficiency,energy,energy,6268," specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv cri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6593,Energy Efficiency,energy,energy,6593," are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6851,Energy Efficiency,energy,energy,6851,"-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7824,Energy Efficiency,energy,energy,7824," opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7947,Energy Efficiency,energy,energy,7947,"fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8013,Energy Efficiency,energy,energy,8013,"Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8153,Energy Efficiency,energy,energy,8153,"metry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8275,Energy Efficiency,energy,energy,8275,"check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8410,Energy Efficiency,energy,energy,8410,"optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8622,Energy Efficiency,energy,energy,8622,"he constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:9308,Energy Efficiency,energy,energy,9308,"is for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:9445,Energy Efficiency,energy,energy,9445,"nrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:9497,Energy Efficiency,energy,energy,9497,"-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:9624,Energy Efficiency,energy,energy,9624,"rgy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:10278,Energy Efficiency,energy,energy,10278,"H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:10739,Energy Efficiency,energy,energy,10739,"O-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11059,Energy Efficiency,energy,energy,11059,"esn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11218,Energy Efficiency,energy,energy,11218,"t global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for dif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11510,Energy Efficiency,energy,energy,11510,"g that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11880,Energy Efficiency,energy,energy,11880,"es. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12019,Energy Efficiency,energy,energy,12019,"bility of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12250,Energy Efficiency,energy,energy,12250," and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surfa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12275,Energy Efficiency,energy,energy,12275," the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12351,Energy Efficiency,energy,energy,12351,"ep and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined usin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12536,Energy Efficiency,energy,energy,12536," ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12613,Energy Efficiency,energy,energy,12613,"ntegrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:12728,Energy Efficiency,energy,energy,12728,"tional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13233,Energy Efficiency,energy,energy,13233,")/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ pro",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13557,Energy Efficiency,energy,energy,13557,"he NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keywor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13765,Energy Efficiency,energy,energy,13765,"his is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14360,Energy Efficiency,energy,energy,14360,"ing a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14709,Energy Efficiency,energy,energy,14709,"tion for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15214,Energy Efficiency,energy,energy,15214,"MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15285,Energy Efficiency,energy,energy,15285,"arizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15537,Energy Efficiency,energy,energy,15537,"ce, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15847,Energy Efficiency,energy,energy,15847,"tions. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16127,Energy Efficiency,energy,energy,16127," cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17276,Energy Efficiency,energy,energy,17276,"etry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17361,Energy Efficiency,energy,energy,17361,"ed only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17514,Energy Efficiency,energy,energy,17514,"C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspac",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17668,Energy Efficiency,energy,energy,17668,"y. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17875,Energy Efficiency,energy,energy,17875,"adients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; R",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:18884,Energy Efficiency,energy,energy,18884,"Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19289,Energy Efficiency,energy,energy,19289,"ls into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19455,Energy Efficiency,energy,energy,19455,"ples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19634,Energy Efficiency,energy,energy,19634,"lowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19751,Energy Efficiency,energy,energy,19751,"tion (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driv",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19957,Energy Efficiency,energy,energy,19957,"eraged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLA",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:20365,Energy Efficiency,energy,energy,20365,")/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:20598,Energy Efficiency,energy,energy,20598,"TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:20852,Energy Efficiency,energy,energy-large,20852,"F-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:21297,Energy Efficiency,energy,energy,21297," cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:21319,Energy Efficiency,energy,energy,21319,"c-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:21776,Energy Efficiency,energy,energy,21776,"set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22199,Energy Efficiency,charge,charge,22199,"provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22810,Energy Efficiency,energy,energy,22810,"al, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:23170,Energy Efficiency,energy,energy,23170,"meters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coeff",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:23890,Energy Efficiency,energy,energy,23890,"lculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24209,Energy Efficiency,energy,energy,24209,"symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a hi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24461,Energy Efficiency,energy,energy,24461,"bitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25040,Energy Efficiency,energy,energy,25040,"ics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-dif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25620,Energy Efficiency,energy,energy,25620,"ms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25656,Energy Efficiency,energy,energy,25656,"ms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25926,Energy Efficiency,energy,energy,25926,"ally compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule cl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26736,Energy Efficiency,energy,energy,26736,"evel of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Doub",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27629,Energy Efficiency,energy,energy,27629,"et. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27939,Energy Efficiency,charge,charge,27939,"lecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27955,Energy Efficiency,energy,energy,27955,"lecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29053,Energy Efficiency,energy,energy,29053," with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and double",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29648,Energy Efficiency,energy,energy,29648,"wrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29783,Energy Efficiency,energy,energy,29783,"D Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psiva",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29893,Energy Efficiency,energy,energy,29893,"t quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30341,Energy Efficiency,energy,energy,30341,"G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30565,Energy Efficiency,energy,energy,30565,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30711,Energy Efficiency,energy,energy,30711,"aged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total I",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:31911,Energy Efficiency,energy,energy,31911,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32009,Energy Efficiency,energy,energy,32009,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:823,Integrability,interface,interface,823,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:847,Integrability,rout,routing,847,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1232,Integrability,wrap,wrappers,1232,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3967,Integrability,wrap,wrapper,3967,"CSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:10067,Integrability,depend,depend,10067,"ly 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:10170,Integrability,depend,depend,10170,"y in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14114,Integrability,interface,interface,14114,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14131,Integrability,interface,interface,14131,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28288,Integrability,depend,depend,28288,"ate of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28391,Integrability,depend,depend,28391,"nsition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:5293,Modifiability,variab,variables,5293,"(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30121,Modifiability,plugin,plugins,30121,"on, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a tes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30517,Modifiability,variab,variables,30517,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30872,Modifiability,variab,variables,30872,"; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30955,Modifiability,variab,variables,30955,"nt for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1257,Performance,optimiz,optimize,1257,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1504,Performance,optimiz,optimization,1504,"radients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1919,Performance,optimiz,optimizations,1919,"ore energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2098,Performance,optimiz,optimized,2098,"y Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2305,Performance,perform,performs,2305,"quence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3078,Performance,optimiz,optimization,3078,"metry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3197,Performance,perform,performs,3197,"al using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3215,Performance,optimiz,optimization,3215,"al using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3667,Performance,optimiz,optimization,3667,"pt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4203,Performance,optimiz,optimization,4203,"ometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4509,Performance,optimiz,optimization,4509," = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6118,Performance,optimiz,optimization,6118,"s that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geome",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7395,Performance,optimiz,optimization,7395,"oordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:9388,Performance,optimiz,optimizations,9388,"pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11333,Performance,perform,performs,11333,"sing RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11981,Performance,optimiz,optimizations,11981,"es. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13166,Performance,optimiz,optimization,13166,"temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gib",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13703,Performance,optimiz,optimization,13703,"formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer intera",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15582,Performance,optimiz,optimization,15582,"2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater dete",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15660,Performance,optimiz,optimized,15660,"2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater dete",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:15980,Performance,optimiz,optimization,15980,"es) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16051,Performance,optimiz,optimization,16051,"cal with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16483,Performance,perform,performed,16483,"uclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17019,Performance,perform,performs,17019,"tion via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17184,Performance,optimiz,optimization,17184,"sian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:19090,Performance,optimiz,optimization,19090,"isting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:21134,Performance,perform,performed,21134,"_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22411,Performance,perform,performs,22411,"tesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step updat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:22604,Performance,optimiz,optimization,22604,"sd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:23426,Performance,perform,performs,23426,"mulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24404,Performance,optimiz,optimization,24404," for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24525,Performance,perform,performing,24525,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25438,Performance,perform,performed,25438,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26493,Performance,perform,performed,26493," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26691,Performance,optimiz,optimization,26691,"-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; F",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27342,Performance,optimiz,optimizations,27342,"H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27698,Performance,optimiz,optimization,27698,"ization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28718,Performance,optimiz,optimization,28718,"de. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29128,Performance,perform,performed,29128,"sian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29401,Performance,optimiz,optimized,29401,"n’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30617,Performance,perform,performed,30617,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:31267,Performance,perform,performed,31267,"ntation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32030,Performance,perform,performs,32030,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:2617,Safety,avoid,avoided,2617," on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:11647,Safety,avoid,avoided,11647,"-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:32199,Safety,avoid,avoided,32199,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26506,Security,validat,validate,26506," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:437,Testability,test,tests,437,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:807,Testability,test,test,807,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:986,Testability,test,tests,986,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3390,Testability,test,test,3390,"al integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3424,Testability,test,test,3424,"al integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4630,Testability,test,testing,4630,"liary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6070,Testability,test,tested,6070,"h2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7056,Testability,test,test,7056,"orithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7442,Testability,test,test,7442,"ue to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrest",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7899,Testability,test,test,7899,"F. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet or",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8769,Testability,test,tests,8769,"lecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G opti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13290,Testability,test,test,13290,"gies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polari",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14141,Testability,test,testing,14141,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:14484,Testability,test,testing,14484,"s sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16338,Testability,test,test,16338,"cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a mi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16469,Testability,test,test,16469,"uclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17250,Testability,test,testing,17250,"c densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:23043,Testability,test,tested,23043,"sociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24519,Testability,test,test,24519,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24645,Testability,test,tests,24645,"lementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24870,Testability,test,tests,24870,"e interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al.,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25293,Testability,test,test,25293,"or the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradient",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25424,Testability,test,test,25424,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26114,Testability,test,tests,26114,"ical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF single",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26469,Testability,test,test,26469," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27453,Testability,test,test,27453,"dient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28995,Testability,test,test,28995,"SD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29531,Testability,test,test,29531,"ansition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29599,Testability,test,test,29599,"ansition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30858,Testability,test,test,30858,"; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:30923,Testability,test,testing,30923,"nt for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:31122,Testability,test,test,31122," Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:31253,Testability,test,test,31253,"ntation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:5700,Availability,checkpoint,checkpoint,5700," Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; M",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2339,Deployability,update,update,2339,"quence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11373,Deployability,update,update,11373,"sing RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17043,Deployability,update,update,17043,"tion via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22166,Deployability,update,updated,22166,"provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22435,Deployability,update,update,22435,"tesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step updat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:23446,Deployability,update,update,23446,"mulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30153,Deployability,install,install,30153,"on, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a tes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30536,Deployability,update,updated,30536,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:32054,Deployability,update,update,32054,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:32831,Deployability,update,updated,32831,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:418,Energy Efficiency,energy,energy,418,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:924,Energy Efficiency,energy,energy,924,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1079,Energy Efficiency,energy,energy,1079," next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1168,Energy Efficiency,energy,energy,1168,"e Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1267,Energy Efficiency,energy,energy,1267,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1839,Energy Efficiency,energy,energy,1839,"outing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1999,Energy Efficiency,energy,energy,1999,"y Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2476,Energy Efficiency,energy,energy,2476,"d types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RH",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2887,Energy Efficiency,energy,energy,2887,"pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the bui",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3015,Energy Efficiency,energy,energy,3015,"nce computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH mol",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3562,Energy Efficiency,energy,energy,3562,"egrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functiona",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3737,Energy Efficiency,energy,energy,3737,"and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3992,Energy Efficiency,energy,energy,3992,"CSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:4149,Energy Efficiency,energy,energy,4149,"culation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This check",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:4993,Energy Efficiency,energy,energy,4993,"ergy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the trip",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:5150,Energy Efficiency,energy,energy,5150,"C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:5624,Energy Efficiency,energy,energy,5624," testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:6268,Energy Efficiency,energy,energy,6268," specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv cri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:6593,Energy Efficiency,energy,energy,6593," are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:6851,Energy Efficiency,energy,energy,6851,"-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7824,Energy Efficiency,energy,energy,7824," opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7947,Energy Efficiency,energy,energy,7947,"fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8013,Energy Efficiency,energy,energy,8013,"Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8153,Energy Efficiency,energy,energy,8153,"metry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8275,Energy Efficiency,energy,energy,8275,"check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8410,Energy Efficiency,energy,energy,8410,"optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8622,Energy Efficiency,energy,energy,8622,"he constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:9308,Energy Efficiency,energy,energy,9308,"is for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:9445,Energy Efficiency,energy,energy,9445,"nrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:9497,Energy Efficiency,energy,energy,9497,"-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:9624,Energy Efficiency,energy,energy,9624,"rgy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:10278,Energy Efficiency,energy,energy,10278,"H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:10739,Energy Efficiency,energy,energy,10739,"O-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11059,Energy Efficiency,energy,energy,11059,"esn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11218,Energy Efficiency,energy,energy,11218,"t global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for dif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11510,Energy Efficiency,energy,energy,11510,"g that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11880,Energy Efficiency,energy,energy,11880,"es. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12019,Energy Efficiency,energy,energy,12019,"bility of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12250,Energy Efficiency,energy,energy,12250," and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surfa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12275,Energy Efficiency,energy,energy,12275," the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12351,Energy Efficiency,energy,energy,12351,"ep and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined usin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12536,Energy Efficiency,energy,energy,12536," ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12613,Energy Efficiency,energy,energy,12613,"ntegrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:12728,Energy Efficiency,energy,energy,12728,"tional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13233,Energy Efficiency,energy,energy,13233,")/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ pro",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13557,Energy Efficiency,energy,energy,13557,"he NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keywor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13765,Energy Efficiency,energy,energy,13765,"his is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14360,Energy Efficiency,energy,energy,14360,"ing a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14709,Energy Efficiency,energy,energy,14709,"tion for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15214,Energy Efficiency,energy,energy,15214,"MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15285,Energy Efficiency,energy,energy,15285,"arizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15537,Energy Efficiency,energy,energy,15537,"ce, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15847,Energy Efficiency,energy,energy,15847,"tions. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:16127,Energy Efficiency,energy,energy,16127," cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17276,Energy Efficiency,energy,energy,17276,"etry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17361,Energy Efficiency,energy,energy,17361,"ed only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17514,Energy Efficiency,energy,energy,17514,"C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspac",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17668,Energy Efficiency,energy,energy,17668,"y. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17875,Energy Efficiency,energy,energy,17875,"adients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; R",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:18884,Energy Efficiency,energy,energy,18884,"Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19289,Energy Efficiency,energy,energy,19289,"ls into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19455,Energy Efficiency,energy,energy,19455,"ples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19634,Energy Efficiency,energy,energy,19634,"lowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19751,Energy Efficiency,energy,energy,19751,"tion (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driv",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19957,Energy Efficiency,energy,energy,19957,"eraged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLA",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:20365,Energy Efficiency,energy,energy,20365,")/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:20598,Energy Efficiency,energy,energy,20598,"TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:20852,Energy Efficiency,energy,energy-large,20852,"F-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:21297,Energy Efficiency,energy,energy,21297," cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for di",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:21319,Energy Efficiency,energy,energy,21319,"c-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:21776,Energy Efficiency,energy,energy,21776,"set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22199,Energy Efficiency,charge,charge,22199,"provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22810,Energy Efficiency,energy,energy,22810,"al, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:23170,Energy Efficiency,energy,energy,23170,"meters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coeff",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:23890,Energy Efficiency,energy,energy,23890,"lculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24209,Energy Efficiency,energy,energy,24209,"symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a hi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24461,Energy Efficiency,energy,energy,24461,"bitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25040,Energy Efficiency,energy,energy,25040,"ics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-dif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25620,Energy Efficiency,energy,energy,25620,"ms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25656,Energy Efficiency,energy,energy,25656,"ms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25926,Energy Efficiency,energy,energy,25926,"ally compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule cl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26736,Energy Efficiency,energy,energy,26736,"evel of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Doub",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27629,Energy Efficiency,energy,energy,27629,"et. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27939,Energy Efficiency,charge,charge,27939,"lecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27955,Energy Efficiency,energy,energy,27955,"lecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29053,Energy Efficiency,energy,energy,29053," with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and double",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29648,Energy Efficiency,energy,energy,29648,"wrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29783,Energy Efficiency,energy,energy,29783,"D Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psiva",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29893,Energy Efficiency,energy,energy,29893,"t quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30341,Energy Efficiency,energy,energy,30341,"G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30565,Energy Efficiency,energy,energy,30565,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30711,Energy Efficiency,energy,energy,30711,"aged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total I",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:31911,Energy Efficiency,energy,energy,31911,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:32009,Energy Efficiency,energy,energy,32009,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:823,Integrability,interface,interface,823,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:847,Integrability,rout,routing,847,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1232,Integrability,wrap,wrappers,1232,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3967,Integrability,wrap,wrapper,3967,"CSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:10067,Integrability,depend,depend,10067,"ly 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:10170,Integrability,depend,depend,10170,"y in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14114,Integrability,interface,interface,14114,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14131,Integrability,interface,interface,14131,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:28288,Integrability,depend,depend,28288,"ate of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:28391,Integrability,depend,depend,28391,"nsition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:5293,Modifiability,variab,variables,5293,"(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30121,Modifiability,plugin,plugins,30121,"on, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a tes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30517,Modifiability,variab,variables,30517,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30872,Modifiability,variab,variables,30872,"; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30955,Modifiability,variab,variables,30955,"nt for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1257,Performance,optimiz,optimize,1257,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1504,Performance,optimiz,optimization,1504,"radients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:1919,Performance,optimiz,optimizations,1919,"ore energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2098,Performance,optimiz,optimized,2098,"y Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2305,Performance,perform,performs,2305,"quence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3078,Performance,optimiz,optimization,3078,"metry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3197,Performance,perform,performs,3197,"al using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3215,Performance,optimiz,optimization,3215,"al using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3667,Performance,optimiz,optimization,3667,"pt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:4203,Performance,optimiz,optimization,4203,"ometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:4509,Performance,optimiz,optimization,4509," = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:6118,Performance,optimiz,optimization,6118,"s that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geome",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7395,Performance,optimiz,optimization,7395,"oordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:9388,Performance,optimiz,optimizations,9388,"pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11333,Performance,perform,performs,11333,"sing RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11981,Performance,optimiz,optimizations,11981,"es. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Sin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13166,Performance,optimiz,optimization,13166,"temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gib",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13703,Performance,optimiz,optimization,13703,"formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer intera",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15582,Performance,optimiz,optimization,15582,"2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater dete",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15660,Performance,optimiz,optimized,15660,"2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater dete",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:15980,Performance,optimiz,optimization,15980,"es) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:16051,Performance,optimiz,optimization,16051,"cal with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:16483,Performance,perform,performed,16483,"uclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17019,Performance,perform,performs,17019,"tion via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17184,Performance,optimiz,optimization,17184,"sian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:19090,Performance,optimiz,optimization,19090,"isting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cepa1; cc-pvdz H2O Test CEPA(1) Energy. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:21134,Performance,perform,performed,21134,"_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22411,Performance,perform,performs,22411,"tesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step updat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:22604,Performance,optimiz,optimization,22604,"sd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:23426,Performance,perform,performs,23426,"mulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24404,Performance,optimiz,optimization,24404," for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24525,Performance,perform,performing,24525,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25438,Performance,perform,performed,25438,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26493,Performance,perform,performed,26493," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26691,Performance,optimiz,optimization,26691,"-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; F",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27342,Performance,optimiz,optimizations,27342,"H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27698,Performance,optimiz,optimization,27698,"ization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:28718,Performance,optimiz,optimization,28718,"de. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29128,Performance,perform,performed,29128,"sian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29401,Performance,optimiz,optimized,29401,"n’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30617,Performance,perform,performed,30617,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:31267,Performance,perform,performed,31267,"ntation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:32030,Performance,perform,performs,32030,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:2617,Safety,avoid,avoided,2617," on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:11647,Safety,avoid,avoided,11647,"-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-delta-energy; Extrapolated energies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:32199,Safety,avoid,avoided,32199,"rrectly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. Previous topic; DMRG; Next topic; DFT Functionals. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26506,Security,validat,validate,26506," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:437,Testability,test,tests,437,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:807,Testability,test,test,807,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:986,Testability,test,tests,986,"﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet en",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3390,Testability,test,test,3390,"al integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:3424,Testability,test,test,3424,"al integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:4630,Testability,test,testing,4630,"liary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:6070,Testability,test,tested,6070,"h2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7056,Testability,test,test,7056,"orithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7442,Testability,test,test,7442,"ue to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrest",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:7899,Testability,test,test,7899,"F. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet or",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:8769,Testability,test,tests,8769,"lecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G opti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:13290,Testability,test,test,13290,"gies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polari",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14141,Testability,test,testing,14141,"st. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-gr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:14484,Testability,test,testing,14484,"s sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. casscf-fzc-sp; CASSCF/6-31G** energy point. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:16338,Testability,test,test,16338,"cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a mi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:16469,Testability,test,test,16469,"uclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:17250,Testability,test,testing,17250,"c densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:23043,Testability,test,tested,23043,"sociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24519,Testability,test,test,24519,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24645,Testability,test,tests,24645,"lementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:24870,Testability,test,tests,24870,"e interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al.,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25293,Testability,test,test,25293,"or the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradient",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:25424,Testability,test,test,25424,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26114,Testability,test,tests,26114,"ical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF single",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:26469,Testability,test,test,26469," CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:27453,Testability,test,test,27453,"dient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:28995,Testability,test,test,28995,"SD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29531,Testability,test,test,29531,"ansition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:29599,Testability,test,test,29599,"ansition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30858,Testability,test,test,30858,"; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:30923,Testability,test,testing,30923,"nt for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:31122,Testability,test,test,31122," Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html:31253,Testability,test,test,31253,"ntation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft1; DFT Functional Test. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html:604,Deployability,install,install,604,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html:962,Deployability,update,updated,962,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html:429,Energy Efficiency,energy,energy,429,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html:572,Modifiability,plugin,plugins,572,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html:604,Deployability,install,install,604,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html:962,Deployability,update,updated,962,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html:429,Energy Efficiency,energy,energy,429,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html:572,Modifiability,plugin,plugins,572,"﻿. DFTD3 — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DFTD3¶. Input File; Description. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. Previous topic; Test Suite and Sample Inputs; Next topic; MRCC. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dmrg-1.html:670,Deployability,update,updated,670,"﻿. DMRG — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DMRG¶. Input File; Description. dmrg/ci-h2o; dmrg-ci on water. dmrg/scf-n2; dmrg-scf on N2. dmrg/natural-orbital; dmrg-scf on N2. dmrg/caspt2-n2; dmrg-caspt2 on nitrogen. Previous topic; PCMSOLVER; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dmrg-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dmrg-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dmrg.html:670,Deployability,update,updated,670,"﻿. DMRG — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». DMRG¶. Input File; Description. dmrg/ci-h2o; dmrg-ci on water. dmrg/scf-n2; dmrg-scf on N2. dmrg/natural-orbital; dmrg-scf on N2. dmrg/caspt2-n2; dmrg-caspt2 on nitrogen. Previous topic; PCMSOLVER; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_dmrg.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_dmrg.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:1186,Deployability,update,updated,1186,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:311,Performance,perform,performed,311,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:667,Performance,perform,performed,667,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:330,Testability,test,test,330,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:443,Testability,test,test,443,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:686,Testability,test,test,686,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html:813,Testability,test,testing,813,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:1186,Deployability,update,updated,1186,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:311,Performance,perform,performed,311,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:667,Performance,perform,performed,667,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:330,Testability,test,test,330,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:443,Testability,test,test,443,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:686,Testability,test,test,686,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html:813,Testability,test,testing,813,"﻿. LIBEFP — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». LIBEFP¶. Input File; Description. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. Previous topic; CFOUR; Next topic; PCMSOLVER. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html:911,Deployability,update,updated,911,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html:316,Energy Efficiency,energy,energy,316,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html:388,Energy Efficiency,energy,energy,388,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html:244,Performance,optimiz,optimization,244,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html:532,Performance,optimiz,optimization,532,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html:911,Deployability,update,updated,911,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html:316,Energy Efficiency,energy,energy,316,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html:388,Energy Efficiency,energy,energy,388,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html:244,Performance,optimiz,optimization,244,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html:532,Performance,optimiz,optimization,532,"﻿. MRCC — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». MRCC¶. Input File; Description. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. Previous topic; DFTD3; Next topic; CFOUR. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_pcmsolver-1.html:662,Deployability,update,updated,662,"﻿. PCMSOLVER — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». PCMSOLVER¶. Input File; Description. pcmsolver/pcm-dipole; dipole moment for HF and B3LYP in presence of perturbation. pcmsolver/pcm-scf; pcm. pcmsolver/pcm-dft; pcm. Previous topic; LIBEFP; Next topic; DMRG. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_pcmsolver.html:662,Deployability,update,updated,662,"﻿. PCMSOLVER — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». PCMSOLVER¶. Input File; Description. pcmsolver/pcm-dipole; dipole moment for HF and B3LYP in presence of perturbation. pcmsolver/pcm-scf; pcm. pcmsolver/pcm-dft; pcm. Previous topic; LIBEFP; Next topic; DMRG. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:1361,Availability,avail,available,1361," waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into Psi4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above s",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:1681,Availability,avail,available,1681,"esian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into Psi4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. T",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:2117,Availability,avail,availability,2117,"les are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basi",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:8277,Deployability,update,updated,8277," new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a Psi4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. (See; mints2 for an example.); basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. Table Of Contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets. Previous topic; Molecule and Geometry Specification; Next topic; Theoretical Methods: SCF to FCI. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon: Structuring an Input File ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:4686,Integrability,depend,dependence,4686," }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:5103,Integrability,rout,routes,5103," by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/share/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is ",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:6533,Modifiability,variab,variable,6533,".00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/share/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/share/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/share/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a Psi4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statem",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:2485,Performance,perform,performs,2485,"supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectivily omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from to ; Psi4 will detect this; automatically and run in the appropriate point group. ",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:4870,Performance,perform,performing,4870,"ug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after app",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:3421,Safety,detect,detect,3421," this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectivily omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from to ; Psi4 will detect this; automatically and run in the appropriate point group. The same syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. basis {; assign cc-pVDZ-RI df_basis_mp2; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certai",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets-1.html:4448,Usability,simpl,simply,4448,"n the appropriate point group. The same syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. basis {; assign cc-pVDZ-RI df_basis_mp2; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in ",MatchSource.WIKI,psi4manual/1.0.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets-1.html
https://psicode.org/psi4manual/1.0.0/basissets.html:1361,Availability,avail,available,1361," waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into Psi4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above s",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:1681,Availability,avail,available,1681,"esian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into Psi4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. T",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:2117,Availability,avail,availability,2117,"les are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basi",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:8277,Deployability,update,updated,8277," new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a Psi4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. (See; mints2 for an example.); basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. Table Of Contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets. Previous topic; Molecule and Geometry Specification; Next topic; Theoretical Methods: SCF to FCI. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon: Structuring an Input File ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:4686,Integrability,depend,dependence,4686," }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:5103,Integrability,rout,routes,5103," by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/share/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is ",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:6533,Modifiability,variab,variable,6533,".00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/share/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/share/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/share/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a Psi4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statem",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:2485,Performance,perform,performs,2485,"supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectivily omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from to ; Psi4 will detect this; automatically and run in the appropriate point group. ",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:4870,Performance,perform,performing,4870,"ug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after app",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:3421,Safety,detect,detect,3421," this, a; basis block can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizzare example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectivily omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from to ; Psi4 will detect this; automatically and run in the appropriate point group. The same syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. basis {; assign cc-pVDZ-RI df_basis_mp2; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certai",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets.html:4448,Usability,simpl,simply,4448,"n the appropriate point group. The same syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. basis {; assign cc-pVDZ-RI df_basis_mp2; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; basis {; assign C aug-cc-pVDZ-RI df_basis_mp2; }. When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input. Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In order to; decontract a given basis set, simply add “-decontract” to the name of the primary basis set.; set basis cc-pvdz-decontract. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing realtivistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to Psi4‘s notice.; (1) Install new basis set file into Psi4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in ",MatchSource.WIKI,psi4manual/1.0.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets.html
https://psicode.org/psi4manual/1.0.0/basissets_byelement-1.html:192,Availability,avail,availability,192,﻿. Basis Sets by Element — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in Psi4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ; ,MatchSource.WIKI,psi4manual/1.0.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.0.0/basissets_byelement-1.html:126825,Deployability,update,updated,126825,";  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . ano0;  ; H;  ;  ;  ;  ; C;  ; O;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Previous topic; Basis Sets by Family; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.0.0/basissets_byelement.html:192,Availability,avail,availability,192,﻿. Basis Sets by Element — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Element¶. Basis set availability by element in Psi4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ; ,MatchSource.WIKI,psi4manual/1.0.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byelement.html
https://psicode.org/psi4manual/1.0.0/basissets_byelement.html:126825,Deployability,update,updated,126825,";  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . ano0;  ; H;  ;  ;  ;  ; C;  ; O;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Previous topic; Basis Sets by Family; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byelement.html
https://psicode.org/psi4manual/1.0.0/basissets_byfamily-1.html:17193,Deployability,update,updated,17193,"vtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; def2-sv_p_-jkfit; def2-sv_p_-ri; —. def2-SVP; def2-svp; def2-svp-jkfit; def2-svp-ri; —. def2-SVPD; def2-svpd; def2-svp-jkfit; def2-svpd-ri; —. def2-TZVP; def2-tzvp; def2-tzvp-jkfit; def2-tzvp-ri; —. def2-TZVPD; def2-tzvpd; def2-tzvp-jkfit; def2-tzvpd-ri; —. def2-TZVPP; def2-tzvpp; def2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byfamily-1.html
https://psicode.org/psi4manual/1.0.0/basissets_byfamily.html:17193,Deployability,update,updated,17193,"vtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df); 6-311ppg_2df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,p); 6-311ppg_2df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2p); 6-311ppg_2df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(2df,2pd); 6-311ppg_2df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df); 6-311ppg_3df_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,p); 6-311ppg_3df_p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2p); 6-311ppg_3df_2p_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,2pd); 6-311ppg_3df_2pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. 6-311++G(3df,3pd); 6-311ppg_3df_3pd_; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; —. def2-SV(P); def2-sv_p_; def2-sv_p_-jkfit; def2-sv_p_-ri; —. def2-SVP; def2-svp; def2-svp-jkfit; def2-svp-ri; —. def2-SVPD; def2-svpd; def2-svp-jkfit; def2-svpd-ri; —. def2-TZVP; def2-tzvp; def2-tzvp-jkfit; def2-tzvp-ri; —. def2-TZVPD; def2-tzvpd; def2-tzvp-jkfit; def2-tzvpd-ri; —. def2-TZVPP; def2-tzvpp; def2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Previous topic; <no title>; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_byfamily.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:286,Availability,avail,available,286,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:513,Availability,avail,available,513,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:833,Availability,avail,available,833,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:1269,Availability,avail,availability,1269,"les are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:1419,Availability,avail,available,1419,"lly necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:3110,Availability,avail,available,3110,"1++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,p);  ; 6-311+G(3df,p);  ; 6-311++G(3df,p);  . 6-311G(3df,2p);  ; 6-311+G(3df,2p);  ; 6-311++G(3df,2p);  . 6-311G(3df,2pd);  ; 6-311+G(3df,2pd);  ; 6-311++G(3df,2pd);  . 6-311G(3df,3pd);  ; 6-311+G(3df,3pd);  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D; T; Q. aug-cc-pVXZ; s, p, , , , ; s, p, , ; aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, , , , ;  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, , , ;  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, , ;  ;  ; maTZ; maQZ. s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; a",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:3631,Availability,avail,available,3631,";  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D; T; Q. aug-cc-pVXZ; s, p, , , , ; s, p, , ; aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, , , , ;  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, , , ;  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, , ;  ;  ; maTZ; maQZ. s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:4046,Availability,avail,available,4046,;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; hea,MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:4495,Availability,avail,available,4495,5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; de,MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:4964,Availability,avail,available,4964,"; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are desig",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:5367,Availability,avail,available,5367," cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigatio",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:5578,Availability,avail,available,5578,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:6493,Deployability,update,updated,6493,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:5859,Testability,stub,stub,5859,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:5875,Testability,stub,stub,5875,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:5963,Testability,stub,stub,5963,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html:6099,Testability,stub,stubXZ-JKFIT,6099,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:286,Availability,avail,available,286,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:513,Availability,avail,available,513,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:833,Availability,avail,available,833,"﻿. Basis Sets by Family — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; and Other summarize the orbital basis sets available in; Psi4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:1269,Availability,avail,availability,1269,"les are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:1419,Availability,avail,available,1419,"lly necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in Psi4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:3110,Availability,avail,available,3110,"1++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,p);  ; 6-311+G(3df,p);  ; 6-311++G(3df,p);  . 6-311G(3df,2p);  ; 6-311+G(3df,2p);  ; 6-311++G(3df,2p);  . 6-311G(3df,2pd);  ; 6-311+G(3df,2pd);  ; 6-311++G(3df,2pd);  . 6-311G(3df,3pd);  ; 6-311+G(3df,3pd);  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D; T; Q. aug-cc-pVXZ; s, p, , , , ; s, p, , ; aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, , , , ;  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, , , ;  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, , ;  ;  ; maTZ; maQZ. s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; a",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:3631,Availability,avail,available,3631,";  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D; T; Q. aug-cc-pVXZ; s, p, , , , ; s, p, , ; aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, , , , ;  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, , , ;  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, , ;  ;  ; maTZ; maQZ. s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:4046,Availability,avail,available,4046,;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; hea,MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:4495,Availability,avail,available,4495,5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; de,MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:4964,Availability,avail,available,4964,"; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are desig",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:5367,Availability,avail,available,5367," cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigatio",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:5578,Availability,avail,available,5578,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:6493,Deployability,update,updated,6493,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:5859,Testability,stub,stub,5859,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:5875,Testability,stub,stub,5875,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:5963,Testability,stub,stub,5963,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/basissets_tables.html:6099,Testability,stub,stubXZ-JKFIT,6099,"y-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in Psi4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in Psi4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of other orbital basis sets available in Psi4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; WFN; Next topic; Basis Sets by Element. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/basissets_tables.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:777,Availability,avail,available,777,"﻿. Best Practices for Python Functions — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:2254,Deployability,continuous,continuous,2254,"cule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:6754,Deployability,update,updated,6754,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:2908,Energy Efficiency,energy,energy,2908," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in f",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4168,Energy Efficiency,energy,energy,4168,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4193,Energy Efficiency,energy,energy,4193,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4513,Energy Efficiency,energy,energy,4513,"P8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4965,Energy Efficiency,energy,energy,4965,"ot break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise Vali",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:5398,Energy Efficiency,energy,energy,5398,"le('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentat",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4491,Integrability,interoperab,interoperability,4491,"P8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4649,Integrability,interoperab,interoperability,4649,"s for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is u",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4697,Integrability,interoperab,interoperability,4697,"1,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For ex",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:5516,Integrability,wrap,wrapper,5516,"le('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentat",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:5694,Integrability,interoperab,interoperabilities,5694,"lity is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4088,Modifiability,variab,variables,4088," file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reass",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4201,Modifiability,variab,variable,4201,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:2184,Performance,perform,performs,2184,"olecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:2953,Performance,optimiz,optimize,2953," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in f",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4255,Performance,optimiz,optimizer,4255,"ython/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Estab",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:6189,Security,expose,expose,6189,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:6283,Security,validat,validated,6283,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:3811,Testability,test,test,3811,"ame. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. A",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:3837,Testability,test,test,3837,"nction, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net resu",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4022,Testability,test,test,4022,"the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:6045,Testability,test,test,6045,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:777,Availability,avail,available,777,"﻿. Best Practices for Python Functions — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». Best Practices for Python Functions¶. Thy python functions shall always have final argument **kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice.; # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:2254,Deployability,continuous,continuous,2254,"cule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:6754,Deployability,update,updated,6754,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:2908,Energy Efficiency,energy,energy,2908," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in f",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4168,Energy Efficiency,energy,energy,4168,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4193,Energy Efficiency,energy,energy,4193,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4513,Energy Efficiency,energy,energy,4513,"P8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4965,Energy Efficiency,energy,energy,4965,"ot break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise Vali",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:5398,Energy Efficiency,energy,energy,5398,"le('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentat",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4491,Integrability,interoperab,interoperability,4491,"P8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4649,Integrability,interoperab,interoperability,4649,"s for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is u",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4697,Integrability,interoperab,interoperability,4697,"1,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For ex",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:5516,Integrability,wrap,wrapper,5516,"le('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentat",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:5694,Integrability,interoperab,interoperabilities,5694,"lity is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4088,Modifiability,variab,variables,4088," file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reass",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4201,Modifiability,variab,variable,4201,"tended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatev",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:2184,Performance,perform,performs,2184,"olecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). Preferrably, the python function signature (for functions intended to be called in input files) is function(name, **kwargs). For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see Database, database() argument db_name for example). After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive.; lowername = name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a m",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:2953,Performance,optimiz,optimize,2953," name.lower(); kwargs = kwargs_lower(kwargs). Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match.; if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument’s value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd.; if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in f",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4255,Performance,optimiz,optimizer,4255,"ython/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Estab",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:6189,Security,expose,expose,6189,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:6283,Security,validat,validated,6283,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:3811,Testability,test,test,3811,"ame. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. A",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:3837,Testability,test,test,3837,"nction, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net resu",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:4022,Testability,test,test,4022,"the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bestpractices_py.html:6045,Testability,test,test,6045,"tion code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For example, if xx shouldn’t call db, add the last two lines above to the xx function. If db shouldn’t call xx, add the following two lines below to the db function.; if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). Create a multipart test case that runs some intercalls between your function and others (akin to pywrap_all). In trials, permute the order of calls a few times to expose any calls that don’t clean up after themselves and need further attention. When all is validated, add your findings to the great Permitted nesting of Psithon functions table in the documentation. Previous topic; Plugins: Adding New Functionality to Psi4; Next topic; Documentation. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Contributions: Intro to Programming in Psi4 ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bestpractices_py.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py.html
https://psicode.org/psi4manual/1.0.0/bibliography-1.html:8074,Deployability,update,updated,8074,"14, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2013:omp2grad]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 138, 184103 (2013). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2013:omp3]E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Bozkaya:2013:ocepa]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 139, 054104 (2013). [Bozkaya:2013:omp3grad]U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). [Hohenberg:1964:136]P. Hohenberg and W. Kohn,; Phys. Rev. 136, B864-B871 (1964). [Kohn:1965:A1133]W. Kohn and L.J. Sham,; Phys. Rev. 140, A1133-A1138 (1965). [Parr:1989]R.G. Parr and W. Yang,; Density Functional Theory of Atoms and Molecules Oxford University Press, USA, 1989 ISBN:0195357736, 9780195357738. [FW:1950]L. L. Foldy and S. A. Wouthuysen,; Phys. Rev. 78, 29-36 (1950). [Kutzelnigg:1984]W. Kutzelnigg,; Int. J. Quantum Chem. 25, 107-129 (1984). [Smith:2016:2197]D. Smith, L. Burns, K. Patkowski, and D. Sherrill,; J. Phys. Chem. Lett. 7, 2197-2203 (2016). Previous topic; Physical Constants; Next topic; Contributions: Intro to Programming in Psi4. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bibliography-1.html
https://psicode.org/psi4manual/1.0.0/bibliography.html:8074,Deployability,update,updated,8074,"14, 6983 (2001). [Bozkaya:2011:omp2]U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill; J. Chem. Phys. 135, 104103 (2011). [Bozkaya:2013:omp2grad]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 138, 184103 (2013). [Bozkaya:2011:omp3]U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011). [Bozkaya:2013:omp3]E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013). [Bozkaya:2012:odtl]U. Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Bozkaya:2013:ocepa]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 139, 054104 (2013). [Bozkaya:2013:omp3grad]U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). [Hohenberg:1964:136]P. Hohenberg and W. Kohn,; Phys. Rev. 136, B864-B871 (1964). [Kohn:1965:A1133]W. Kohn and L.J. Sham,; Phys. Rev. 140, A1133-A1138 (1965). [Parr:1989]R.G. Parr and W. Yang,; Density Functional Theory of Atoms and Molecules Oxford University Press, USA, 1989 ISBN:0195357736, 9780195357738. [FW:1950]L. L. Foldy and S. A. Wouthuysen,; Phys. Rev. 78, 29-36 (1950). [Kutzelnigg:1984]W. Kutzelnigg,; Int. J. Quantum Chem. 25, 107-129 (1984). [Smith:2016:2197]D. Smith, L. Burns, K. Patkowski, and D. Sherrill,; J. Phys. Chem. Lett. 7, 2197-2203 (2016). Previous topic; Physical Constants; Next topic; Contributions: Intro to Programming in Psi4. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bibliography.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:7110,Availability,avail,available,7110,"[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and x",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:7155,Availability,avail,available,7155," of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:12948,Availability,avail,available,12948,"mpute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; ==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:16413,Deployability,install,installed,16413,"asis or the highest; zeta-level among an array of bases. Used by complete_basis_set(). scf_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True, alpha=1.63)[source]¶; Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by complete_basis_set(). scf_xtpl_helgaker_3(functionname, zLO, valueLO, zMD, valueMD, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by complete_basis_set(). corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by complete_basis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/share/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:18280,Deployability,update,updated,18280,"py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; RSE42; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:689,Energy Efficiency,energy,energy,689,"﻿. Complete Basis Set — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a tri",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:890,Energy Efficiency,energy,energy,890,"﻿. Complete Basis Set — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». Complete Basis Set¶. Code author: Lori A. Burns; Section author: Lori A. Burns. complete_basis_set(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a tri",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1339,Energy Efficiency,energy,energy,1339,"s, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and n",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1488,Energy Efficiency,energy,energy,1488,"s, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and n",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1512,Energy Efficiency,energy,energy,1512,"s, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and n",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1559,Energy Efficiency,energy,energy,1559,"s, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and n",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1716,Energy Efficiency,energy,energy,1716,"ations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:1726,Energy Efficiency,energy,energy,1726,"ations and delta corrections and condense the; components into a minimum number of calculations. Aliases:cbs(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:2072,Energy Efficiency,energy,energy,2072,"RENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only r",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:2120,Energy Efficiency,energy,energy,2120,"RENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only r",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:2311,Energy Efficiency,energy,energy,2311,"rapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained.",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:2513,Energy Efficiency,energy,energy,2513,"a correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Here, is an energy or energy extrapolation scheme, and the following also hold. A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be s",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:2973,Energy Efficiency,energy,energy,2973,"pended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indica",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3159,Energy Efficiency,energy,energy,3159,"the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferio",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3197,Energy Efficiency,energy,energy,3197,"the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferio",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3446,Energy Efficiency,energy,energy,3446,"words for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3486,Energy Efficiency,energy,energy,3486,"words for correlated jobs.; The following energy methods have been set up for cbs(). scf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn; omp2. omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1); cepa(3). acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3673,Energy Efficiency,energy,energy,3673,"; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superi",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3736,Energy Efficiency,energy,energy,3736,"; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superi",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3840,Energy Efficiency,energy,energy,3840,"' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indica",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:3903,Energy Efficiency,energy,energy,3903,"' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indica",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4005,Energy Efficiency,energy,energy,4005," should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Ind",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4075,Energy Efficiency,energy,energy,4075," should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – 'scf' || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Ind",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4185,Energy Efficiency,energy,energy,4185,"ed. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; In",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4255,Energy Efficiency,energy,energy,4255,"ed. Generally unnecessary, as ‘scf’ is the scf in Psi4 but; can be used to direct lone scf components to run in Psi4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; In",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4357,Energy Efficiency,energy,energy,4357,"fn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set co",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4426,Energy Efficiency,energy,energy,4426,"fn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set co",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4537,Energy Efficiency,energy,energy,4537," argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence o",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4606,Energy Efficiency,energy,energy,4606," argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence o",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4708,Energy Efficiency,energy,energy,4708," is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' ||",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4778,Energy Efficiency,energy,energy,4778," is to be obtained. delta_wfn_lesser (string) – corl_wfn || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' ||",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4889,Energy Efficiency,energy,energy,4889,"ned. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:4959,Energy Efficiency,energy,energy,4959,"ned. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5061,Energy Efficiency,energy,energy,5061,"ained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5130,Energy Efficiency,energy,energy,5130,"ained. delta2_wfn_lesser (string) – delta_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5241,Energy Efficiency,energy,energy,5241,"ined. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5310,Energy Efficiency,energy,energy,5310,"ined. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – delta2_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5612,Energy Efficiency,energy,energy,5612,"ion; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction;",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:5848,Energy Efficiency,energy,energy,5848,"sser (string) – delta3_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transfor",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6031,Energy Efficiency,energy,energy,6031,"ta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exa",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6222,Energy Efficiency,energy,energy,6222,"string) – delta4_wfn || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Pa",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6412,Energy Efficiency,energy,energy,6412,"is set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – corl_basis || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_he",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6603,Energy Efficiency,energy,energy,6603,"s the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6793,Energy Efficiency,energy,energy,6793,"-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:6833,Energy Efficiency,energy,energy,6833," delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:7334,Energy Efficiency,energy,energy,7334,"6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Def",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:7678,Energy Efficiency,energy,energy,7678,"'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:7978,Energy Efficiency,energy,energy,7978,"erated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:; scf_scheme (function) – xtpl_highest_1 || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to co",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:8287,Energy Efficiency,energy,energy,8287,"tpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. corl_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:8596,Energy Efficiency,energy,energy,8596,"tion) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. delta_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf')",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:8906,Energy Efficiency,energy,energy,8906,"l_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. delta2_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_sch",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:9215,Energy Efficiency,energy,energy,9215,"er_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. delta3_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:9531,Energy Efficiency,energy,energy,9531,"trapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correcti",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:9686,Energy Efficiency,energy,energy,9686,"esent in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', co",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:9794,Energy Efficiency,energy,energy,9794,"is set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, de",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:9927,Energy Efficiency,energy,energy,9927,"id basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – xtpl_highest_1 || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC'",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:10147,Energy Efficiency,energy,energy,10147,"f two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:10310,Energy Efficiency,energy,energy,10310,"f two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:10613,Energy Efficiency,energy,energy,10613,"VDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl e",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:11779,Energy Efficiency,energy,energy,11779,"ug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz fo",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:12025,Energy Efficiency,energy,energy,12025,"g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:12079,Energy Efficiency,energy,energy,12079,"g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:13181,Energy Efficiency,energy,energy,13181,"o the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; ==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:13344,Energy Efficiency,energy,energy,13344," for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; ==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ----------------------------------------------------------------------------------. ==> Stages <==. --------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:16783,Energy Efficiency,energy,energy,16783,"eHI, verbose=True)[source]¶; Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by complete_basis_set(). corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by complete_basis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/share/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference g",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:16861,Energy Efficiency,energy,energy,16861,"a-level bases.; Used by complete_basis_set(). corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by complete_basis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/share/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Tabl",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:16898,Energy Efficiency,energy,energy,16898,"a-level bases.; Used by complete_basis_set(). corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by complete_basis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/share/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Tabl",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:17693,Energy Efficiency,energy,energy,17693,"py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; RSE42; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
https://psicode.org/psi4manual/1.0.0/cbs-1.html:17730,Energy Efficiency,energy,energy,17730,"py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; RSE42; Next topic; <no title>. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html
