id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:138742,Deployability,update,update,138742,"pe: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:178506,Deployability,update,update,178506,". Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:181427,Deployability,integrat,integration,181427,"separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:187803,Deployability,update,updates,187803," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:187828,Deployability,update,updated,187828," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:187927,Deployability,update,updated,187927,"ALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:189612,Deployability,update,updates,189612,"ce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:189716,Deployability,update,updates,189716,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:190616,Deployability,integrat,integration,190616,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194062,Deployability,update,update,194062,"EFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194244,Deployability,update,updates,194244,"lows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit consid",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:195311,Deployability,update,updates,195311,"sponse contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:213083,Deployability,integrat,integration,213083,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:213661,Deployability,update,update,213661,"; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC); OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:216000,Deployability,update,update,216000,"RICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:216605,Deployability,configurat,configurations,216605,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:220508,Deployability,update,updated,220508," string; Default: No Default. WFN_SYM (MCSCF); MCSCF — The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_SYM (PSIMRCC); PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_TYPE (DFOCC); DFOCC — Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. WFN_TYPE (OCC); OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITER_FILE_LABEL (GLOBALS); GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY); CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY); CCDENSITY (Expert) — Do require and to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC); PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY); CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA); CCLAMBDA — Do use zeta?. Type: boolean; Default: false. Previous topic; Appendices; Next topic; Keywords by Module. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:2056,Energy Efficiency,energy,energy,2056," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:2111,Energy Efficiency,efficient,efficient,2111,"E. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:4079,Energy Efficiency,reduce,reduces,4079,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:4133,Energy Efficiency,reduce,reduce,4133,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:4156,Energy Efficiency,energy,energy,4156,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:15800,Energy Efficiency,energy,energy,15800,"maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:16393,Energy Efficiency,energy,energy,16393," string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handle",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:17757,Energy Efficiency,reduce,reduces,17757,"efault: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:17912,Energy Efficiency,energy,energy,17912,"S_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:17964,Energy Efficiency,energy,energy,17964,"S_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:19723,Energy Efficiency,reduce,reduced,19723,"UARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR); CFOUR — Specifies whether nonabelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:21608,Energy Efficiency,energy,energy,21608,"constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR); CFOUR — Specifies treatment of anharmonc effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:22604,Energy Efficiency,reduce,reduced,22604,"eration of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:23203,Energy Efficiency,reduce,reduced,23203,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25433,Energy Efficiency,energy,energy,25433,"AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE method",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27986,Energy Efficiency,energy,energy,27986,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:28027,Energy Efficiency,energy,energy,28027,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:28216,Energy Efficiency,charge,charge,28216,"CSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31698,Energy Efficiency,energy,energy,31698,"ype: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:32087,Energy Efficiency,energy,energy,32087,"ype: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:32559,Energy Efficiency,energy,energy,32559," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:33101,Energy Efficiency,energy,energy,33101,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:33148,Energy Efficiency,energy,energy,33148,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:36142,Energy Efficiency,energy,energy,36142,"ONV (CFOUR); CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below with as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:42496,Energy Efficiency,adapt,adapted,42496,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:42699,Energy Efficiency,energy,energy,42699,"entations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local syste",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:43258,Energy Efficiency,adapt,adapted,43258,"rational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49073,Energy Efficiency,efficient,efficient,49073,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49184,Energy Efficiency,energy,energy,49184,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49273,Energy Efficiency,energy,energy,49273," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:51584,Energy Efficiency,reduce,reduce,51584,"OUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:52142,Energy Efficiency,energy,energy,52142,"genvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:52178,Energy Efficiency,energy,energy,52178,"genvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:55866,Energy Efficiency,efficient,efficient,55866,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:58124,Energy Efficiency,energy,energy,58124,"ES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreduc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:58270,Energy Efficiency,energy,energy,58270,"ve eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:60204,Energy Efficiency,energy,energy,60204," no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:61329,Energy Efficiency,adapt,adapted,61329,"ution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:63180,Energy Efficiency,energy,energy,63180,"on. These are in the case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the and the spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blockes of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:64762,Energy Efficiency,energy,energy,64762,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:64773,Energy Efficiency,energy,energy,64773,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:73000,Energy Efficiency,energy,energy,73000,"nt matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolea",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:73399,Energy Efficiency,reduce,reduced,73399,"sibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR); CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:76616,Energy Efficiency,energy,energy,76616,"F iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole pertubation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword . (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR); CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR); CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR); CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:79111,Energy Efficiency,energy,energy,79111,"ng CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR); CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82821,Energy Efficiency,adapt,adapted,82821,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:88188,Energy Efficiency,charge,charge,88188,"; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:94666,Energy Efficiency,efficient,efficient,94666,"Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:94852,Energy Efficiency,energy,energy,94852,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:103081,Energy Efficiency,energy,energy,103081,"onalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires CI vectors on disk, where is the maximum number of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vector",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:103671,Energy Efficiency,energy,energy,103671,"of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:106326,Energy Efficiency,energy,energy,106326,"CFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:106638,Energy Efficiency,energy,energy,106638,"g DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:109340,Energy Efficiency,energy,energy,109340,"Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:109787,Energy Efficiency,reduce,reduced,109787,"ity RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:110916,Energy Efficiency,energy,energy,110916,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111209,Energy Efficiency,energy,energy,111209,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111595,Energy Efficiency,energy,energy,111595,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111887,Energy Efficiency,energy,energy,111887,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:112831,Energy Efficiency,energy,energy,112831,"orm spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:112991,Energy Efficiency,energy,energy,112991,"imizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:113198,Energy Efficiency,energy,energy,113198,"_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:113438,Energy Efficiency,energy,energy,113438," No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:113635,Energy Efficiency,energy,energy,113635,"0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:113831,Energy Efficiency,energy,energy,113831,"aling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:114030,Energy Efficiency,energy,energy,114030,Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:114314,Energy Efficiency,energy,energy,114314,efault convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for dif,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:114411,Energy Efficiency,energy,energy,114411,ONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC p,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:114645,Energy Efficiency,energy,energy,114645,criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragmen,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:114845,Energy Efficiency,energy,energy,114845,"criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (E",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:115039,Energy Efficiency,energy,energy,115039,"e Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:115203,Energy Efficiency,energy,energy,115203,"ONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:115513,Energy Efficiency,energy,energy,115513,"on types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a dampin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:115855,Energy Efficiency,energy,energy,115855,"nergy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116099,Energy Efficiency,charge,charge,116099,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116118,Energy Efficiency,energy,energy,116118,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116248,Energy Efficiency,energy,energy,116248,"& Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116356,Energy Efficiency,energy,energy,116356,"EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinate",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:117159,Energy Efficiency,energy,energy,117159,"e: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:122903,Energy Efficiency,charge,charge,122903,"; DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:128800,Energy Efficiency,energy,energy,128800," boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:135162,Energy Efficiency,energy,energy,135162,"or the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:136672,Energy Efficiency,energy,energy,136672," could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:136868,Energy Efficiency,energy,energy,136868,"IZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:150474,Energy Efficiency,power,power,150474," augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP (CCSORT); CCSORT —. Type: boolean; Default: false. LOCAL_FILTER_SINGLES (CCEOM); CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA); CCLAMBDA — Do apply local filtering to single de-excitation ( amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE); CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_FILTER_SINGLES (CCSORT); CCSORT — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_GHOST (CCEOM); CCEOM — Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. LOCAL_IBO_CONDITION (FISAPT); FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT); FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT); FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT); FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT); FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT); FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF); SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY); CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM); CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:153327,Energy Efficiency,energy,energy,153327,"l pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA); CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE); CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PAIRDEF (CCSORT); CCSORT — Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:153720,Energy Efficiency,energy,energy,153720,"iable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:154877,Energy Efficiency,energy,energy,154877," of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:155804,Energy Efficiency,energy,energy,155804,"ons between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE ve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:157403,Energy Efficiency,energy,energy,157403,"le; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAXITER (CCENERGY); CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM); CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA); CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE); CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCFT); DCFT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maxmum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI (Expert) — Convergence algorithm to utilize. This is a flag for the future. Type: string; Possible Values: ONE_STEP, TWO_STEP; Default: TWO_STEP. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:158589,Energy Efficiency,energy,energy,158589,"TER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maxmum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI (Expert) — Convergence algorithm to utilize. This is a flag for the future. Type: string; Possible Values: ONE_STEP, TWO_STEP; Default: TWO_STEP. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:159386,Energy Efficiency,energy,energy,159386,"DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-3. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimumnumber of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:161219,Energy Efficiency,energy,energy,161219,"nvolving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:165919,Energy Efficiency,energy,energy,165919,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:165951,Energy Efficiency,energy,energy,165951,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:166021,Energy Efficiency,energy,energy,166021,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:166891,Energy Efficiency,energy,energy,166891,"e. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:168414,Energy Efficiency,energy,energy,168414," be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: bool",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:170485,Energy Efficiency,energy,energy,170485, dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY); CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM); CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC); ADC — The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. NO_DFILE (DETCI); DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_RESPONSE (SAPT); SAPT — Don’t solve the CPHF equations? Evaluate and instead of their response-including coupterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. NO_SINGLES (PSIMRCC); PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NO_TEI (TRANSQT2); TRANSQT2 (Expert) — Whether to only form the one electron integrals. Type: boolean; Default: false. NORM_TOLERANCE (ADC); ADC — The cutoff norm of residual vector in SEM step. Type: conv double; Default: 1e-6. NUM_AMPS_PRINT (ADC); ADC — Number of components of transition amplitudes printed. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY); CCENERGY — Number of important and amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM); CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA); CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE); CCRESPONSE — Number of important CC amplitudes per excitation level to pr,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:180416,Energy Efficiency,charge,charges,180416,"EPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE (OCC); OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC); DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC); OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS); GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE (GLOBALS); GLOBALS (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:188346,Energy Efficiency,energy,energy,188346,"S); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv doubl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:188459,Energy Efficiency,energy,energy,188459,"gets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in per",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:188598,Energy Efficiency,reduce,reduce,188598," QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:199766,Energy Efficiency,energy,energy,199766," the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:199861,Energy Efficiency,energy,energy,199861,"(THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (S",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:199956,Energy Efficiency,energy,energy,199956,"he full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:200995,Energy Efficiency,energy,energy,200995,"lean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_B, 3-TRIMER, 3-DIMER_AB, 3-DIMER_BC, 3-DIMER_AC, 3-MONOMER_A, 3-MONOMER_B, 3-MONOMER_C; Default: FALSE. SAPT0_E10 (SAPT); SAPT (Expert) — For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208900,Energy Efficiency,adapt,adapted,208900,"F); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:209026,Energy Efficiency,energy,energy,209026," of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:210584,Energy Efficiency,energy,energy,210584,"ange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:213295,Energy Efficiency,energy,energy,213295,"ety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Defau",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6103,Integrability,rout,routines,6103,"DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6694,Integrability,depend,depending,6694," into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:28883,Integrability,contract,contraction,28883,"o Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:28988,Integrability,contract,contraction,28988,"our') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:29036,Integrability,contract,contraction,29036,"our') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46253,Integrability,contract,contracted,46253,"zen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46466,Integrability,contract,contracted,46466," the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geomet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46553,Integrability,contract,contracted,46553,"ey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:50058,Integrability,integrat,integration,50058,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57423,Integrability,message,message,57423,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:65811,Integrability,depend,dependent,65811,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:66387,Integrability,depend,dependent,66387,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:68775,Integrability,depend,depending,68775,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:72239,Integrability,message,message,72239," is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> U",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:121293,Integrability,rout,routine,121293,"SD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and bet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:131680,Integrability,depend,dependent,131680," Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GDMA_LIMIT (GDMA); GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:181427,Integrability,integrat,integration,181427,"separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:187418,Integrability,rout,routing,187418," all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boole",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:190616,Integrability,integrat,integration,190616,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:197327,Integrability,depend,depending,197327,"). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:197489,Integrability,depend,depending,197489,"FO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:199240,Integrability,depend,dependent,199240," No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:200659,Integrability,depend,dependencies,200659,"er. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:213083,Integrability,integrat,integration,213083,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6330,Modifiability,extend,extended,6330," Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:16803,Modifiability,config,configurations,16803,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:26176,Modifiability,enhance,enhance,26176,"n the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:39861,Modifiability,coupling,coupling,39861," N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword . The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole momen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:42496,Modifiability,adapt,adapted,42496,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:43258,Modifiability,adapt,adapted,43258,"rational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49331,Modifiability,variab,variables,49331,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56676,Modifiability,coupling,coupling,56676," TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56771,Modifiability,coupling,coupling,56771,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56818,Modifiability,coupling,coupling,56818,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56960,Modifiability,coupling,coupling,56960," available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:60577,Modifiability,variab,variable,60577,"the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:60627,Modifiability,variab,variable,60627,"ogram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:61329,Modifiability,adapt,adapted,61329,"ution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:66101,Modifiability,coupling,coupling,66101,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:70114,Modifiability,config,configurational,70114,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:75930,Modifiability,coupling,coupling,75930,"ten troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR); CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR); CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR); CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole pertubation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword . (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82821,Modifiability,adapt,adapted,82821,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:88580,Modifiability,coupling,coupling,88580,"?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116659,Modifiability,extend,extended,116659,"ng type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, gues",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116789,Modifiability,extend,extended,116789,"es: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user inpu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:116915,Modifiability,extend,extended,116915,"oolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:125448,Modifiability,flexible,flexible,125448," Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: doub",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:127220,Modifiability,config,configruation,127220,"OW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:134742,Modifiability,coupling,coupling,134742,"l symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably elimin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:134900,Modifiability,coupling,coupling,134900," boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:136415,Modifiability,coupling,coupling,136415," find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:136585,Modifiability,coupling,coupling,136585,"block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:167765,Modifiability,variab,variable,167765,"-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI);",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:167814,Modifiability,variab,variable,167814,"determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Defau",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:187189,Modifiability,coupling,coupling,187189,"ptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208900,Modifiability,adapt,adapted,208900,"F); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:216605,Modifiability,config,configurations,216605,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:5622,Performance,perform,performing,5622,"t: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined bas",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6476,Performance,optimiz,optimization,6476,"string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be he",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6787,Performance,cache,cache,6787," set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6905,Performance,cache,cacheing,6905,"cal MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6925,Performance,perform,perform,6925,"cal MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7146,Performance,cache,cache,7146,"ulate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7208,Performance,cache,cache,7208,"ulate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7449,Performance,cache,cache,7449,"er of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbita",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7662,Performance,cache,cache,7662,". Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7724,Performance,cache,cache,7724,". Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:7965,Performance,cache,cache,7965,"ault: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:8180,Performance,cache,cache,8180,"quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:8242,Performance,cache,cache,8242,"quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:8483,Performance,cache,cache,8483," Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:8702,Performance,cache,cache,8702,"ties in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:8764,Performance,cache,cache,8764,"ties in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9005,Performance,cache,cache,9005,"lt: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9312,Performance,cache,cache,9312," of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be h",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9374,Performance,cache,cache,9374," of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be h",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9615,Performance,cache,cache,9615,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9792,Performance,cache,cache,9792,"y large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10035,Performance,cache,cache,10035," (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10097,Performance,cache,cache,10097," (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10338,Performance,cache,cache,10338,"a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagona",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10431,Performance,cache,cache,10431,"alue of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10595,Performance,cache,cache,10595,"orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKIN",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10714,Performance,cache,cache,10714,"ing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10845,Performance,cache,cache,10845," DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root follo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:11001,Performance,cache,cached,11001,"s in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25154,Performance,cache,cache,25154,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion ve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25348,Performance,perform,performed,25348,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27242,Performance,perform,performance,27242,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27616,Performance,optimiz,optimization,27616,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:29867,Performance,optimiz,optimizations,29867,"tion scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:30034,Performance,optimiz,optimizations,30034,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31395,Performance,perform,performed,31395,"RREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:32592,Performance,optimiz,optimization,32592," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:38718,Performance,optimiz,optimization,38718,"d in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:38846,Performance,optimiz,optimizations,38846,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The val",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:38912,Performance,optimiz,optimizer,38912,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The val",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:39316,Performance,perform,performed,39316,"ether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword . The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be awar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:41429,Performance,perform,performed,41429,"ger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR —",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46819,Performance,perform,performs,46819,"the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46984,Performance,perform,performs,46984,"hat this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47162,Performance,perform,performs,47162,"o Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies larges",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47396,Performance,optimiz,optimization,47396,"for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47414,Performance,optimiz,optimization,47414,"rally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIM",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47538,Performance,optimiz,optimizations,47538," functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47604,Performance,optimiz,optimizer,47604," functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47905,Performance,optimiz,optimization,47905,"t applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:47951,Performance,optimiz,optimizations,47951,"the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48017,Performance,optimiz,optimizer,48017,"the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48249,Performance,optimiz,optimizations,48249,"_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. E",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48289,Performance,optimiz,optimizations,48289,"CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48355,Performance,optimiz,optimizer,48355,"CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48556,Performance,optimiz,optimization,48556,"ry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49238,Performance,optimiz,optimization,49238," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:49358,Performance,optimiz,optimized,49358,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:51071,Performance,perform,performs,51071,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:51209,Performance,perform,performs,51209,"isk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:52843,Performance,perform,performed,52843,"TIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not gua",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:54440,Performance,optimiz,optimizations,54440,"ber of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:55357,Performance,optimiz,optimization,55357,"Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56042,Performance,optimiz,optimizations,56042,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56108,Performance,optimiz,optimizer,56108,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:56378,Performance,perform,performs,56378,"d: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will termin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57350,Performance,optimiz,optimization,57350,"; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calcu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57653,Performance,optimiz,optimization,57653,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57705,Performance,optimiz,optimizations,57705,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:57771,Performance,optimiz,optimizer,57771,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:66968,Performance,perform,performed,66968," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:68682,Performance,perform,performed,68682,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:69919,Performance,perform,performed,69919,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:72089,Performance,perform,performed,72089,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82257,Performance,optimiz,optimization,82257," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82976,Performance,perform,performed,82976,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integral",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:83280,Performance,perform,performed,83280,"ubsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:87818,Performance,optimiz,optimization,87818,"hich states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that coupl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:88063,Performance,perform,perform,88063,"f greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPH",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:92185,Performance,perform,performed,92185,"s to 0.2 bohr each. Type: array; Default: No Default. CUTOFF (DFOCC); DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (FISAPT); FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:105152,Performance,perform,performed,105152,"fault: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:110840,Performance,perform,perform,110840,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:110971,Performance,perform,perform,110971," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:110988,Performance,optimiz,optimizations,110988," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111133,Performance,perform,perform,111133,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111264,Performance,perform,perform,111264,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111281,Performance,optimiz,optimizations,111281,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111520,Performance,perform,perform,111520,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111650,Performance,perform,perform,111650," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111667,Performance,optimiz,optimizations,111667," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111812,Performance,perform,perform,111812,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111942,Performance,perform,perform,111942,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:111959,Performance,optimiz,optimizations,111959,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:112595,Performance,optimiz,optimization,112595,"MP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:118980,Performance,perform,perform,118980,"; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:119086,Performance,perform,performs,119086,"e for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:119130,Performance,perform,performs,119130,"ult: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:120222,Performance,optimiz,optimization,120222,"_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:122652,Performance,optimiz,optimization,122652,"CI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:124867,Performance,optimiz,optimizations,124867,"t: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:125701,Performance,optimiz,optimization,125701,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root wi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:130071,Performance,optimiz,optimized,130071," The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:130345,Performance,optimiz,optimized,130345,"lse. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:130542,Performance,optimiz,optimization,130542,"lt. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are L",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:130896,Performance,optimiz,optimization,130896,"efault. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:133103,Performance,optimiz,optimization,133103,"hould be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:133542,Performance,optimiz,optimizations,133542,"IUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:134041,Performance,optimiz,optimization,134041,"to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:134216,Performance,optimiz,optimized,134216,"ITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:139165,Performance,perform,perform,139165,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INDEPENDENT_J_TYPE (SCF); SCF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:142937,Performance,perform,performance,142937,"r bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN (OPTKING); OPTKING — Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. INTS_TOLERANCE (CCDENSITY); CCDENSITY — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (CCSORT); CCSORT — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DCFT); DCFT (Expert) — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DFMP2); DFMP2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (FISAPT); FISAPT — Minimum absolute value below which integrals are neglected. For ISAPT, a variational collapse problem seems to occur for even rather modest values of this cutoff, when DF is used and when very close contacts occur. Therefore, we will be safe and turn it off (this does not affect performance overtly). Type: conv double; Default: 0.0. INTS_TOLERANCE (MRCC); MRCC — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SAPT); SAPT — Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORW",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:144333,Performance,perform,performed,144333,"there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KEEP_OEIFILE (CCSORT); CCSORT — Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_TEIFILE (CCSORT); CCSORT — Do retain the input two-electron integrals?. Type: boolean; Default: false. LEVEL_SHIFT (DFOCC); DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF); MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC); OCC — Level shift to aid convergence. Type: double; Default: 0.02. LINEAR (CCRESPONSE); CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC); DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC); OCC — The solver will be used for simultaneous linear equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:154922,Performance,perform,performed,154922," of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:155329,Performance,optimiz,optimization,155329," Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC);",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:161418,Performance,optimiz,optimization,161418,"iven excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:161524,Performance,optimiz,optimization,161524,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:163597,Performance,perform,perform,163597,"? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC); DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:164591,Performance,optimiz,optimized-,164591,"D (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:164709,Performance,optimiz,optimized-,164709,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUES",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:166766,Performance,perform,performed,166766,"set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:173392,Performance,perform,perform,173392," boolean; Default: false. OCC_ORBS_PRINT (OCC); OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA (CCSORT); CCSORT — Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176138,Performance,optimiz,optimization,176138,"gstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176549,Performance,optimiz,optimization,176549,"DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176732,Performance,optimiz,optimization,176732,"als. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:177073,Performance,perform,performed,177073,"ype: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LIN",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:177366,Performance,optimiz,optimize,177366,"edundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: stri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:177444,Performance,optimiz,optimize,177444,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:186766,Performance,perform,perform,186766,"ctron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY); CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:188070,Performance,perform,perform,188070,"slates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:188151,Performance,perform,perform,188151," — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194043,Performance,perform,performing,194043,"EFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:195094,Performance,optimiz,optimizations,195094,"al update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:196096,Performance,optimiz,optimized,196096,"rt the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:196314,Performance,optimiz,optimized,196314,"initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:204599,Performance,optimiz,optimized,204599,"olute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC); DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT); CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (TRANSQT2); TRA",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208475,Performance,perform,perform,208475,"SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondtion max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208589,Performance,perform,perform,208589,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-sc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:209845,Performance,perform,perform,209845,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum siz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:209920,Performance,perform,performed,209920,"ir energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will term",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:210038,Performance,perform,perform,210038,"e; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenv",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:211385,Performance,optimiz,optimization,211385,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only tran",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:3900,Safety,avoid,avoid,3900,"basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27682,Safety,safe,safe,27682,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:86378,Safety,safe,safety,86378,"g to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AD_STATES (CPHF); CPHF — Which states to save AD Matrices for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_AMPLITUDE_CUTOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. CIS_DOPDM_STATES (CPHF); CPHF — Which states to save AO difference OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:89075,Safety,safe,safety,89075,"rm. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS (GLOBALS); GLOBALS — List of orbital indices for which cube files are generated (1-based, for alpha, for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS); GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds ESP - Dt, ESP ORBITALS - Psi_a_N, Psi_b_N BASIS_FUNCTIONS - Phi_N LOL - LOLa, LOLb ELF - ELFa, ELFb. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:107252,Safety,avoid,avoid,107252," DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:124271,Safety,safe,safety,124271,"ype: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:128252,Safety,redund,redundant,128252," two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:142894,Safety,safe,safe,142894,"r bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN (OPTKING); OPTKING — Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. INTS_TOLERANCE (CCDENSITY); CCDENSITY — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (CCSORT); CCSORT — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DCFT); DCFT (Expert) — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DFMP2); DFMP2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (FISAPT); FISAPT — Minimum absolute value below which integrals are neglected. For ISAPT, a variational collapse problem seems to occur for even rather modest values of this cutoff, when DF is used and when very close contacts occur. Therefore, we will be safe and turn it off (this does not affect performance overtly). Type: conv double; Default: 0.0. INTS_TOLERANCE (MRCC); MRCC — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SAPT); SAPT — Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORW",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176362,Safety,redund,redundant,176362," in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:200199,Safety,redund,redundant,200199,"is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:202829,Safety,safe,safety,202829,"nd exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20DISP (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:203065,Safety,safe,safety,203065,"nd-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors wi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:212272,Safety,safe,safety,212272," for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:43630,Security,access,access,43630,"nally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword . Type: integer; Default: 0. CFOUR_FOCK (CFOUR); CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while AO (=1) con",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:52028,Security,access,access,52028," CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing perform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:5983,Testability,benchmark,benchmarking,5983,"Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:53868,Testability,test,tested,53868," more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:59760,Testability,log,logical,59760,"n case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:63836,Testability,test,testing,63836,"ng. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:101311,Testability,log,logarithmic,101311,"ython; Default: No Default. DFT_DISPERSION_PARAMETERS (SCF); SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Type: array; Default: No Default. DFT_FUNCTIONAL (SCF); SCF — The DFT combined functional name, e.g. B3LYP, or GEN to use a python reference to a custom functional specified by DFT_CUSTOM_FUNCTIONAL. Type: string; Default: No Default. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:161756,Testability,test,test,161756,"s. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the na",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194589,Testability,test,tested,194589,"gularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:212852,Testability,test,test,212852,"oolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:212941,Testability,test,test,212941,"ired for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow reg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:216252,Testability,test,testing,216252,"lt: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:18789,Usability,simpl,simply,18789," recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is the integ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:37341,Usability,clear,clearly,37341,"yword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR); CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:68899,Usability,simpl,simply,68899,"ual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:16284,Availability,toler,tolerance,16284,"; GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:23902,Availability,avail,available,23902,"arse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orb",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:23993,Availability,avail,available,23993,"in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) B",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:25506,Availability,avail,available,25506,"-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with con",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27001,Availability,avail,available,27001,": integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27263,Availability,avail,available,27263,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:30911,Availability,error,error,30911,"urrently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:31365,Availability,avail,available,31365,"RREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:31540,Availability,avail,available,31540,"here are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of compu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:31780,Availability,avail,available,31780,"ution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:35630,Availability,avail,available,35630,"ntrols whether non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. CFOUR_ESTATE_CONV (CFOUR); CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below with as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evalu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:38543,Availability,avail,available,38543,"0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the tre",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:41103,Availability,avail,available,41103,"tched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46038,Availability,avail,available,46038,"elation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49135,Availability,avail,available,49135,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:51664,Availability,avail,available,51664," CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing perform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:55928,Availability,avail,available,55928,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57417,Availability,error,error,57417,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:60411,Availability,toler,tolerant,60411,"tals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD ap",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:79681,Availability,avail,available,79681,"e with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:80362,Availability,avail,available,80362,"OUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:81050,Availability,avail,available,81050,": integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: A",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:83949,Availability,toler,tolerance,83949,"orce-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:84748,Availability,toler,tolerance,84748,"fied as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:84876,Availability,toler,tolerance,84876,"Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:87331,Availability,toler,tolerance,87331,"ult. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be speci",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:94786,Availability,error,error,94786,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:94805,Availability,error,error,94805,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:96228,Availability,avail,available,96228,"DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_GUESS (SCF); SCF — When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the cc-pVDZ-RI basis set (when available for all elements). Type: string; Possible Values: basis string; Default: FALSE. DF_BASIS_MCSCF (DETCI); DETCI — Auxiliary basis set for MCSCF density fitted ERI computations. This only effects the “Q” matrix in Helgaker’s language. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_MP2 (DFMP2); DFMP2 — Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAD (SCF); SCF (Expert) — Fitting SAD basis. Type: string; Possible Values: basis string; Default: SAD-FIT. DF_BASIS_SAPT (SAPT); SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set fo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:98203,Availability,down,down,98203,"CF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF); SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF); SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF); SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum err",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:99029,Availability,error,error,99029,"r of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Va",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:99174,Availability,error,error,99174,"y be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_BS_RADIUS_ALPHA (SCF); SCF — Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:102566,Availability,robust,robust,102566,"efault: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires CI vectors on disk, where is the maximum number of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104049,Availability,error,error,104049,"BALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104170,Availability,error,error,104170," use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104381,Availability,error,error,104381,"; CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104506,Availability,error,error,104506," use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104623,Availability,error,error,104623,"trapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104752,Availability,error,error,104752,"SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104873,Availability,error,error,104873,"n to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:104990,Availability,error,error,104990," 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:105386,Availability,error,error,105386,"ximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:105832,Availability,avail,available,105832,"S_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMR",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:106925,Availability,checkpoint,checkpoint,106925,"oolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WR",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:107977,Availability,checkpoint,checkpoints,107977,"onvenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG —",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:109194,Availability,toler,tolerances,109194," the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:117806,Availability,avail,available,117806,"nded Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:127742,Availability,checkpoint,checkpoint,127742,"st overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keyword",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:128252,Availability,redundant,redundant,128252," two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:134255,Availability,avail,available,134255,"refix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:159626,Availability,avail,available,159626,"F Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-3. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimumnumber of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors use",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:165962,Availability,avail,available,165962,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:166032,Availability,avail,available,166032,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:168395,Availability,avail,available,168395," be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: bool",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:173494,Availability,avail,available,173494,"e: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA (CCSORT); CCSORT — Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. OMP_N_THREAD (CPHF); CPHF — The maximum num",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:176362,Availability,redundant,redundant,176362," in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:178890,Availability,avail,available,178890,"onjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:189752,Availability,error,error,189752,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:189908,Availability,error,error,189908," discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:200199,Availability,redundant,redundant,200199,"is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:215611,Availability,avail,available,215611,"on will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TPDM_PRINT (DETCI); DETCI — Do print the two-particle density matrix? (Warning: large tensor). Type: boolean; Default: false. TRANSLATE_PSI4 (CFOUR); CFOUR — Do translate set Psi4 options to their cfour counterparts. Type: boolean; Default: true. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:2036,Deployability,update,updates,2036," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10993,Deployability,release,release,10993,"s in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:15514,Deployability,update,update,15514,"ouble; Default: 1.27. CC_RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:16803,Deployability,configurat,configurations,16803,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:21797,Deployability,release,release,21797,"orce fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:26504,Deployability,continuous,continuous,26504," and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:50058,Deployability,integrat,integration,50058,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:65644,Deployability,release,release,65644,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:65744,Deployability,release,release,65744,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:70114,Deployability,configurat,configurational,70114,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82098,Deployability,update,update,82098," Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82228,Deployability,update,updates,82228," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92492,Deployability,update,update,92492,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92534,Deployability,update,update,92534,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92572,Deployability,update,update,92572,"term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92890,Deployability,update,updates,92890,"ined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92923,Deployability,update,update,92923,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92961,Deployability,update,update,92961,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:93285,Deployability,update,updates,93285," damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:93318,Deployability,update,update,93318," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-ele",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:93356,Deployability,update,update,93356," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-ele",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:108683,Deployability,update,update,108683,"ace localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:136299,Deployability,update,update,136299," is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:137930,Deployability,update,update,137930,"EININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is deter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:138118,Deployability,update,update,138118," in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:138262,Deployability,update,update,138262," Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep bloc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:138513,Deployability,update,update,138513,"IMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:138742,Deployability,update,update,138742,"pe: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:178506,Deployability,update,update,178506,". Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:181427,Deployability,integrat,integration,181427,"separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:187803,Deployability,update,updates,187803," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:187828,Deployability,update,updated,187828," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:187927,Deployability,update,updated,187927,"ALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:189612,Deployability,update,updates,189612,"ce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:189716,Deployability,update,updates,189716,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:190616,Deployability,integrat,integration,190616,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:194062,Deployability,update,update,194062,"EFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:194244,Deployability,update,updates,194244,"lows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit consid",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:195311,Deployability,update,updates,195311,"sponse contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:213083,Deployability,integrat,integration,213083,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:213661,Deployability,update,update,213661,"; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC); OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:216000,Deployability,update,update,216000,"RICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:216605,Deployability,configurat,configurations,216605,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:220508,Deployability,update,updated,220508," string; Default: No Default. WFN_SYM (MCSCF); MCSCF — The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_SYM (PSIMRCC); PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_TYPE (DFOCC); DFOCC — Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. WFN_TYPE (OCC); OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITER_FILE_LABEL (GLOBALS); GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY); CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY); CCDENSITY (Expert) — Do require and to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC); PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY); CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA); CCLAMBDA — Do use zeta?. Type: boolean; Default: false. Previous topic; Appendices; Next topic; Keywords by Module. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:2056,Energy Efficiency,energy,energy,2056," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:2111,Energy Efficiency,efficient,efficient,2111,"E. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:4079,Energy Efficiency,reduce,reduces,4079,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:4133,Energy Efficiency,reduce,reduce,4133,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:4156,Energy Efficiency,energy,energy,4156,"s recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:15800,Energy Efficiency,energy,energy,15800,"maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:16393,Energy Efficiency,energy,energy,16393," string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handle",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:17757,Energy Efficiency,reduce,reduces,17757,"efault: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:17912,Energy Efficiency,energy,energy,17912,"S_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:17964,Energy Efficiency,energy,energy,17964,"S_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:19723,Energy Efficiency,reduce,reduced,19723,"UARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR); CFOUR — Specifies whether nonabelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:21608,Energy Efficiency,energy,energy,21608,"constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR); CFOUR — Specifies treatment of anharmonc effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form , where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form , which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:22604,Energy Efficiency,reduce,reduced,22604,"eration of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:23203,Energy Efficiency,reduce,reduced,23203,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:25433,Energy Efficiency,energy,energy,25433,"AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE method",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27986,Energy Efficiency,energy,energy,27986,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:28027,Energy Efficiency,energy,energy,28027,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:28216,Energy Efficiency,charge,charge,28216,"CSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:31698,Energy Efficiency,energy,energy,31698,"ype: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:32087,Energy Efficiency,energy,energy,32087,"ype: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:32559,Energy Efficiency,energy,energy,32559," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:33101,Energy Efficiency,energy,energy,33101,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:33148,Energy Efficiency,energy,energy,33148,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:36142,Energy Efficiency,energy,energy,36142,"ONV (CFOUR); CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below with as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:42496,Energy Efficiency,adapt,adapted,42496,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:42699,Energy Efficiency,energy,energy,42699,"entations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local syste",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:43258,Energy Efficiency,adapt,adapted,43258,"rational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49073,Energy Efficiency,efficient,efficient,49073,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49184,Energy Efficiency,energy,energy,49184,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49273,Energy Efficiency,energy,energy,49273," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:51584,Energy Efficiency,reduce,reduce,51584,"OUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:52142,Energy Efficiency,energy,energy,52142,"genvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:52178,Energy Efficiency,energy,energy,52178,"genvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:55866,Energy Efficiency,efficient,efficient,55866,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:58124,Energy Efficiency,energy,energy,58124,"ES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreduc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:58270,Energy Efficiency,energy,energy,58270,"ve eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the re",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:60204,Energy Efficiency,energy,energy,60204," no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:61329,Energy Efficiency,adapt,adapted,61329,"ution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:63180,Energy Efficiency,energy,energy,63180,"on. These are in the case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the and the spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blockes of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:64762,Energy Efficiency,energy,energy,64762,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:64773,Energy Efficiency,energy,energy,64773,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:73000,Energy Efficiency,energy,energy,73000,"nt matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolea",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:73399,Energy Efficiency,reduce,reduced,73399,"sibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR); CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:76616,Energy Efficiency,energy,energy,76616,"F iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole pertubation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword . (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR); CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR); CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR); CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:79111,Energy Efficiency,energy,energy,79111,"ng CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR); CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82821,Energy Efficiency,adapt,adapted,82821,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:88188,Energy Efficiency,charge,charge,88188,"; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:94666,Energy Efficiency,efficient,efficient,94666,"Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:94852,Energy Efficiency,energy,energy,94852,"ompute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DELETE_TEI (TRANSQT2); TRANSQT2 — Boolean to delete the SO-basis two-electron integral file after the transformation. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT Elst10 and Exch10 densit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:103081,Energy Efficiency,energy,energy,103081,"onalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires CI vectors on disk, where is the maximum number of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vector",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:103671,Energy Efficiency,energy,energy,103671,"of iterations and is the number of roots. Type: string; Possible Values: RSP, OLSEN, MITRUSHENKOV, DAVIDSON, SEM, SEMTEST; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:106326,Energy Efficiency,energy,energy,106326,"CFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:106638,Energy Efficiency,energy,energy,106638,"g DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:109340,Energy Efficiency,energy,energy,109340,"Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:109787,Energy Efficiency,reduce,reduced,109787,"ity RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noiseprefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:110916,Energy Efficiency,energy,energy,110916,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111209,Energy Efficiency,energy,energy,111209,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111595,Energy Efficiency,energy,energy,111595,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111887,Energy Efficiency,energy,energy,111887,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:112831,Energy Efficiency,energy,energy,112831,"orm spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:112991,Energy Efficiency,energy,energy,112991,"imizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:113198,Energy Efficiency,energy,energy,113198,"_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE an",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:113438,Energy Efficiency,energy,energy,113438," No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for ene",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:113635,Energy Efficiency,energy,energy,113635,"0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:113831,Energy Efficiency,energy,energy,113831,"aling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:114030,Energy Efficiency,energy,energy,114030,Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:114314,Energy Efficiency,energy,energy,114314,efault convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for dif,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:114411,Energy Efficiency,energy,energy,114411,ONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC p,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:114645,Energy Efficiency,energy,energy,114645,criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragmen,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:114845,Energy Efficiency,energy,energy,114845,"criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (E",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:115039,Energy Efficiency,energy,energy,115039,"e Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:115203,Energy Efficiency,energy,energy,115203,"ONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:115513,Energy Efficiency,energy,energy,115513,"on types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a dampin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:115855,Energy Efficiency,energy,energy,115855,"nergy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116099,Energy Efficiency,charge,charge,116099,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116118,Energy Efficiency,energy,energy,116118,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116248,Energy Efficiency,energy,energy,116248,"& Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116356,Energy Efficiency,energy,energy,116356,"EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinate",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:117159,Energy Efficiency,energy,energy,117159,"e: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:122903,Energy Efficiency,charge,charge,122903,"; DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:128800,Energy Efficiency,energy,energy,128800," boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:135162,Energy Efficiency,energy,energy,135162,"or the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:136672,Energy Efficiency,energy,energy,136672," could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:136868,Energy Efficiency,energy,energy,136868,"IZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:150474,Energy Efficiency,power,power,150474," augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP (CCSORT); CCSORT —. Type: boolean; Default: false. LOCAL_FILTER_SINGLES (CCEOM); CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA); CCLAMBDA — Do apply local filtering to single de-excitation ( amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE); CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_FILTER_SINGLES (CCSORT); CCSORT — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_GHOST (CCEOM); CCEOM — Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. LOCAL_IBO_CONDITION (FISAPT); FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT); FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT); FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT); FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT); FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT); FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF); SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY); CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM); CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:153327,Energy Efficiency,energy,energy,153327,"l pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA); CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE); CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PAIRDEF (CCSORT); CCSORT — Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:153720,Energy Efficiency,energy,energy,153720,"iable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:154877,Energy Efficiency,energy,energy,154877," of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:155804,Energy Efficiency,energy,energy,155804,"ons between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE ve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:157403,Energy Efficiency,energy,energy,157403,"le; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAXITER (CCENERGY); CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM); CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA); CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE); CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCFT); DCFT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maxmum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI (Expert) — Convergence algorithm to utilize. This is a flag for the future. Type: string; Possible Values: ONE_STEP, TWO_STEP; Default: TWO_STEP. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:158589,Energy Efficiency,energy,energy,158589,"TER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maxmum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI (Expert) — Convergence algorithm to utilize. This is a flag for the future. Type: string; Possible Values: ONE_STEP, TWO_STEP; Default: TWO_STEP. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:159386,Energy Efficiency,energy,energy,159386,"DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-4. MCSCF_SO (DETCI); DETCI (Expert) — Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation considerably. Type: boolean; Default: false. MCSCF_SO_START_E (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-3. MCSCF_SO_START_GRAD (DETCI); DETCI (Expert) — Start second-order orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-3. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimumnumber of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:161219,Energy Efficiency,energy,energy,161219,"nvolving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:165919,Energy Efficiency,energy,energy,165919,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:165951,Energy Efficiency,energy,energy,165951,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:166021,Energy Efficiency,energy,energy,166021,"2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_MET",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:166891,Energy Efficiency,energy,energy,166891,"e. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:168414,Energy Efficiency,energy,energy,168414," be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: bool",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:170485,Energy Efficiency,energy,energy,170485, dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY); CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM); CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC); ADC — The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. NO_DFILE (DETCI); DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_RESPONSE (SAPT); SAPT — Don’t solve the CPHF equations? Evaluate and instead of their response-including coupterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. NO_SINGLES (PSIMRCC); PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NO_TEI (TRANSQT2); TRANSQT2 (Expert) — Whether to only form the one electron integrals. Type: boolean; Default: false. NORM_TOLERANCE (ADC); ADC — The cutoff norm of residual vector in SEM step. Type: conv double; Default: 1e-6. NUM_AMPS_PRINT (ADC); ADC — Number of components of transition amplitudes printed. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY); CCENERGY — Number of important and amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM); CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA); CCLAMBDA — Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. NUM_AMPS_PRINT (CCRESPONSE); CCRESPONSE — Number of important CC amplitudes per excitation level to pr,MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:180416,Energy Efficiency,charge,charges,180416,"EPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE (OCC); OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC); DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC); OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS); GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE (GLOBALS); GLOBALS (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:188346,Energy Efficiency,energy,energy,188346,"S); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv doubl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:188459,Energy Efficiency,energy,energy,188459,"gets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in per",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:188598,Energy Efficiency,reduce,reduce,188598," QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:199766,Energy Efficiency,energy,energy,199766," the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:199861,Energy Efficiency,energy,energy,199861,"(THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (S",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:199956,Energy Efficiency,energy,energy,199956,"he full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:200995,Energy Efficiency,energy,energy,200995,"lean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_B, 3-TRIMER, 3-DIMER_AB, 3-DIMER_BC, 3-DIMER_AC, 3-MONOMER_A, 3-MONOMER_B, 3-MONOMER_C; Default: FALSE. SAPT0_E10 (SAPT); SAPT (Expert) — For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:208900,Energy Efficiency,adapt,adapted,208900,"F); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:209026,Energy Efficiency,energy,energy,209026," of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:210584,Energy Efficiency,energy,energy,210584,"ange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:213295,Energy Efficiency,energy,energy,213295,"ety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Defau",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6103,Integrability,rout,routines,6103,"DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6694,Integrability,depend,depending,6694," into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:28883,Integrability,contract,contraction,28883,"o Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:28988,Integrability,contract,contraction,28988,"our') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:29036,Integrability,contract,contraction,29036,"our') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46253,Integrability,contract,contracted,46253,"zen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46466,Integrability,contract,contracted,46466," the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geomet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46553,Integrability,contract,contracted,46553,"ey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:50058,Integrability,integrat,integration,50058,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57423,Integrability,message,message,57423,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:65811,Integrability,depend,dependent,65811,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:66387,Integrability,depend,dependent,66387,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:68775,Integrability,depend,depending,68775,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:72239,Integrability,message,message,72239," is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> U",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:121293,Integrability,rout,routine,121293,"SD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and bet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:131680,Integrability,depend,dependent,131680," Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GDMA_LIMIT (GDMA); GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:181427,Integrability,integrat,integration,181427,"separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:187418,Integrability,rout,routing,187418," all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boole",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:190616,Integrability,integrat,integration,190616,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:197327,Integrability,depend,depending,197327,"). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:197489,Integrability,depend,depending,197489,"FO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:199240,Integrability,depend,dependent,199240," No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:200659,Integrability,depend,dependencies,200659,"er. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:213083,Integrability,integrat,integration,213083,"s required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6330,Modifiability,extend,extended,6330," Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:16803,Modifiability,config,configurations,16803,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the integrals and significantly reduces the amount of disk storage. T",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:26176,Modifiability,enhance,enhance,26176,"n the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:39861,Modifiability,coupling,coupling,39861," N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword . The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole momen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:42496,Modifiability,adapt,adapted,42496,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:43258,Modifiability,adapt,adapted,43258,"rational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49331,Modifiability,variab,variables,49331,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56676,Modifiability,coupling,coupling,56676," TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56771,Modifiability,coupling,coupling,56771,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56818,Modifiability,coupling,coupling,56818,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56960,Modifiability,coupling,coupling,56960," available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:60577,Modifiability,variab,variable,60577,"the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:60627,Modifiability,variab,variable,60627,"ogram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The tw",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:61329,Modifiability,adapt,adapted,61329,"ution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:66101,Modifiability,coupling,coupling,66101,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:70114,Modifiability,config,configurational,70114,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:75930,Modifiability,coupling,coupling,75930,"ten troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR); CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR); CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR); CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole pertubation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword . (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82821,Modifiability,adapt,adapted,82821,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:88580,Modifiability,coupling,coupling,88580,"?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116659,Modifiability,extend,extended,116659,"ng type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, gues",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116789,Modifiability,extend,extended,116789,"es: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user inpu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:116915,Modifiability,extend,extended,116915,"oolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:125448,Modifiability,flexible,flexible,125448," Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: doub",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:127220,Modifiability,config,configruation,127220,"OW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:134742,Modifiability,coupling,coupling,134742,"l symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably elimin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:134900,Modifiability,coupling,coupling,134900," boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:136415,Modifiability,coupling,coupling,136415," find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:136585,Modifiability,coupling,coupling,136585,"block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:167765,Modifiability,variab,variable,167765,"-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI);",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:167814,Modifiability,variab,variable,167814,"determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Build natural orbitals? The orbtials will be reordered by occuption number. Type: boolean; Defau",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:187189,Modifiability,coupling,coupling,187189,"ptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:208900,Modifiability,adapt,adapted,208900,"F); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:216605,Modifiability,config,configurations,216605,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:5622,Performance,perform,performing,5622,"t: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined bas",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6476,Performance,optimiz,optimization,6476,"string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be he",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6787,Performance,cache,cache,6787," set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6905,Performance,cache,cacheing,6905,"cal MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:6925,Performance,perform,perform,6925,"cal MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7146,Performance,cache,cache,7146,"ulate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7208,Performance,cache,cache,7208,"ulate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retain",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7449,Performance,cache,cache,7449,"er of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbita",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7662,Performance,cache,cache,7662,". Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7724,Performance,cache,cache,7724,". Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:7965,Performance,cache,cache,7965,"ault: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:8180,Performance,cache,cache,8180,"quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:8242,Performance,cache,cache,8242,"quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:8483,Performance,cache,cache,8483," Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:8702,Performance,cache,cache,8702,"ties in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:8764,Performance,cache,cache,8764,"ties in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Typ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:9005,Performance,cache,cache,9005,"lt: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:9312,Performance,cache,cache,9312," of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be h",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:9374,Performance,cache,cache,9374," of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be h",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:9615,Performance,cache,cache,9615,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache u",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:9792,Performance,cache,cache,9792,"y large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10035,Performance,cache,cache,10035," (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10097,Performance,cache,cache,10097," (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10338,Performance,cache,cache,10338,"a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagona",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10431,Performance,cache,cache,10431,"alue of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10595,Performance,cache,cache,10595,"orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKIN",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10714,Performance,cache,cache,10714,"ing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:10845,Performance,cache,cache,10845," DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root follo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:11001,Performance,cache,cached,11001,"s in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:25154,Performance,cache,cache,25154,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion ve",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:25348,Performance,perform,performed,25348,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27242,Performance,perform,performance,27242,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27616,Performance,optimiz,optimization,27616,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:29867,Performance,optimiz,optimizations,29867,"tion scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:30034,Performance,optimiz,optimizations,30034,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:31395,Performance,perform,performed,31395,"RREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:32592,Performance,optimiz,optimization,32592," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:38718,Performance,optimiz,optimization,38718,"d in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:38846,Performance,optimiz,optimizations,38846,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The val",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:38912,Performance,optimiz,optimizer,38912,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The val",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:39316,Performance,perform,performed,39316,"ether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword . The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be awar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:41429,Performance,perform,performed,41429,"ger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR —",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46819,Performance,perform,performs,46819,"the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:46984,Performance,perform,performs,46984,"hat this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47162,Performance,perform,performs,47162,"o Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies larges",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47396,Performance,optimiz,optimization,47396,"for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimiz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47414,Performance,optimiz,optimization,47414,"rally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIM",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47538,Performance,optimiz,optimizations,47538," functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47604,Performance,optimiz,optimizer,47604," functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47905,Performance,optimiz,optimization,47905,"t applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:47951,Performance,optimiz,optimizations,47951,"the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:48017,Performance,optimiz,optimizer,48017,"the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:48249,Performance,optimiz,optimizations,48249,"_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. E",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:48289,Performance,optimiz,optimizations,48289,"CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:48355,Performance,optimiz,optimizer,48355,"CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:48556,Performance,optimiz,optimization,48556,"ry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49238,Performance,optimiz,optimization,49238," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:49358,Performance,optimiz,optimized,49358,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:51071,Performance,perform,performs,51071,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:51209,Performance,perform,performs,51209,"isk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:52843,Performance,perform,performed,52843,"TIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not gua",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:54440,Performance,optimiz,optimizations,54440,"ber of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:55357,Performance,optimiz,optimization,55357,"Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56042,Performance,optimiz,optimizations,56042,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56108,Performance,optimiz,optimizer,56108,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:56378,Performance,perform,performs,56378,"d: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will termin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57350,Performance,optimiz,optimization,57350,"; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calcu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57653,Performance,optimiz,optimization,57653,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57705,Performance,optimiz,optimizations,57705,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:57771,Performance,optimiz,optimizer,57771,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:66968,Performance,perform,performed,66968," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:68682,Performance,perform,performed,68682,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:69919,Performance,perform,performed,69919,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:72089,Performance,perform,performed,72089,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82257,Performance,optimiz,optimization,82257," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:82976,Performance,perform,performed,82976,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integral",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:83280,Performance,perform,performed,83280,"ubsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:87818,Performance,optimiz,optimization,87818,"hich states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that coupl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:88063,Performance,perform,perform,88063,"f greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPH",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:92185,Performance,perform,performed,92185,"s to 0.2 bohr each. Type: array; Default: No Default. CUTOFF (DFOCC); DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (FISAPT); FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:105152,Performance,perform,performed,105152,"fault: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of t",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:110840,Performance,perform,perform,110840,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:110971,Performance,perform,perform,110971," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:110988,Performance,optimiz,optimizations,110988," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111133,Performance,perform,perform,111133,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111264,Performance,perform,perform,111264,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111281,Performance,optimiz,optimizations,111281,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111520,Performance,perform,perform,111520,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111650,Performance,perform,perform,111650," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111667,Performance,optimiz,optimizations,111667," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111812,Performance,perform,perform,111812,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111942,Performance,perform,perform,111942,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:111959,Performance,optimiz,optimizations,111959,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:112595,Performance,optimiz,optimization,112595,"MP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:118980,Performance,perform,perform,118980,"; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:119086,Performance,perform,performs,119086,"e for EOM computations. Type: string; Default: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:119130,Performance,perform,performs,119130,"ult: RHF. EOM_REFERENCE (CCSORT); CCSORT — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with . If set to a value , performs scaling with . Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:120222,Performance,optimiz,optimization,120222,"_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between th",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:122652,Performance,optimiz,optimization,122652,"CI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:124867,Performance,optimiz,optimizations,124867,"t: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:125701,Performance,optimiz,optimization,125701,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root wi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:130071,Performance,optimiz,optimized,130071," The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:130345,Performance,optimiz,optimized,130345,"lse. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:130542,Performance,optimiz,optimization,130542,"lt. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are L",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:130896,Performance,optimiz,optimization,130896,"efault. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; De",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:133103,Performance,optimiz,optimization,133103,"hould be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:133542,Performance,optimiz,optimizations,133542,"IUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:134041,Performance,optimiz,optimization,134041,"to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:134216,Performance,optimiz,optimized,134216,"ITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:139165,Performance,perform,perform,139165,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INDEPENDENT_J_TYPE (SCF); SCF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:142937,Performance,perform,performance,142937,"r bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN (OPTKING); OPTKING — Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. INTS_TOLERANCE (CCDENSITY); CCDENSITY — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (CCSORT); CCSORT — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DCFT); DCFT (Expert) — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DFMP2); DFMP2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (FISAPT); FISAPT — Minimum absolute value below which integrals are neglected. For ISAPT, a variational collapse problem seems to occur for even rather modest values of this cutoff, when DF is used and when very close contacts occur. Therefore, we will be safe and turn it off (this does not affect performance overtly). Type: conv double; Default: 0.0. INTS_TOLERANCE (MRCC); MRCC — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SAPT); SAPT — Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORW",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:144333,Performance,perform,performed,144333,"there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KEEP_OEIFILE (CCSORT); CCSORT — Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_TEIFILE (CCSORT); CCSORT — Do retain the input two-electron integrals?. Type: boolean; Default: false. LEVEL_SHIFT (DFOCC); DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF); MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC); OCC — Level shift to aid convergence. Type: double; Default: 0.02. LINEAR (CCRESPONSE); CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC); DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC); OCC — The solver will be used for simultaneous linear equa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:154922,Performance,perform,performed,154922," of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:155329,Performance,optimiz,optimization,155329," Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC);",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:161418,Performance,optimiz,optimization,161418,"iven excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:161524,Performance,optimiz,optimization,161524,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:163597,Performance,perform,perform,163597,"? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC); DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:164591,Performance,optimiz,optimized-,164591,"D (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:164709,Performance,optimiz,optimized-,164709,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUES",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:166766,Performance,perform,performed,166766,"set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:173392,Performance,perform,perform,173392," boolean; Default: false. OCC_ORBS_PRINT (OCC); OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA (CCSORT); CCSORT — Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling f",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:176138,Performance,optimiz,optimization,176138,"gstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:176549,Performance,optimiz,optimization,176549,"DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:176732,Performance,optimiz,optimization,176732,"als. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:177073,Performance,perform,performed,177073,"ype: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LIN",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:177366,Performance,optimiz,optimize,177366,"edundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: stri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:177444,Performance,optimiz,optimize,177444,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:186766,Performance,perform,perform,186766,"ctron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY); CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:188070,Performance,perform,perform,188070,"slates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:188151,Performance,perform,perform,188151," — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:194043,Performance,perform,performing,194043,"EFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:195094,Performance,optimiz,optimizations,195094,"al update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:196096,Performance,optimiz,optimized,196096,"rt the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:196314,Performance,optimiz,optimized,196314,"initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:204599,Performance,optimiz,optimized,204599,"olute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC); DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT); CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (TRANSQT2); TRA",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:208475,Performance,perform,perform,208475,"SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondtion max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:208589,Performance,perform,perform,208589,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-sc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:209845,Performance,perform,perform,209845,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum siz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:209920,Performance,perform,performed,209920,"ir energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will term",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:210038,Performance,perform,perform,210038,"e; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenv",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:211385,Performance,optimiz,optimization,211385,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only tran",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:3900,Safety,avoid,avoid,3900,"basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCSORT); CCSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (<VV||VV>) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AO_BASIS (TRANSQT2); TRANSQT2 — The algorithm to use for the terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Ty",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:27682,Safety,safe,safe,27682,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:86378,Safety,safe,safety,86378,"g to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AD_STATES (CPHF); CPHF — Which states to save AD Matrices for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_AMPLITUDE_CUTOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. CIS_DOPDM_STATES (CPHF); CPHF — Which states to save AO difference OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:89075,Safety,safe,safety,89075,"rm. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS (GLOBALS); GLOBALS — List of orbital indices for which cube files are generated (1-based, for alpha, for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS); GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds ESP - Dt, ESP ORBITALS - Psi_a_N, Psi_b_N BASIS_FUNCTIONS - Phi_N LOL - LOLa, LOLb ELF - ELFa, ELFb. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:107252,Safety,avoid,avoid,107252," DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:124271,Safety,safe,safety,124271,"ype: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:128252,Safety,redund,redundant,128252," two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze al",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:142894,Safety,safe,safe,142894,"r bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN (OPTKING); OPTKING — Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. INTS_TOLERANCE (CCDENSITY); CCDENSITY — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (CCSORT); CCSORT — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DCFT); DCFT (Expert) — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (DFMP2); DFMP2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (FISAPT); FISAPT — Minimum absolute value below which integrals are neglected. For ISAPT, a variational collapse problem seems to occur for even rather modest values of this cutoff, when DF is used and when very close contacts occur. Therefore, we will be safe and turn it off (this does not affect performance overtly). Type: conv double; Default: 0.0. INTS_TOLERANCE (MRCC); MRCC — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SAPT); SAPT — Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORW",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:176362,Safety,redund,redundant,176362," in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_AVG (DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:200199,Safety,redund,redundant,200199,"is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:202829,Safety,safe,safety,202829,"nd exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20DISP (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:203065,Safety,safe,safety,203065,"nd-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors wi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:212272,Safety,safe,safety,212272," for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whet",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:43630,Security,access,access,43630,"nally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are splitted, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword . Type: integer; Default: 0. CFOUR_FOCK (CFOUR); CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while AO (=1) con",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:52028,Security,access,access,52028," CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing perform",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:5983,Testability,benchmark,benchmarking,5983,"Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:53868,Testability,test,tested,53868," more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:59760,Testability,log,logical,59760,"n case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:63836,Testability,test,testing,63836,"ng. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, wh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:101311,Testability,log,logarithmic,101311,"ython; Default: No Default. DFT_DISPERSION_PARAMETERS (SCF); SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Type: array; Default: No Default. DFT_FUNCTIONAL (SCF); SCF — The DFT combined functional name, e.g. B3LYP, or GEN to use a python reference to a custom functional specified by DFT_CUSTOM_FUNCTIONAL. Type: string; Default: No Default. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:161756,Testability,test,test,161756,"s. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the na",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:194589,Testability,test,tested,194589,"gularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:212852,Testability,test,test,212852,"oolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:212941,Testability,test,test,212941,"ired for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow reg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:216252,Testability,test,testing,216252,"lt: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:18789,Usability,simpl,simply,18789," recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is the integ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:37341,Usability,clear,clearly,37341,"yword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR); CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html:68899,Usability,simpl,simply,68899,"ual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SC",MatchSource.WIKI,psi4manual/1.0.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.0.0/autodoc_options_c_bymodule-1.html:730,Deployability,update,updated,730,"﻿. Keywords by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_options_c_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_options_c_bymodule-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_options_c_bymodule.html:730,Deployability,update,updated,730,"﻿. Keywords by Module — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCSORT; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; TRANSQT2. Previous topic; Keywords by Alpha; Next topic; GLOBALS. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_options_c_bymodule.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html:2324,Deployability,update,updated,2324,"314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest mass (in kg). Previous topic; PSIOH Intermediate Files; Next topic; Bibliography. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html:563,Energy Efficiency,meter,meters,563,﻿. Physical Constants — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest ma,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html:935,Energy Efficiency,joule,joule,935,﻿. Physical Constants — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest ma,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html:1069,Energy Efficiency,joule,joule,1069,ules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest mass (in kg). Previous topic; PSIOH Intermediate Files; Next topic; Biblio,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html:2324,Deployability,update,updated,2324,"314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest mass (in kg). Previous topic; PSIOH Intermediate Files; Next topic; Bibliography. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html:563,Energy Efficiency,meter,meters,563,﻿. Physical Constants — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest ma,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html:935,Energy Efficiency,joule,joule,935,﻿. Physical Constants — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest ma,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html:1069,Energy Efficiency,joule,joule,1069,ules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». Physical Constants¶. Physical constants in Psi4¶. Label; Value; Description. psi_h; 6.62606896E-34; The Planck constant (Js). psi_c; 2.99792458E8; Speed of light (ms$^{-1}$). psi_kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). psi_R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). psi_bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. psi_bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. psi_bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. psi_amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. psi_amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. psi_au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. psi_hartree2J; 4.359744E-18; Hartree to joule conversion factor. psi_hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. psi_cal2J; 4.184; Calorie to joule conversion factor. psi_dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. psi_dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. psi_dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. psi_c_au; 137.035999679; Speed of light in atomic units. psi_hartree2ev; 27.21138; Hartree to eV conversion factor. psi_hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. psi_hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. psi_hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. psi_hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. psi_kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. psi_e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). psi_na; 6.02214179E23; Avagadro’s number. psi_me; 9.10938215E-31; Electron rest mass (in kg). Previous topic; PSIOH Intermediate Files; Next topic; Biblio,MatchSource.WIKI,psi4manual/1.0.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases-1.html:182,Availability,avail,availability,182,﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in Psi4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ,MatchSource.WIKI,psi4manual/1.0.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases-1.html:126851,Deployability,update,updated,126851,";  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . ano0;  ; H;  ;  ;  ;  ; C;  ; O;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Basis Sets by Element ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases.html:182,Availability,avail,availability,182,﻿. <no title> — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Basis Sets by Element ». Basis set availability by element in Psi4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ,MatchSource.WIKI,psi4manual/1.0.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases.html:126851,Deployability,update,updated,126851,";  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-tz2p; 6D/10F; H;  ;  ;  ; B; C; N; O; F;  ;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzvp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . ano0;  ; H;  ;  ;  ;  ; C;  ; O;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Previous topic; Basis Sets by Element; Next topic; Auxiliary Basis Sets. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Basis Sets by Element ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:521,Availability,checkpoint,checkpoint,521,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:6284,Availability,error,error,6284,"ER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Previous topic; <no title>; Next topic; Physical Constants. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:7297,Deployability,update,updated,7297,"F_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Previous topic; <no title>; Next topic; Physical Constants. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:3980,Integrability,contract,contractions,3980,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:771,Modifiability,flexible,flexible,771,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:286,Performance,optimiz,optimization,286,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:521,Availability,checkpoint,checkpoint,521,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:6284,Availability,error,error,6284,"ER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Previous topic; <no title>; Next topic; Physical Constants. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:7297,Deployability,update,updated,7297,"F_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Previous topic; <no title>; Next topic; Physical Constants. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:3980,Integrability,contract,contractions,3980,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:771,Modifiability,flexible,flexible,771,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html:286,Performance,optimiz,optimization,286,"﻿. PSIOH Intermediate Files — Psi4 [1.0.0 6a9a71b] Docs. Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices ». PSIOH Intermediate Files¶. Auxiliary files in Psi4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PS",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:25179,Availability,avail,available,25179,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:26865,Availability,error,error,26865," :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 Vector object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(). psi4.get_global_option()¶; Python Library Documentation: built-in function get_global_option in module psi4; get_global_option(...). get_global_option( (str)arg1) -> object :. Given a string of a keyword name arg1, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; C++ signature :. N5boost6python3api6objectE get_global_option(Ss). psi4.get_global_option_list()¶; Python Library Documentation: built-in function get_global_option_list in module psi4; get_global_option_list(...). get_global_option_list() -> list :. Returns a list of all global options.; C++ signature :. N5boost6python4listE get_global_option_list(). psi4.get_gradient()¶; Python Library Documentation: built-in function get_gradient in module psi4; get_gradient(...). get_gradient() -> Matrix :. Returns the most recently computed gradient, as a N by 3 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(). psi4.get_input_directory()¶; Python Library Documentation: built-in function get_input_directory in module psi4; get_input_directory(...). get_input_directory() -> str :. Returns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:28434,Availability,error,error,28434,"by 3 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(). psi4.get_input_directory()¶; Python Library Documentation: built-in function get_input_directory in module psi4; get_input_directory(...). get_input_directory() -> str :. Returns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function get_legacy_molecule in module psi4; get_legacy_molecule(...). get_legacy_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(). psi4.get_local_option()¶; Python Library Documentation: built-in function get_local_option in module psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:28719,Availability,avail,available,28719,"urns the location of the input file.; C++ signature :. Ss get_input_directory(). psi4.get_legacy_molecule()¶; Python Library Documentation: built-in function get_legacy_molecule in module psi4; get_legacy_molecule(...). get_legacy_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(). psi4.get_local_option()¶; Python Library Documentation: built-in function get_local_option in module psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_var",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:29157,Availability,error,error,29157,"le psi4; get_local_option(...). get_local_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:29590,Availability,avail,available,29590,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:46521,Availability,avail,available,46521,"to double keyword arg2 scoped only to a specific module arg1.; C++ signature :. b set_local_option(Ss,Ss,d). set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :. Sets value arg3 to integer keyword arg2 scoped only to a specific module arg1.; C++ signature :. b set_local_option(Ss,Ss,i). set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool :. C++ signature :. b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]). psi4.set_local_option_python()¶; Python Library Documentation: built-in function set_local_option_python in module psi4; set_local_option_python(...). set_local_option_python( (str)arg1, (object)arg2) -> None :. Sets an option to a Python object, but scoped only to a single module.; C++ signature :. void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}). psi4.set_memory()¶; Python Library Documentation: built-in function set_memory in module psi4; set_memory(...). set_memory( (int)arg1) -> None :. Sets the memory available to Psi (in bytes).; C++ signature :. void set_memory(m). psi4.set_nthread()¶; Python Library Documentation: built-in function set_nthread in module psi4; set_nthread(...). set_nthread( (int)arg1) -> None :. Sets the number of threads to use in SMP parallel computations.; C++ signature :. void set_nthread(i). psi4.set_parent_symmetry()¶; Python Library Documentation: built-in function set_parent_symmetry in module psi4; set_parent_symmetry(...). set_parent_symmetry( (str)arg1) -> None :. Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; C++ signature :. void set_parent_symmetry(Ss). psi4.set_variable()¶; Python Library Documentation: built-in function set_variable in module psi4; set_variable(...). set_variable( (str)arg1, (float)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_variable(Ss,d). psi4.thermo()¶; Python Library Documentation: built-in function thermo in module p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:236112,Availability,fault,faulty,236112,"re :. void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.MoldenWriter.writeNO()¶; Python Library Documentation: method writeNO; writeNO(...) unbound psi4.MoldenWriter method. writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :. docstring; C++ signature :. void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). Molecule¶. psi4.Molecule.BFS()¶; Python Library Documentation: method BFS in module molutil; BFS(self) unbound psi4.Molecule method. Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:237540,Availability,toler,tolerance,237540,"ate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in fun",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:256405,Availability,toler,tolerance,256405,"up object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E). psi4.Molecule.units()¶; Python Library Documentation: property. Units (Angstrom or Bohr) used to define the geometry. psi4.Molecule.update_geometry()¶; Python Library Documentation: method update_geometry; update_geometry(...) unbound psi4.Molecule method. update_geometry( (Molecule)arg1) -> None :. Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; C++ signature :. void update_geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.x()¶; Python Library Documentation: method x; x(...) unbound psi4.Molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:542951,Availability,fault,faulty,542951,"rIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)ar",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544395,Availability,toler,tolerance,544395,"oid __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:557785,Availability,toler,tolerance,557785,"ame(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:682735,Availability,avail,available,682735,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:683890,Availability,error,error,683890,"ary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; ; C++ signature :; N5boost6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:684932,Availability,error,error,684932,"t6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variabl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685126,Availability,avail,available,685126,"ature :; N5boost6python4listE get_global_option_list(); ; get_gradient(...); get_gradient() -> Matrix :; Returns the most recently computed gradient, as a N by 3 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_gradient(); ; get_input_directory(...); get_input_directory() -> str :; Returns the location of the input file.; ; C++ signature :; Ss get_input_directory(); ; get_legacy_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_pref",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685477,Availability,error,error,685477,"y_molecule(...); get_legacy_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_legacy_molecule(); ; get_local_option(...); get_local_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:685815,Availability,avail,available,685815,"n( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the value associated with the keyword in the module options scope. Returns error if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_local_option(Ss,Ss); ; get_memory(...); get_memory() -> int :; Returns the amount of memory available to Psi (in bytes).; ; C++ signature :; m get_memory(); ; get_option(...); get_option( (str)arg1, (str)arg2) -> object :; Given a string of a keyword name *arg2* and a particular module *arg1*, returns the local value associated with the keyword if it's been set, else the global value if it's been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; ; C++ signature :; N5boost6python3api6objectE get_option(Ss,Ss); ; get_variable(...); get_variable( (str)arg1) -> float :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; d get_variable(Ss); ; get_variables(...); get_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_variables(); ; get_writer_file_prefix(...); get_writer_file_prefix( (str)arg1) -> str :; Returns the prefix to use for writing files for external programs.; ; C++ signature :; Ss get_writer_file_prefix(Ss); ; git_version(...); git_version() -> str :; Returns the git version of this copy of Psi.; ; C++ signature :; PKc git_version(); ; has_global_option_changed(...); has_global_option_changed( (str)arg1) -> bool :; Returns boolean for whether the keyword *arg1* has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, this returns whether the option has been touched in the global scope by the user.; ; C++ signature :; b has_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:697838,Availability,avail,available,697838," *arg3* to string keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,Ss); ; set_local_option( (str)arg1, (str)arg2, (float)arg3) -> bool :; Sets value *arg3* to double keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,d); ; set_local_option( (str)arg1, (str)arg2, (int)arg3) -> bool :; Sets value *arg3* to integer keyword *arg2* scoped only to a specific module *arg1*.; ; C++ signature :; b set_local_option(Ss,Ss,i); ; set_local_option( (str)arg1, (str)arg2, (list)arg3 [, (object)arg4]) -> bool :; ; C++ signature :; b set_local_option(Ss,Ss,N5boost6python4listE [,PN3psi8DataTypeE]); ; set_local_option_python(...); set_local_option_python( (str)arg1, (object)arg2) -> None :; Sets an option to a Python object, but scoped only to a single module.; ; C++ signature :; void set_local_option_python(Ss,N5boost6python3api6objectE {lvalue}); ; set_memory(...); set_memory( (int)arg1) -> None :; Sets the memory available to Psi (in bytes).; ; C++ signature :; void set_memory(m); ; set_nthread(...); set_nthread( (int)arg1) -> None :; Sets the number of threads to use in SMP parallel computations.; ; C++ signature :; void set_nthread(i); ; set_parent_symmetry(...); set_parent_symmetry( (str)arg1) -> None :; Sets the symmetry of the 'parent' (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; ; C++ signature :; void set_parent_symmetry(Ss); ; set_variable(...); set_variable( (str)arg1, (float)arg2) -> None :; Sets a PSI variable, by name.; ; C++ signature :; void set_variable(Ss,d); ; thermo(...); thermo( (Wavefunction)arg1, (Vector)arg2) -> float :; Computes thermodynamic data.; ; C++ signature :; d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE); ; transqt2(...); transqt2( (Wavefunction)arg1) -> float :; Runs the (deprecated) transformation code.; ; C++ signature :; d transqt2(N5boost10shared_pt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:19250,Deployability,configurat,configuration,19250,"oid clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:116380,Deployability,update,update,116380,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.DiagonalizeOrder.real()¶; Python Library Documentation: get",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:116395,Deployability,update,update,116395,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.DiagonalizeOrder.real()¶; Python Library Documentation: getset descriptor __builtin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:119780,Deployability,update,update,119780,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Dimension¶. psi4.Dimension.from_list()¶; Python Library Documentation: method _dimension_from_list in module p4util.numpy_helper; _dimension_from_list(self, dims, name=’New Dimension’) method of Boost.Python.class instance. Builds a psi4.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:119795,Deployability,update,update,119795,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Dimension¶. psi4.Dimension.from_list()¶; Python Library Documentation: method _dimension_from_list in module p4util.numpy_helper; _dimension_from_list(self, dims, name=’New Dimension’) method of Boost.Python.class instance. Builds a psi4.Dimension object from a ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:161986,Deployability,update,update,161986,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.GeometryUnits.real()¶; Python Library Documentation: getset de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:162001,Deployability,update,update,162001,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.GeometryUnits.real()¶; Python Library Documentation: getset descriptor __builtin__.int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:165377,Deployability,update,update,165377,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. HF¶. psi4.HF.Ca()¶; Python Library Documentation: method Ca; Ca(...) unbound psi4.HF method. Ca( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}). psi4.HF.C",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:165392,Deployability,update,update,165392,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. HF¶. psi4.HF.Ca()¶; Python Library Documentation: method Ca; Ca(...) unbound psi4.HF method. Ca( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}). psi4.HF.Ca_subset()¶; Python Libr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:292596,Deployability,update,update,292596,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.PsiReturnType.real()¶; Python Library Documentation: getset de",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:292611,Deployability,update,update,292611,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.numerator()¶; Python Library Documentation: getset descriptor __builtin__.int.numerator; numerator. the numerator of a rational number in lowest terms. psi4.PsiReturnType.real()¶; Python Library Documentation: getset descriptor __builtin__.int",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:295987,Deployability,update,update,295987,"ll items from D. copy(...). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Psi_Numpy_Interface¶. QuadrupoleInt¶. psi4.QuadrupoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis1()¶; Python Library Documentation: property. The basis set on center one. psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:296002,Deployability,update,update,296002,".). D.copy() -> a shallow copy of D. fromkeys(...). dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get(...). D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key(...). D.has_key(k) -> True if D has a key k, else False. items(...). D.items() -> list of D’s (key, value) pairs, as 2-tuples. iteritems(...). D.iteritems() -> an iterator over the (key, value) items of D. iterkeys(...). D.iterkeys() -> an iterator over the keys of D. itervalues(...). D.itervalues() -> an iterator over the values of D. keys(...). D.keys() -> list of D’s keys. pop(...). D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised. popitem(...). D.popitem() -> (k, v), remove and return some (key, value) pair as a. 2-tuple; but raise KeyError if D is empty. setdefault(...). D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D. update(...). D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a .keys() method, does: for k in E: D[k] = E[k]. If E present and lacks .keys() method, does: for (k, v) in E: D[k] = v. In either case, this is followed by: for k in F: D[k] = F[k]. values(...). D.values() -> list of D’s values. viewitems(...). D.viewitems() -> a set-like object providing a view on D’s items. viewkeys(...). D.viewkeys() -> a set-like object providing a view on D’s keys. viewvalues(...). D.viewvalues() -> an object providing a view on D’s values. ———————————————————————-. Data and other attributes defined here:. __hash__ = None. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. Psi_Numpy_Interface¶. QuadrupoleInt¶. psi4.QuadrupoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis1()¶; Python Library Documentation: property. The basis set on center one. psi4.QuadrupoleInt.basis2()",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:678466,Deployability,configurat,configuration,678466,":; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:700778,Deployability,update,updated,700778," ; version(...); version() -> str :; Returns the version ID of this copy of Psi.; ; C++ signature :; PKc version(). DATA; Angstrom = psi4.GeometryUnits.Angstrom; Ascending = psi4.DiagonalizeOrder.Ascending; Balk = psi4.PsiReturnType.Balk; Bohr = psi4.GeometryUnits.Bohr; Descending = psi4.DiagonalizeOrder.Descending; EndLoop = psi4.PsiReturnType.EndLoop; Failure = psi4.PsiReturnType.Failure; Success = psi4.PsiReturnType.Success. Table Of Contents. psi4: Linking C++ and Python; psi4; AOShellCombinationsIterator; AngularMomentumInt; BasisSet; BasisSetParser; BoysLocalizer; CIVector; CIWavefunction; CUHF; CdSalcList; CorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; DiagonalizeOrder; Dimension; DipoleInt; Dispersion; DoublePyBuffer; EFP; ERI; ElectricFieldInt; ElectrostaticInt; Environment; ErfComplementERI; ErfERI; ExternalPotential; F12; F12DoubleCommutator; F12G12; F12Squared; FCHKWriter; FittedSlaterCorrelationFactor; FittingMetric; Functional; Gaussian94BasisSetParser; GaussianShell; GeometryUnits; HF; IO; IOManager; IntVector; IntegralFactory; JK; KineticInt; LaplaceDenominator; LibParallelHelper; Localizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleInt; MultipoleSymmetry; NBOWriter; NablaInt; OEProp; OneBodyAOInt; OrbitalSpace; OverlapInt; PMLocalizer; PetiteList; PointGroup; PotentialInt; Process; PseudoTrial; PseudospectralInt; PsiReturnType; Psi_Numpy_Interface; QuadrupoleInt; RHF; ROHF; SOBasisSet; SuperFunctional; SymmetryOperation; ThreeCenterOverlapInt; TracelessQuadrupoleInt; TwoBodyAOInt; TwoElectronInt; Vector; Vector3; View; Wavefunction; matrix_vector; vector_of_doubles; Full Docs Output. Previous topic; Python Driver. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:15704,Energy Efficiency,energy,energy,15704,"arg2) -> None :. docstring; C++ signature :. void benchmark_disk(i,d). psi4.benchmark_integrals()¶; Python Library Documentation: built-in function benchmark_integrals in module psi4; benchmark_integrals(...). benchmark_integrals( (int)arg1, (float)arg2) -> None :. docstring; C++ signature :. void benchmark_integrals(i,d). psi4.benchmark_math()¶; Python Library Documentation: built-in function benchmark_math in module psi4; benchmark_math(...). benchmark_math( (float)arg1) -> None :. docstring; C++ signature :. void benchmark_math(d). psi4.ccdensity()¶; Python Library Documentation: built-in function ccdensity in module psi4; ccdensity(...). ccdensity( (Wavefunction)arg1) -> float :. Runs the code to compute coupled cluster density matrices.; C++ signature :. d ccdensity(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ccenergy()¶; Python Library Documentation: built-in function ccenergy in module psi4; ccenergy(...). ccenergy( (Wavefunction)arg1) -> Wavefunction :. Runs the coupled cluster energy code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE ccenergy(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cceom()¶; Python Library Documentation: built-in function cceom in module psi4; cceom(...). cceom( (Wavefunction)arg1) -> float :. Runs the equation of motion coupled cluster code, for excited states.; C++ signature :. d cceom(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cchbar()¶; Python Library Documentation: built-in function cchbar in module psi4; cchbar(...). cchbar( (Wavefunction)arg1) -> None :. Runs the code to generate the similarity transformed Hamiltonian.; C++ signature :. void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cclambda()¶; Python Library Documentation: built-in function cclambda in module psi4; cclambda(...). cclambda( (Wavefunction)arg1) -> Wavefunction :. Runs the coupled cluster lambda equations code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12Wavefunc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:17723,Energy Efficiency,energy,energy,17723,"response()¶; Python Library Documentation: built-in function ccresponse in module psi4; ccresponse(...). ccresponse( (Wavefunction)arg1) -> float :. Runs the coupled cluster response theory code.; C++ signature :. d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ccsort()¶; Python Library Documentation: built-in function ccsort in module psi4; ccsort(...). ccsort() -> float :. Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; C++ signature :. d ccsort(). psi4.cctransort()¶; Python Library Documentation: built-in function cctransort in module psi4; cctransort(...). cctransort( (Wavefunction)arg1) -> None :. Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; C++ signature :. void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cctriples()¶; Python Library Documentation: built-in function cctriples in module psi4; cctriples(...). cctriples( (Wavefunction)arg1) -> float :. Runs the coupled cluster (T) energy code.; C++ signature :. d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.clean()¶; Python Library Documentation: built-in function clean in module psi4; clean(...). clean() -> None :. Function to remove scratch files. Call between independent jobs.; C++ signature :. void clean(). psi4.clean_variables()¶; Python Library Documentation: built-in function clean_variables in module psi4; clean_variables(...). clean_variables() -> None :. Empties all PSI variables that have set internally.; C++ signature :. void clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ sig",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:21313,Energy Efficiency,energy,energy,21313,"atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d). psi4.dmrg()¶; Python Library Documentation: built-in function dmrg in module psi4; dmrg(...). dmrg( (Wavefunction)arg1) -> Wavefunction :. Runs the DMRG code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.efp_init()¶; Python Library Documentation: built-in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(). psi4.efp_set_options()¶; Python Library Documentation: built-in function efp_set_options in module psi4; efp_set_options(...). efp_set_options() -> None :. Set EFP options from environment options object.; C++ signature :. void efp_set_options(). psi4.fd_1_0()¶; Python Library Documentation: built-in function fd_1_0 in module psi4; fd_1_0(...). fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :. Performs a finite difference gradient computation, from energy points.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:21679,Energy Efficiency,energy,energy,21679,"in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(). psi4.efp_set_options()¶; Python Library Documentation: built-in function efp_set_options in module psi4; efp_set_options(...). efp_set_options() -> None :. Set EFP options from environment options object.; C++ signature :. void efp_set_options(). psi4.fd_1_0()¶; Python Library Documentation: built-in function fd_1_0 in module psi4; fd_1_0(...). fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :. Performs a finite difference gradient computation, from energy points.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Document",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:22479,Energy Efficiency,energy,energy,22479,"istE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Documentation: built-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:22896,Energy Efficiency,energy,energy,22896,"rary Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in function fd_geoms_1_0 in module psi4; fd_geoms_1_0(...). fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :. Gets list of displacements needed for a finite difference gradient computation, from energy points.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.fd_geoms_freq_0()¶; Python Library Documentation: built-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:23686,Energy Efficiency,adapt,adapted,23686,"lt-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:24187,Energy Efficiency,energy,energy,24187,"...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables ava",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:25833,Energy Efficiency,charge,charges,25833,"10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 Vector object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(). psi4.get_global_option()¶; Python Library Documentation: built-in function get_global_option in module psi4; get_global_option(...). get_global_option( (str)arg1) -> object :. Given a string of a keyword name arg1, returns the value associated with the ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:40237,Energy Efficiency,adapt,adapted,40237,"ocal_option_changed in module psi4; revoke_local_option_changed(...). revoke_local_option_changed( (str)arg1, (str)arg2) -> None :. Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; C++ signature :. void revoke_local_option_changed(Ss,Ss). psi4.run_gdma()¶; Python Library Documentation: built-in function run_gdma in module psi4; run_gdma(...). run_gdma( (Wavefunction)arg1, (str)arg2) -> float :. Runs the GDMA code.; C++ signature :. d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss). psi4.sapt()¶; Python Library Documentation: built-in function sapt in module psi4; sapt(...). sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :. Runs the symmetry adapted perturbation theory code.; C++ signature :. d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scatter()¶; Python Library Documentation: built-in function scatter in module psi4; scatter(...). scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :. New Scatter function.; C++ signature :. void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE). psi4.scf()¶; Python Library Documentation: built-in function scf in module psi4; scf(...). scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :. Runs the SCF code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object). psi4.scfgrad()¶; Python Library Documentation: built-in function scfgrad in module psi4; scfgrad(...). scfgrad( (Wavefunction)arg1) -> Matrix :. Run scfgrad, w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:69753,Energy Efficiency,energy,energy,69753,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:69801,Energy Efficiency,energy,energy,69801,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:69809,Energy Efficiency,energy,energy,69809,"d. compute_mcscf( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void compute_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:69857,Energy Efficiency,energy,energy,69857,"_mcscf(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue})",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:69927,Energy Efficiency,energy,energy,69927,"eep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CIWavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CIWavefunction.diag_h()¶; Python Library Documentation: method diag_h; diag_h(...) unbound psi4.CIWavefunction method. diag_h( (CIWavefunction)arg1) -> None :. docstring; C++ signature :. void diag_h(N3psi5detci14CIWavefunctionE {lvalue}). psi4.CIWavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CIWavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CIWavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CIWavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CIWavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CIWavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CIWavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CIWavefunction.epsilon_b_subset()¶; Python Library Documentati",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:91289,Energy Efficiency,energy,energy,91289,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:91337,Energy Efficiency,energy,energy,91337,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:91345,Energy Efficiency,energy,energy,91345,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:91383,Energy Efficiency,energy,energy,91383,"e :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_b_subset()¶; Python Library Documentatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:91453,Energy Efficiency,energy,energy,91453,"ute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.CUHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.CUHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.CUHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.CUHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.CUHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.CUHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.CUHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.CUHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.CUHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.CUHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.CUHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.CUHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.CUHF m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:171513,Energy Efficiency,energy,energy,171513,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:171561,Energy Efficiency,energy,energy,171561,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:171569,Energy Efficiency,energy,energy,171569,"unbound psi4.HF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:171605,Energy Efficiency,energy,energy,171605,"ng; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_b_subset()¶; Python Library Documentation: method epsi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:171675,Energy Efficiency,energy,energy,171675,". psi4.HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.HF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.HF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.HF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.HF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.HF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.HF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.HF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.HF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.HF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.HF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.HF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.HF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.HF method. epsilon_b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:210077,Energy Efficiency,power,power,210077,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:210124,Energy Efficiency,power,power,210124,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:210131,Energy Efficiency,power,power,210131,"i4.Matrix method. load_mpqc( (Matrix)arg1, (str)arg2) -> None :. docstring; C++ signature :. void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:210170,Energy Efficiency,power,power,210170,"void load_mpqc(N3psi6MatrixE {lvalue},Ss). psi4.Matrix.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.rms()¶; Python Library Documentation",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:210278,Energy Efficiency,power,power,210278,"tation: method name; name(...) unbound psi4.Matrix method. name( (Matrix)arg1) -> str :. docstring; C++ signature :. Ss name(N3psi6MatrixE {lvalue}). psi4.Matrix.nirrep()¶; Python Library Documentation: method nirrep; nirrep(...) unbound psi4.Matrix method. nirrep( (Matrix)arg1) -> int :. docstring; C++ signature :. i nirrep(N3psi6MatrixE {lvalue}). psi4.Matrix.np()¶; Python Library Documentation: property. psi4.Matrix.partial_cholesky_factorize()¶; Python Library Documentation: method partial_cholesky_factorize; partial_cholesky_factorize(...) unbound psi4.Matrix method. partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b). psi4.Matrix.power()¶; Python Library Documentation: method power; power(...) unbound psi4.Matrix method. power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d). psi4.Matrix.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.Matrix method. print_out( (Matrix)arg1) -> None :. docstring; C++ signature :. void print_out(N3psi6MatrixE {lvalue}). psi4.Matrix.project_out()¶; Python Library Documentation: method project_out; project_out(...) unbound psi4.Matrix method. project_out( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}). psi4.Matrix.remove_symmetry()¶; Python Library Documentation: method remove_symmetry; remove_symmetry(...) unbound psi4.Matrix method. remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.rms()¶; Python Library Documentation: method rms; rms(...) unbound psi4.Matrix method. rms( (Matrix)arg1) -> float :. doc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:236352,Energy Efficiency,charge,charge,236352,"orEEE). psi4.MoldenWriter.writeNO()¶; Python Library Documentation: method writeNO; writeNO(...) unbound psi4.MoldenWriter method. writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :. docstring; C++ signature :. void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE). Molecule¶. psi4.Molecule.BFS()¶; Python Library Documentation: method BFS in module molutil; BFS(self) unbound psi4.Molecule method. Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:237139,Energy Efficiency,charge,charge,237139," and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. psi4.Molecule.Z()¶; Python Library Documentation: method Z; Z(...) unbound psi4.Molecule method. Z( (Molecule)arg1, (int)arg2) -> float :. Nuclear charge of atom; C++ signature :. d Z(N3psi8MoleculeE {lvalue},i). psi4.Molecule.activate_all_fragments()¶; Python Library Documentation: method activate_all_fragments; activate_all_fragments(...) unbound psi4.Molecule method. activate_all_fragments( (Molecule)arg1) -> None :. Sets all fragments in the molecule to be active; C++ signature :. void activate_all_fragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.add_atom()¶; Python Library Documentation: method add_atom; add_atom(...) unbound psi4.Molecule method. add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:237961,Energy Efficiency,charge,charge,237961,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:238009,Energy Efficiency,charge,charge,238009,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:238017,Energy Efficiency,charge,charge,238017,"> None :. Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:238059,Energy Efficiency,charge,charge,238059,"n Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:238111,Energy Efficiency,charge,charge,238111,"g6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a string reexpressing in input format the curr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:238146,Energy Efficiency,charge,charge,238146," and lineno arg9 (optional); C++ signature :. void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i). psi4.Molecule.atom_at_position()¶; Python Library Documentation: method atom_at_position; atom_at_position(...) unbound psi4.Molecule method. atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :. Tests to see if an atom is at the position arg2 with a given tolerance arg3; C++ signature :. i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d). psi4.Molecule.center_of_mass()¶; Python Library Documentation: method center_of_mass; center_of_mass(...) unbound psi4.Molecule method. center_of_mass( (Molecule)arg1) -> Vector3 :. Computes center of mass of molecule (does not translate molecule); C++ signature :. N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}). psi4.Molecule.charge()¶; Python Library Documentation: method charge; charge(...) unbound psi4.Molecule method. charge( (Molecule)arg1, (int)arg2) -> float :. Gets charge of atom; C++ signature :. d charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.clone()¶; Python Library Documentation: method clone; clone(...) unbound psi4.Molecule method. clone( (Molecule)arg1) -> Molecule :. Returns a new Molecule identical to arg1; C++ signature :. N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}). psi4.Molecule.create_molecule_from_string()¶; Python Library Documentation: built-in function create_molecule_from_string; create_molecule_from_string(...). create_molecule_from_string( (str)arg1) -> Molecule :. Returns a new Molecule with member data from the geometry string arg1 in psi4 format; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss). psi4.Molecule.create_psi4_string_from_molecule()¶; Python Library Documentation: method create_psi4_string_from_molecule; create_psi4_string_from_molecule(...) unbound psi4.Molecule method. create_psi4_string_from_molecule( (Molecule)arg1) -> str :. Gets a string reexpressing in input format the current states of the molecule; C++ signat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:244569,Energy Efficiency,charge,charge,244569," Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Documentation: method molecular_charge; molecular_charge(...) unbound psi4.Molecule method. molecular_charge( (Molecule)arg1) -> int :. Gets the molecular charge; C++ signature :. i molecular_charge(N3psi8MoleculeE {lvalue}). psi4.Molecule.move_to_com()¶; Python Library Documentation: method move_to_com; move_to_com(...) unbound psi4.Molecule method. move_to_com( (Molecule)arg1) -> None :. Moves molecule to center of mass; C++ signature :. void move_to_com(N3psi8MoleculeE {lvalue}). psi4.Molecule.multiplicity()¶; Python Library Documentation: method multiplicity; multiplicity(...) unbound psi4.Molecule method. multiplicity( (Molecule)arg1) -> int :. Gets the multiplicity (defined as 2Ms + 1); C++ signature :. i multiplicity(N3psi8MoleculeE {lvalue}). psi4.Molecule.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Molecule method. name( (Molecule)arg1) -> str :. Gets molecule name; C++ signature :. Ss name(N3psi8MoleculeE {lvalue}). psi4.Molecule.natom()¶; Python Library Documentation: method natom; natom(...) unbound psi4.Molecule method. natom( (Molecule)arg1) -> int :. Number of real atoms; C++ signature :. i nat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:246113,Energy Efficiency,energy,energy,246113," 1); C++ signature :. i multiplicity(N3psi8MoleculeE {lvalue}). psi4.Molecule.name()¶; Python Library Documentation: method name; name(...) unbound psi4.Molecule method. name( (Molecule)arg1) -> str :. Gets molecule name; C++ signature :. Ss name(N3psi8MoleculeE {lvalue}). psi4.Molecule.natom()¶; Python Library Documentation: method natom; natom(...) unbound psi4.Molecule method. natom( (Molecule)arg1) -> int :. Number of real atoms; C++ signature :. i natom(N3psi8MoleculeE {lvalue}). psi4.Molecule.nfragments()¶; Python Library Documentation: method nfragments; nfragments(...) unbound psi4.Molecule method. nfragments( (Molecule)arg1) -> int :. Gets the number of fragments in the molecule; C++ signature :. i nfragments(N3psi8MoleculeE {lvalue}). psi4.Molecule.nuclear_repulsion_energy()¶; Python Library Documentation: method nuclear_repulsion_energy; nuclear_repulsion_energy(...) unbound psi4.Molecule method. nuclear_repulsion_energy( (Molecule)arg1) -> float :. Computes nuclear repulsion energy; C++ signature :. d nuclear_repulsion_energy(N3psi8MoleculeE {lvalue}). psi4.Molecule.point_group()¶; Python Library Documentation: method point_group; point_group(...) unbound psi4.Molecule method. point_group( (Molecule)arg1) -> PointGroup :. Returns the current point group object; C++ signature :. N5boost10shared_ptrIN3psi10PointGroupEEE point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.print_cluster()¶; Python Library Documentation: method print_cluster; print_cluster(...) unbound psi4.Molecule method. print_cluster( (Molecule)arg1) -> None :. Prints the molecule in Cartesians in input units adding fragment separators; C++ signature :. void print_cluster(N3psi8MoleculeE {lvalue}). psi4.Molecule.print_in_input_format()¶; Python Library Documentation: method print_in_input_format; print_in_input_format(...) unbound psi4.Molecule method. print_in_input_format( (Molecule)arg1) -> None :. Prints the molecule as Cartesian or ZMatrix entries, just as inputted.; C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:249657,Energy Efficiency,energy,energy,249657,"t_group(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.rotational_constants()¶; Python Library Documentation: method rotational_constants; rotational_constants(...) unbound psi4.Molecule method. rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :. Prints the rotational constants of the molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Libra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:249722,Energy Efficiency,energy,energy,249722,"t_group(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.rotational_constants()¶; Python Library Documentation: method rotational_constants; rotational_constants(...) unbound psi4.Molecule method. rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :. Prints the rotational constants of the molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Libra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:254515,Energy Efficiency,charge,charge,254515,"arg1, (int)arg2) -> None :. Sets the specified fragment arg2 to be Ghost; C++ signature :. void set_ghost_fragment(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_ghost_fragments()¶; Python Library Documentation: method set_ghost_fragments; set_ghost_fragments(...) unbound psi4.Molecule method. set_ghost_fragments( (Molecule)arg1, (list)arg2) -> None :. Sets the specified list arg2 of fragments to be Ghost; C++ signature :. void set_ghost_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE). psi4.Molecule.set_mass()¶; Python Library Documentation: method set_mass; set_mass(...) unbound psi4.Molecule method. set_mass( (Molecule)arg1, (int)arg2, (float)arg3) -> None :. Gets mass of atom arg2; C++ signature :. void set_mass(N3psi8MoleculeE {lvalue},i,d). psi4.Molecule.set_molecular_charge()¶; Python Library Documentation: method set_molecular_charge; set_molecular_charge(...) unbound psi4.Molecule method. set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :. Sets the molecular charge; C++ signature :. void set_molecular_charge(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_multiplicity()¶; Python Library Documentation: method set_multiplicity; set_multiplicity(...) unbound psi4.Molecule method. set_multiplicity( (Molecule)arg1, (int)arg2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupE",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:303411,Energy Efficiency,energy,energy,303411,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:303459,Energy Efficiency,energy,energy,303459,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:303467,Energy Efficiency,energy,energy,303467,"psi4.RHF method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:303504,Energy Efficiency,energy,energy,303504,"signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_b_subset()¶; Python Library Documentation: meth",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:303574,Energy Efficiency,energy,energy,303574,"HF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.RHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.RHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.RHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.RHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.RHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.RHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.RHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.RHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.RHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.RHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.RHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.RHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.RHF method. e",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:318297,Energy Efficiency,energy,energy,318297,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:318345,Energy Efficiency,energy,energy,318345,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:318353,Energy Efficiency,energy,energy,318353,"F method. compute_energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12Wa",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:318391,Energy Efficiency,energy,energy,318391,"e :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_b_subset()¶; Python Library Documentatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:318461,Energy Efficiency,energy,energy,318461,"ute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.ROHF method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.ROHF.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.ROHF method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.ROHF.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.ROHF method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.ROHF.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.ROHF method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.ROHF method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.ROHF method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.ROHF.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.ROHF method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.ROHF.epsilon_b_subset()¶; Python Library Documentation: method epsilon_b_subset; epsilon_b_subset(...) unbound psi4.ROHF m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:329531,Energy Efficiency,allocate,allocate,329531," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:329581,Energy Efficiency,allocate,allocate,329581," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:329591,Energy Efficiency,allocate,allocate,329591," petite_list; petite_list(...) unbound psi4.SOBasisSet method. petite_list( (SOBasisSet)arg1) -> PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:329642,Energy Efficiency,allocate,allocate,329642,"PetiteList :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4.SuperFunctional method. c_alpha( (SuperFunctional)arg1) -> float :. docstring; C++ signature :. ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:329719,Energy Efficiency,allocate,allocate,329719,"eListEEE petite_list(N3psi10SOBasisSetE {lvalue}). SuperFunctional¶. psi4.SuperFunctional.add_c_functional()¶; Python Library Documentation: method add_c_functional; add_c_functional(...) unbound psi4.SuperFunctional method. add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.add_x_functional()¶; Python Library Documentation: method add_x_functional; add_x_functional(...) unbound psi4.SuperFunctional method. add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :. docstring; C++ signature :. void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE). psi4.SuperFunctional.allocate()¶; Python Library Documentation: method allocate; allocate(...) unbound psi4.SuperFunctional method. allocate( (SuperFunctional)arg1) -> None :. docstring; C++ signature :. void allocate(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.ansatz()¶; Python Library Documentation: method ansatz; ansatz(...) unbound psi4.SuperFunctional method. ansatz( (SuperFunctional)arg1) -> int :. docstring; C++ signature :. i ansatz(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.blank()¶; Python Library Documentation: built-in function blank; blank(...). blank() -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(). psi4.SuperFunctional.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :. docstring; C++ signature :. N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i). psi4.SuperFunctional.c_alpha()¶; Python Library Documentation: method c_alpha; c_alpha(...) unbound psi4.SuperFunctional method. c_alpha( (SuperFunctional)arg1) -> float :. docstring; C++ signature :. d c_alpha(N3psi15SuperFunctionalE {lvalue}). psi4.SuperFunctional.c_functio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:359851,Energy Efficiency,energy,energy,359851,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:359899,Energy Efficiency,energy,energy,359899,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:359907,Energy Efficiency,energy,energy,359907,". docstring; C++ signature :. d compute_energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:359953,Energy Efficiency,energy,energy,359953,"unction.compute_gradient()¶; Python Library Documentation: method compute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.Wavef",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:360023,Energy Efficiency,energy,energy,360023,"mpute_gradient; compute_gradient(...) unbound psi4.Wavefunction method. compute_gradient( (Wavefunction)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.deep_copy()¶; Python Library Documentation: method deep_copy; deep_copy(...) unbound psi4.Wavefunction method. deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :. docstring; C++ signature :. void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.doccpi()¶; Python Library Documentation: method doccpi; doccpi(...) unbound psi4.Wavefunction method. doccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.energy()¶; Python Library Documentation: method energy; energy(...) unbound psi4.Wavefunction method. energy( (Wavefunction)arg1) -> float :. docstring; C++ signature :. d energy(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a()¶; Python Library Documentation: method epsilon_a; epsilon_a(...) unbound psi4.Wavefunction method. epsilon_a( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_a_subset()¶; Python Library Documentation: method epsilon_a_subset; epsilon_a_subset(...) unbound psi4.Wavefunction method. epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss). psi4.Wavefunction.epsilon_b()¶; Python Library Documentation: method epsilon_b; epsilon_b(...) unbound psi4.Wavefunction method. epsilon_b( (Wavefunction)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.epsilon_b_subset()¶; Python Library Documentation: method eps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:397814,Energy Efficiency,energy,energy,397814,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:397829,Energy Efficiency,energy,energy,397829," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:397909,Energy Efficiency,energy,energy,397909," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:409443,Energy Efficiency,energy,energy,409443,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:409458,Energy Efficiency,energy,energy,409458," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:409538,Energy Efficiency,energy,energy,409538," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:482535,Energy Efficiency,energy,energy,482535,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:482550,Energy Efficiency,energy,energy,482550," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:482630,Energy Efficiency,energy,energy,482630," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:518407,Energy Efficiency,power,power,518407,"nature :; | d get(N3psi6MatrixE {lvalue},i,i [,i]); | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void identity(N3psi6MatrixE {lvalue}); | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:518421,Energy Efficiency,power,power,518421,"); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE rowdim(N3psi6MatrixE {lvalue}); | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signatur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:518539,Energy Efficiency,power,power,518539,"); | invert( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void invert(N3psi6MatrixE {lvalue}); | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load(N3psi6MatrixE {lvalue},Ss); | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void load_mpqc(N3psi6MatrixE {lvalue},Ss); | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi6MatrixE {lvalue}); | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi6MatrixE {lvalue}); | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE partial_cholesky_factorize(N3psi6MatrixE {lvalue},d,b); | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE power(N3psi6MatrixE {lvalue},d,d); | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi6MatrixE {lvalue}); | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void project_out(N3psi6MatrixE {lvalue},N3psi6MatrixE {lvalue}); | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | C++ signature :; | void remove_symmetry(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | C++ signature :; | d rms(N3psi6MatrixE {lvalue}); | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE rowdim(N3psi6MatrixE {lvalue}); | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signatur",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:542607,Energy Efficiency,charge,charge,542607,"hared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule cla",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:543117,Energy Efficiency,charge,charge,543117,"dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void ad",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544095,Energy Efficiency,charge,charge,544095,". Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Function to redefine __getattr__ method of molecule class.; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setattr__ = new_set_attr(self, name, value); | Function to redefine __setattr__ method of molecule class.; | ; | activate_all_fragments(...); | activate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lva",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544719,Energy Efficiency,charge,charge,544719,"tivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be active; | ; | C++ signature :; | void activate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544734,Energy Efficiency,charge,charge,544734," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544788,Energy Efficiency,charge,charge,544788," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:544831,Energy Efficiency,charge,charge,544831," add_atom(...); | add_atom( (Molecule)arg1, (int)arg2, (float)arg3, (float)arg4, (float)arg5, (str)arg6, (float)arg7, (float)arg8, (int)arg9) -> None :; | Adds to Molecule arg1 an atom with atomic number arg2, Cartesian coordinates in Bohr (arg3, arg4, arg5), atomic symbol arg6, mass arg7, charge arg8 (optional), and lineno arg9 (optional); | ; | C++ signature :; | void add_atom(N3psi8MoleculeE {lvalue},i,d,d,d,PKc,d,d,i); | ; | atom_at_position(...); | atom_at_position( (Molecule)arg1, (float)arg2, (float)arg3) -> int :; | Tests to see if an atom is at the position arg2 with a given tolerance arg3; | ; | C++ signature :; | i atom_at_position(N3psi8MoleculeE {lvalue},Pd,d); | ; | center_of_mass(...); | center_of_mass( (Molecule)arg1) -> Vector3 :; | Computes center of mass of molecule (does not translate molecule); | ; | C++ signature :; | N3psi7Vector3E center_of_mass(N3psi8MoleculeE {lvalue}); | ; | charge(...); | charge( (Molecule)arg1, (int)arg2) -> float :; | Gets charge of atom; | ; | C++ signature :; | d charge(N3psi8MoleculeE {lvalue},i); | ; | clone(...); | clone( (Molecule)arg1) -> Molecule :; | Returns a new Molecule identical to arg1; | ; | C++ signature :; | N3psi8MoleculeE clone(N3psi8MoleculeE {lvalue}); | ; | create_psi4_string_from_molecule(...); | create_psi4_string_from_molecule( (Molecule)arg1) -> str :; | Gets a string reexpressing in input format the current states of the molecule; | ; | C++ signature :; | Ss create_psi4_string_from_molecule(N3psi8MoleculeE {lvalue}); | ; | deactivate_all_fragments(...); | deactivate_all_fragments( (Molecule)arg1) -> None :; | Sets all fragments in the molecule to be inactive; | ; | C++ signature :; | void deactivate_all_fragments(N3psi8MoleculeE {lvalue}); | ; | extract_subsets(...); | extract_subsets( (Molecule)arg1, (list)arg2, (list)arg3) -> Molecule :; | Returns copy of arg1 with arg2 fragments Real and arg3 fragments Ghost; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE extract_subsets(N3ps",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:549475,Energy Efficiency,charge,charge,549475,"_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | name( (Molecule)arg1) -> str :; | Gets molecule name; | ; | C++ signature :; | Ss name(N3psi8MoleculeE {lvalue}); | ; | natom(...); | natom( (Molecule)arg1) -> int :; | Number of real atoms; | ; | C++ signature :; | i natom(N3psi8MoleculeE {lvalue}); | ; | nfragments(...); | nfragments( (Molecule)arg1) -> int :; | Gets the number of fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi8MoleculeE {lvalue}); | ; | nuclear_repulsion_energy(...); | nuclear_repulsion_energy( (Molecule)arg1) -> float :; | Computes nuclear repulsion energy; | ; | C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:550473,Energy Efficiency,energy,energy,550473," | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | name( (Molecule)arg1) -> str :; | Gets molecule name; | ; | C++ signature :; | Ss name(N3psi8MoleculeE {lvalue}); | ; | natom(...); | natom( (Molecule)arg1) -> int :; | Number of real atoms; | ; | C++ signature :; | i natom(N3psi8MoleculeE {lvalue}); | ; | nfragments(...); | nfragments( (Molecule)arg1) -> int :; | Gets the number of fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi8MoleculeE {lvalue}); | ; | nuclear_repulsion_energy(...); | nuclear_repulsion_energy( (Molecule)arg1) -> float :; | Computes nuclear repulsion energy; | ; | C++ signature :; | d nuclear_repulsion_energy(N3psi8MoleculeE {lvalue}); | ; | point_group(...); | point_group( (Molecule)arg1) -> PointGroup :; | Returns the current point group object; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PointGroupEEE point_group(N3psi8MoleculeE {lvalue}); | ; | print_cluster(...); | print_cluster( (Molecule)arg1) -> None :; | Prints the molecule in Cartesians in input units adding fragment separators; | ; | C++ signature :; | void print_cluster(N3psi8MoleculeE {lvalue}); | ; | print_in_input_format(...); | print_in_input_format( (Molecule)arg1) -> None :; | Prints the molecule as Cartesian or ZMatrix entries, just as inputted.; | ; | C++ signature :; | void print_in_input_format(N3psi8MoleculeE {lvalue}); | ; | print_out(...); | print_out( (Molecule)arg1) -> None :; | Prints the molecule in Cartesians in input units; | ; | C++ signature :; | void print_out(N3psi8MoleculeE {lvalue}); | ; | print_out_in_angstrom(...); | print_out_in_angstrom( (Mol",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:552992,Energy Efficiency,energy,energy,552992,"(N3psi8MoleculeE {lvalue},b); | ; | reset_point_group(...); | reset_point_group( (Molecule)arg1, (str)arg2) -> None :; | Overrides symmetry from outside the molecule string; | ; | C++ signature :; | void reset_point_group(N3psi8MoleculeE {lvalue},Ss); | ; | rotational_constants(...); | rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:553063,Energy Efficiency,energy,energy,553063,"(N3psi8MoleculeE {lvalue},b); | ; | reset_point_group(...); | reset_point_group( (Molecule)arg1, (str)arg2) -> None :; | Overrides symmetry from outside the molecule string; | ; | C++ signature :; | void reset_point_group(N3psi8MoleculeE {lvalue},Ss); | ; | rotational_constants(...); | rotational_constants( (Molecule)arg1, (float)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflie",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:556443,Energy Efficiency,charge,charge,556443,"..); | set_geometry( (Molecule)arg1, (Matrix)arg2) -> None :; | Sets the geometry, given a (Natom X 3) matrix arg2 of coordinates (in Bohr); | ; | C++ signature :; | void set_geometry(N3psi8MoleculeE {lvalue},N3psi6MatrixE); | ; | set_ghost_fragment(...); | set_ghost_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Ghost; | ; | C++ signature :; | void set_ghost_fragment(N3psi8MoleculeE {lvalue},i); | ; | set_ghost_fragments(...); | set_ghost_fragments( (Molecule)arg1, (list)arg2) -> None :; | Sets the specified list arg2 of fragments to be Ghost; | ; | C++ signature :; | void set_ghost_fragments(N3psi8MoleculeE {lvalue},N5boost6python4listE); | ; | set_mass(...); | set_mass( (Molecule)arg1, (int)arg2, (float)arg3) -> None :; | Gets mass of atom arg2; | ; | C++ signature :; | void set_mass(N3psi8MoleculeE {lvalue},i,d); | ; | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:598815,Energy Efficiency,energy,energy,598815,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:598830,Energy Efficiency,energy,energy,598830," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:598910,Energy Efficiency,energy,energy,598910," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:610918,Energy Efficiency,energy,energy,610918,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:610933,Energy Efficiency,energy,energy,610933," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:611013,Energy Efficiency,energy,energy,611013," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:619355,Energy Efficiency,allocate,allocate,619355,"--; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:619372,Energy Efficiency,allocate,allocate,619372," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_os_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_ss_alpha(...); | c_ss_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_ss_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:619459,Energy Efficiency,allocate,allocate,619459," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperFunctional)arg1) -> None :; | docstring; | ; | C++ signature :; | void allocate(N3psi15SuperFunctionalE {lvalue}); | ; | ansatz(...); | ansatz( (SuperFunctional)arg1) -> int :; | docstring; | ; | C++ signature :; | i ansatz(N3psi15SuperFunctionalE {lvalue}); | ; | c_alpha(...); | c_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_functional(...); | c_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE c_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | c_omega(...); | c_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_omega(N3psi15SuperFunctionalE {lvalue}); | ; | c_os_alpha(...); | c_os_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_os_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | c_ss_alpha(...); | c_ss_alpha( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d c_ss_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:652326,Energy Efficiency,energy,energy,652326,"N5boost10shared_ptrIN3psi8BasisSetEEE basisset(N3psi12WavefunctionE {lvalue}); | ; | beta_orbital_space(...); | beta_orbital_space( (Wavefunction)arg1, (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:652341,Energy Efficiency,energy,energy,652341," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:652421,Energy Efficiency,energy,energy,652421," (str)arg2, (str)arg3, (str)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE beta_orbital_space(N3psi12WavefunctionE {lvalue},Ss,Ss,Ss); | ; | compute_energy(...); | compute_energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d compute_energy(N3psi12WavefunctionE {lvalue}); | ; | compute_gradient(...); | compute_gradient( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute_gradient(N3psi12WavefunctionE {lvalue}); | ; | deep_copy(...); | deep_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void deep_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | doccpi(...); | doccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE doccpi(N3psi12WavefunctionE {lvalue}); | ; | energy(...); | energy( (Wavefunction)arg1) -> float :; | docstring; | ; | C++ signature :; | d energy(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a(...); | epsilon_a( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a(N3psi12WavefunctionE {lvalue}); | ; | epsilon_a_subset(...); | epsilon_a_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_a_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | epsilon_b(...); | epsilon_b( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b(N3psi12WavefunctionE {lvalue}); | ; | epsilon_b_subset(...); | epsilon_b_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE epsilon_b_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | frequencies(...); | frequencies( (Wavefunction)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:676061,Energy Efficiency,energy,energy,676061,"arg2) -> None :; docstring; ; C++ signature :; void benchmark_blas1(i,d); ; benchmark_blas2(...); benchmark_blas2( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_blas2(i,d); ; benchmark_blas3(...); benchmark_blas3( (int)arg1, (float)arg2, (int)arg3) -> None :; docstring; ; C++ signature :; void benchmark_blas3(i,d,i); ; benchmark_disk(...); benchmark_disk( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_disk(i,d); ; benchmark_integrals(...); benchmark_integrals( (int)arg1, (float)arg2) -> None :; docstring; ; C++ signature :; void benchmark_integrals(i,d); ; benchmark_math(...); benchmark_math( (float)arg1) -> None :; docstring; ; C++ signature :; void benchmark_math(d); ; ccdensity(...); ccdensity( (Wavefunction)arg1) -> float :; Runs the code to compute coupled cluster density matrices.; ; C++ signature :; d ccdensity(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccenergy(...); ccenergy( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster energy code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE ccenergy(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cceom(...); cceom( (Wavefunction)arg1) -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; C++ signature :; d cceom(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cchbar(...); cchbar( (Wavefunction)arg1) -> None :; Runs the code to generate the similarity transformed Hamiltonian.; ; C++ signature :; void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cclambda(...); cclambda( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster lambda equations code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() ->",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:677475,Energy Efficiency,energy,energy,677475,"ns the code to generate the similarity transformed Hamiltonian.; ; C++ signature :; void cchbar(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cclambda(...); cclambda( (Wavefunction)arg1) -> Wavefunction :; Runs the coupled cluster lambda equations code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; C++ signature :; d ccsort(); ; cctransort(...); cctransort( (Wavefunction)arg1) -> None :; Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; ; C++ signature :; void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cctriples(...); cctriples( (Wavefunction)arg1) -> float :; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:679920,Energy Efficiency,energy,energy,679920,"the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:680197,Energy Efficiency,energy,energy,680197,"s one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; efp_init(...); efp_init() -> EFP :; Initializes the EFP library and returns an EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(); ; efp_set_options(...); efp_set_options() -> None :; Set EFP options from environment options object.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a gi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:680813,Energy Efficiency,energy,energy,680813,"ect.; ; C++ signature :; void efp_set_options(); ; fd_1_0(...); fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :; Performs a finite difference gradient computation, from energy points.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE); ; fd_freq_0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturba",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:681129,Energy Efficiency,energy,energy,681129,"0(...); fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_freq_1(...); fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i); ; fd_geoms_1_0(...); fd_geoms_1_0( (Molecule)arg1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:681735,Energy Efficiency,adapt,adapted,681735,"1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:682058,Energy Efficiency,energy,energy,682058,"ite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_po",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:683161,Energy Efficiency,charge,charges,683161,"EE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_frequencies(); ; get_global_option(...); get_global_option( (str)arg1) -> object :; Given a string of a keyword name *arg1*, returns the value associated with the keyword from the global options. Returns error if keyword is not recognized.; ; C++ signature :; N5boost6python3api6objectE get_global_option(Ss); ; get_global_option_list(...); get_global_option_list() -> list :; Returns a list of all global options.; ; C++ signature :; N5boost6py",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:693104,Energy Efficiency,adapt,adapted,693104," the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_global_option_changed(Ss); ; revoke_local_option_changed(...); revoke_local_option_changed( (str)arg1, (str)arg2) -> None :; Given a string of a keyword name *arg2* and a particular module *arg1*, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; ; C++ signature :; void revoke_local_option_changed(Ss,Ss); ; run_gdma(...); run_gdma( (Wavefunction)arg1, (str)arg2) -> float :; Runs the GDMA code.; ; C++ signature :; d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); ; sapt(...); sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the symmetry adapted perturbation theory code.; ; C++ signature :; d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scatter(...); scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :; New Scatter function.; ; C++ signature :; void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE); ; scf(...); scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :; Runs the SCF code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object); ; scfgrad(...); scfgrad( (Wavefunction)arg1) -> Matrix :; Run scfgrad, which is a specialized DF-SCF gradient program.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; scfhess(...); scfhess( (Wavefunction)arg1) -> Mat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:54191,Integrability,depend,depending,54191,"nature :. i max_am(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_function_per_shell()¶; Python Library Documentation: method max_function_per_shell; max_function_per_shell(...) unbound psi4.BasisSet method. max_function_per_shell( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_function_per_shell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_nprimitive()¶; Python Library Documentation: method max_nprimitive; max_nprimitive(...) unbound psi4.BasisSet method. max_nprimitive( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nao()¶; Python Library Documentation: method nao; nao(...) unbound psi4.BasisSet method. nao( (BasisSet)arg1) -> int :. Returns number of atomic orbitals (Cartesian); C++ signature :. i nao(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nbf()¶; Python Library Documentation: method nbf; nbf(...) unbound psi4.BasisSet method. nbf( (BasisSet)arg1) -> int :. Returns number of basis functions (Cartesian or spherical depending on has_puream); C++ signature :. i nbf(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nprimitive()¶; Python Library Documentation: method nprimitive; nprimitive(...) unbound psi4.BasisSet method. nprimitive( (BasisSet)arg1) -> int :. Returns total number of primitives in all contractions; C++ signature :. i nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell()¶; Python Library Documentation: method nshell; nshell(...) unbound psi4.BasisSet method. nshell( (BasisSet)arg1) -> int :. Returns number of shells; C++ signature :. i nshell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell_on_center()¶; Python Library Documentation: method nshell_on_center; nshell_on_center(...) unbound psi4.BasisSet method. nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i nshell_on_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.print_detail_out()¶; Python Library Documentation: method print_detail_out; print_detail_out(...) unbound psi4.BasisSet method. p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:54471,Integrability,contract,contractions,54471,". i max_function_per_shell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.max_nprimitive()¶; Python Library Documentation: method max_nprimitive; max_nprimitive(...) unbound psi4.BasisSet method. max_nprimitive( (BasisSet)arg1) -> int :. docstring; C++ signature :. i max_nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nao()¶; Python Library Documentation: method nao; nao(...) unbound psi4.BasisSet method. nao( (BasisSet)arg1) -> int :. Returns number of atomic orbitals (Cartesian); C++ signature :. i nao(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nbf()¶; Python Library Documentation: method nbf; nbf(...) unbound psi4.BasisSet method. nbf( (BasisSet)arg1) -> int :. Returns number of basis functions (Cartesian or spherical depending on has_puream); C++ signature :. i nbf(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nprimitive()¶; Python Library Documentation: method nprimitive; nprimitive(...) unbound psi4.BasisSet method. nprimitive( (BasisSet)arg1) -> int :. Returns total number of primitives in all contractions; C++ signature :. i nprimitive(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell()¶; Python Library Documentation: method nshell; nshell(...) unbound psi4.BasisSet method. nshell( (BasisSet)arg1) -> int :. Returns number of shells; C++ signature :. i nshell(N3psi8BasisSetE {lvalue}). psi4.BasisSet.nshell_on_center()¶; Python Library Documentation: method nshell_on_center; nshell_on_center(...) unbound psi4.BasisSet method. nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i nshell_on_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.print_detail_out()¶; Python Library Documentation: method print_detail_out; print_detail_out(...) unbound psi4.BasisSet method. print_detail_out( (BasisSet)arg1) -> None :. docstring; C++ signature :. void print_detail_out(N3psi8BasisSetE {lvalue}). psi4.BasisSet.print_out()¶; Python Library Documentation: method print_out; print_out(...) unbound psi4.BasisSet method. print_out( (BasisSet)arg1) -> None :. do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:58548,Integrability,contract,contraction,58548,"Set method. shell_to_ao_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_ao_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_basis_function()¶; Python Library Documentation: method shell_to_basis_function; shell_to_basis_function(...) unbound psi4.BasisSet method. shell_to_basis_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_basis_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_center()¶; Python Library Documentation: method shell_to_center; shell_to_center(...) unbound psi4.BasisSet method. shell_to_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.zero_ao_basis_set()¶; Python Library Documentation: built-in function zero_ao_basis_set; zero_ao_basis_set(...). zero_ao_basis_set() -> BasisSet :. Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; C++ signature :. N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(). BasisSetParser¶. BoysLocalizer¶. psi4.BoysLocalizer.L()¶; Python Library Documentation: property. Localized orbital coefficients. psi4.BoysLocalizer.U()¶; Python Library Documentation: property. Orbital rotation matrix. psi4.BoysLocalizer.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :. docstring; C++ signature :. N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.BoysLocalizer.converged()¶; Python Library Documentation: property. Did the localization procedure converge?. psi4.BoysLocalizer.localize()¶; Python Library Documentation: method localize; localize(...) unbound psi4.BoysLocalizer method. localize( (Localizer)arg1) -> None :. Perform the localization procedure; C++ signature :. void localize(N3psi9LocalizerE {lvalue}). C",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:250000,Integrability,interface,interface,250000," molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Library Documentation: method save_xyz_file; save_xyz_file(...) unbound psi4.Molecule method. save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :. Saves an XYZ file to arg2; C++ signature :. void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b). psi4.Molecule.schoenflies_symbol()¶; Python Li",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:377253,Integrability,depend,depending,377253,"set per atom in CFOUR format; | ; | C++ signature :; | Ss genbas(N3psi8BasisSetE {lvalue}); | ; | has_puream(...); | has_puream( (BasisSet)arg1) -> bool :; | Spherical harmonics?; | ; | C++ signature :; | b has_puream(N3psi8BasisSetE {lvalue}); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | Returns maximum angular momentum used; | ; | C++ signature :; | i max_am(N3psi8BasisSetE {lvalue}); | ; | max_function_per_shell(...); | max_function_per_shell( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_function_per_shell(N3psi8BasisSetE {lvalue}); | ; | max_nprimitive(...); | max_nprimitive( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_nprimitive(N3psi8BasisSetE {lvalue}); | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | Returns number of atomic orbitals (Cartesian); | ; | C++ signature :; | i nao(N3psi8BasisSetE {lvalue}); | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | Returns number of basis functions (Cartesian or spherical depending on has_puream); | ; | C++ signature :; | i nbf(N3psi8BasisSetE {lvalue}); | ; | nprimitive(...); | nprimitive( (BasisSet)arg1) -> int :; | Returns total number of primitives in all contractions; | ; | C++ signature :; | i nprimitive(N3psi8BasisSetE {lvalue}); | ; | nshell(...); | nshell( (BasisSet)arg1) -> int :; | Returns number of shells; | ; | C++ signature :; | i nshell(N3psi8BasisSetE {lvalue}); | ; | nshell_on_center(...); | nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i nshell_on_center(N3psi8BasisSetE {lvalue},i); | ; | print_detail_out(...); | print_detail_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_detail_out(N3psi8BasisSetE {lvalue}); | ; | print_out(...); | print_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi8BasisSetE {lvalue}); | ; | shell(...); | shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :; | docstring; | ; | C++ signature :; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:377444,Integrability,contract,contractions,377444,"ignature :; | b has_puream(N3psi8BasisSetE {lvalue}); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | Returns maximum angular momentum used; | ; | C++ signature :; | i max_am(N3psi8BasisSetE {lvalue}); | ; | max_function_per_shell(...); | max_function_per_shell( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_function_per_shell(N3psi8BasisSetE {lvalue}); | ; | max_nprimitive(...); | max_nprimitive( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_nprimitive(N3psi8BasisSetE {lvalue}); | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | Returns number of atomic orbitals (Cartesian); | ; | C++ signature :; | i nao(N3psi8BasisSetE {lvalue}); | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | Returns number of basis functions (Cartesian or spherical depending on has_puream); | ; | C++ signature :; | i nbf(N3psi8BasisSetE {lvalue}); | ; | nprimitive(...); | nprimitive( (BasisSet)arg1) -> int :; | Returns total number of primitives in all contractions; | ; | C++ signature :; | i nprimitive(N3psi8BasisSetE {lvalue}); | ; | nshell(...); | nshell( (BasisSet)arg1) -> int :; | Returns number of shells; | ; | C++ signature :; | i nshell(N3psi8BasisSetE {lvalue}); | ; | nshell_on_center(...); | nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i nshell_on_center(N3psi8BasisSetE {lvalue},i); | ; | print_detail_out(...); | print_detail_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_detail_out(N3psi8BasisSetE {lvalue}); | ; | print_out(...); | print_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi8BasisSetE {lvalue}); | ; | shell(...); | shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE shell(N3psi8BasisSetE {lvalue},i); | ; | shell( (BasisSet)arg1, (int)arg2, (int)arg3) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE she",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:381088,Integrability,contract,contraction,381088,"basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_auxiliary(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,Ss,Ss [,i]); | ; | pyconstruct_orbital(...); | pyconstruct_orbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :; | Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <un",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:438963,Integrability,interface,interface,438963,"efined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:553375,Integrability,interface,interface,553375,"at)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflies_symbol(...); | schoenflies_symbol( (Molecule)arg1) -> str :; | Returns the Schoenflies symbol; | ; | C++ signature :; | Ss schoenflies_symbol(N3psi8MoleculeE {lvalue}); | ; | set_active_fragment(...); | set_active_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Real; | ; | C++ signature",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:18196,Modifiability,variab,variables,18196,"sort(). psi4.cctransort()¶; Python Library Documentation: built-in function cctransort in module psi4; cctransort(...). cctransort( (Wavefunction)arg1) -> None :. Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; C++ signature :. void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.cctriples()¶; Python Library Documentation: built-in function cctriples in module psi4; cctriples(...). cctriples( (Wavefunction)arg1) -> float :. Runs the coupled cluster (T) energy code.; C++ signature :. d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.clean()¶; Python Library Documentation: built-in function clean in module psi4; clean(...). clean() -> None :. Function to remove scratch files. Call between independent jobs.; C++ signature :. void clean(). psi4.clean_variables()¶; Python Library Documentation: built-in function clean_variables in module psi4; clean_variables(...). clean_variables() -> None :. Empties all PSI variables that have set internally.; C++ signature :. void clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:19250,Modifiability,config,configuration,19250,"oid clean_variables(). psi4.close_outfile()¶; Python Library Documentation: built-in function close_outfile in module psi4; close_outfile(...). close_outfile() -> None :. Closes the output file.; C++ signature :. void close_outfile(). psi4.compute_shell()¶; Python Library Documentation: built-in function compute_shell in module psi4; compute_shell(...). compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :. docstring; C++ signature :. m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i). psi4.dcft()¶; Python Library Documentation: built-in function dcft in module psi4; dcft(...). dcft( (Wavefunction)arg1) -> Wavefunction :. Runs the density cumulant functional theory code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.detci()¶; Python Library Documentation: built-in function detci in module psi4; detci(...). detci( (Wavefunction)arg1) -> Wavefunction :. Runs the determinant-based configuration interaction code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfmp2()¶; Python Library Documentation: built-in function dfmp2 in module psi4; dfmp2(...). dfmp2( (Wavefunction)arg1) -> Wavefunction :. Runs the DF-MP2 code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.dfocc()¶; Python Library Documentation: built-in function dfocc in module psi4; dfocc(...). dfocc( (Wavefunction)arg1) -> Wavefunction :. Runs the density-fitted orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.displace_atom()¶; Python Library Documentation: built-in function displace_atom in module psi4; displace_atom(...). displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :. Displaces one coordinate of single atom.; C++ signature :. N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:23686,Modifiability,adapt,adapted,23686,"lt-in function fd_geoms_freq_0 in module psi4; fd_geoms_freq_0(...). fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fd_geoms_freq_1()¶; Python Library Documentation: built-in function fd_geoms_freq_1 in module psi4; fd_geoms_freq_1(...). fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :. Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; C++ signature :. St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i). psi4.fisapt()¶; Python Library Documentation: built-in function fisapt in module psi4; fisapt(...). fisapt( (Wavefunction)arg1) -> float :. Runs the functional-group intramolecular symmetry adapted perturbation theory code.; C++ signature :. d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.flush_outfile()¶; Python Library Documentation: built-in function flush_outfile in module psi4; flush_outfile(...). flush_outfile() -> None :. Flushes the output file.; C++ signature :. void flush_outfile(). psi4.fnocc()¶; Python Library Documentation: built-in function fnocc in module psi4; fnocc(...). fnocc( (Wavefunction)arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in m",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:25080,Modifiability,variab,variables,25080,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:25169,Modifiability,variab,variables,25169,"arg1) -> Wavefunction :. Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.get_active_efp()¶; Python Library Documentation: built-in function get_active_efp in module psi4; get_active_efp(...). get_active_efp() -> EFP :. Returns the currently active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recent",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:25471,Modifiability,variab,variables,25471,"active EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(). psi4.get_active_molecule()¶; Python Library Documentation: built-in function get_active_molecule in module psi4; get_active_molecule(...). get_active_molecule() -> Molecule :. Returns the currently active molecule object.; C++ signature :. N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(). psi4.get_array_variable()¶; Python Library Documentation: built-in function get_array_variable in module psi4; get_array_variable(...). get_array_variable( (str)arg1) -> Matrix :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss). psi4.get_array_variables()¶; Python Library Documentation: built-in function get_array_variables in module psi4; get_array_variables(...). get_array_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_array_variables(). psi4.get_atomic_point_charges()¶; Python Library Documentation: built-in function get_atomic_point_charges in module psi4; get_atomic_point_charges(...). get_atomic_point_charges() -> Vector :. Returns the most recently computed atomic point charges, as a double * object.; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(). psi4.get_efp_torque()¶; Python Library Documentation: built-in function get_efp_torque in module psi4; get_efp_torque(...). get_efp_torque() -> Matrix :. Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(). psi4.get_frequencies()¶; Python Library Documentation: built-in function get_frequencies in module psi4; get_frequencies(...). get_frequencies() -> Vector :. Returns the most recently computed frequencies, as a 3N-6 V",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:29491,Modifiability,variab,variables,29491,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:29580,Modifiability,variab,variables,29580,"local_option(Ss,Ss). psi4.get_memory()¶; Python Library Documentation: built-in function get_memory in module psi4; get_memory(...). get_memory() -> int :. Returns the amount of memory available to Psi (in bytes).; C++ signature :. m get_memory(). psi4.get_option()¶; Python Library Documentation: built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:29818,Modifiability,variab,variables,29818," built-in function get_option in module psi4; get_option(...). get_option( (str)arg1, (str)arg2) -> object :. Given a string of a keyword name arg2 and a particular module arg1, returns the local value associated with the keyword if it’s been set, else the global value if it’s been set, else the local default value. Returns error if keyword is not recognized globally or if keyword is not recognized for the module.; C++ signature :. N5boost6python3api6objectE get_option(Ss,Ss). psi4.get_variable()¶; Python Library Documentation: built-in function get_variable in module psi4; get_variable(...). get_variable( (str)arg1) -> float :. Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; C++ signature :. d get_variable(Ss). psi4.get_variables()¶; Python Library Documentation: built-in function get_variables in module psi4; get_variables(...). get_variables() -> dict :. Returns dictionary of the PSI variables set internally by the modules or python driver.; C++ signature :. N5boost6python4dictE get_variables(). psi4.get_writer_file_prefix()¶; Python Library Documentation: built-in function get_writer_file_prefix in module psi4; get_writer_file_prefix(...). get_writer_file_prefix( (str)arg1) -> str :. Returns the prefix to use for writing files for external programs.; C++ signature :. Ss get_writer_file_prefix(Ss). psi4.git_version()¶; Python Library Documentation: built-in function git_version in module psi4; git_version(...). git_version() -> str :. Returns the git version of this copy of Psi.; C++ signature :. PKc git_version(). psi4.has_global_option_changed()¶; Python Library Documentation: built-in function has_global_option_changed in module psi4; has_global_option_changed(...). has_global_option_changed( (str)arg1) -> bool :. Returns boolean for whether the keyword arg1 has been touched in the global scope, by either user or code. Notwithstanding, code is written such that in practice, ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35526,Modifiability,plugin,plugin,35526,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35585,Modifiability,plugin,plugin,35585,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35608,Modifiability,plugin,plugin,35608,"hared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_modul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35621,Modifiability,plugin,plugin,35621,"-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_module(...). prepare_options_for_module( (str)arg1) -> None :. Sets the options mod",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:35750,Modifiability,plugin,plugin,35750,"timized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plugin(Ss,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.plugin_close()¶; Python Library Documentation: built-in function plugin_close in module psi4; plugin_close(...). plugin_close( (str)arg1) -> None :. docstring; C++ signature :. void plugin_close(Ss). psi4.plugin_close_all()¶; Python Library Documentation: built-in function plugin_close_all in module psi4; plugin_close_all(...). plugin_close_all() -> None :. docstring; C++ signature :. void plugin_close_all(). psi4.plugin_load()¶; Python Library Documentation: built-in function plugin_load in module psi4; plugin_load(...). plugin_load( (str)arg1) -> int :. docstring; C++ signature :. i plugin_load(Ss). psi4.prepare_options_for_module()¶; Python Library Documentation: built-in function prepare_options_for_module in module psi4; prepare_options_for_module(...). prepare_options_for_module( (str)arg1) -> None :. Sets the options module up to return options pertaining to the named argument (e.g. SCF).; C++ signature :. void prepare_optio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:37754,Modifiability,variab,variables,37754,le(Ss). psi4.print_global_options()¶; Python Library Documentation: built-in function print_global_options in module psi4; print_global_options(...). print_global_options() -> None :. Prints the currently set global (all modules) options to the output file.; C++ signature :. void print_global_options(). psi4.print_options()¶; Python Library Documentation: built-in function print_options in module psi4; print_options(...). print_options() -> None :. Prints the currently set options (to the output file) for the current module.; C++ signature :. void print_options(). psi4.print_out()¶; Python Library Documentation: built-in function print_out in module psi4; print_out(...). print_out( (str)arg1) -> None :. Prints a string (using sprintf-like notation) to the output file.; C++ signature :. void print_out(Ss). psi4.print_variables()¶; Python Library Documentation: built-in function print_variables in module psi4; print_variables(...). print_variables() -> None :. Prints all PSI variables that have been set internally.; C++ signature :. void print_variables(). psi4.psi_top_srcdir()¶; Python Library Documentation: built-in function psi_top_srcdir in module psi4; psi_top_srcdir(...). psi_top_srcdir() -> str :. Returns the location of the source code.; C++ signature :. Ss psi_top_srcdir(). psi4.psimrcc()¶; Python Library Documentation: built-in function psimrcc in module psi4; psimrcc(...). psimrcc( (Wavefunction)arg1) -> float :. Runs the multireference coupled cluster code.; C++ signature :. d psimrcc(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.reopen_outfile()¶; Python Library Documentation: built-in function reopen_outfile in module psi4; reopen_outfile(...). reopen_outfile() -> None :. Reopens the output file.; C++ signature :. void reopen_outfile(). psi4.revoke_global_option_changed()¶; Python Library Documentation: built-in function revoke_global_option_changed in module psi4; revoke_global_option_changed(...). revoke_global_option_changed( (str)arg1) -> None :.,MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:40237,Modifiability,adapt,adapted,40237,"ocal_option_changed in module psi4; revoke_local_option_changed(...). revoke_local_option_changed( (str)arg1, (str)arg2) -> None :. Given a string of a keyword name arg2 and a particular module arg1, sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option.; C++ signature :. void revoke_local_option_changed(Ss,Ss). psi4.run_gdma()¶; Python Library Documentation: built-in function run_gdma in module psi4; run_gdma(...). run_gdma( (Wavefunction)arg1, (str)arg2) -> float :. Runs the GDMA code.; C++ signature :. d run_gdma(N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss). psi4.sapt()¶; Python Library Documentation: built-in function sapt in module psi4; sapt(...). sapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :. Runs the symmetry adapted perturbation theory code.; C++ signature :. d sapt(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scatter()¶; Python Library Documentation: built-in function scatter in module psi4; scatter(...). scatter( (Molecule)arg1, (float)arg2, (list)arg3, (list)arg4, (list)arg5) -> None :. New Scatter function.; C++ signature :. void scatter(N5boost10shared_ptrIN3psi8MoleculeEEE,d,N5boost6python4listE,N5boost6python4listE,N5boost6python4listE). psi4.scf()¶; Python Library Documentation: built-in function scf in module psi4; scf(...). scf( (Wavefunction)arg1, (object)arg2, (object)arg3) -> Wavefunction :. Runs the SCF code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE scf(N5boost10shared_ptrIN3psi12WavefunctionEEE,P7_object,P7_object). psi4.scfgrad()¶; Python Library Documentation: built-in function scfgrad in module psi4; scfgrad(...). scfgrad( (Wavefunction)arg1) -> Matrix :. Run scfgrad, w",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:42248,Modifiability,variab,variable,42248," a specialized DF-SCF gradient program.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE scfgrad(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.scfhess()¶; Python Library Documentation: built-in function scfhess in module psi4; scfhess(...). scfhess( (Wavefunction)arg1) -> Matrix :. Run scfhess, which is a specialized DF-SCF hessian program.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE scfhess(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.set_active_molecule()¶; Python Library Documentation: built-in function set_active_molecule in module psi4; set_active_molecule(...). set_active_molecule( (Molecule)arg1) -> None :. Activates a previously defined (in the input) molecule, by name.; C++ signature :. void set_active_molecule(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.set_array_variable()¶; Python Library Documentation: built-in function set_array_variable in module psi4; set_array_variable(...). set_array_variable( (str)arg1, (Matrix)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_array_variable(Ss,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.set_efp_torque()¶; Python Library Documentation: built-in function set_efp_torque in module psi4; set_efp_torque(...). set_efp_torque( (Matrix)arg1) -> None :. Assigns the global EFP gradient to the values stored in the Nefp by 6 Matrix argument.; C++ signature :. void set_efp_torque(N5boost10shared_ptrIN3psi6MatrixEEE). psi4.set_frequencies()¶; Python Library Documentation: built-in function set_frequencies in module psi4; set_frequencies(...). set_frequencies( (Vector)arg1) -> None :. Assigns the global frequencies to the values stored in the 3N-6 Vector argument.; C++ signature :. void set_frequencies(N5boost10shared_ptrIN3psi6VectorEEE). psi4.set_global_option()¶; Python Library Documentation: built-in function set_global_option in module psi4; set_global_option(...). set_global_option( (str)arg1, (str)arg2) -> bool :. Sets value arg2 to string keyword arg1 for all modules.; C++ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:47383,Modifiability,variab,variable,47383,"Library Documentation: built-in function set_memory in module psi4; set_memory(...). set_memory( (int)arg1) -> None :. Sets the memory available to Psi (in bytes).; C++ signature :. void set_memory(m). psi4.set_nthread()¶; Python Library Documentation: built-in function set_nthread in module psi4; set_nthread(...). set_nthread( (int)arg1) -> None :. Sets the number of threads to use in SMP parallel computations.; C++ signature :. void set_nthread(i). psi4.set_parent_symmetry()¶; Python Library Documentation: built-in function set_parent_symmetry in module psi4; set_parent_symmetry(...). set_parent_symmetry( (str)arg1) -> None :. Sets the symmetry of the ‘parent’ (undisplaced) geometry, by Schoenflies symbol, at the beginning of a finite difference computation.; C++ signature :. void set_parent_symmetry(Ss). psi4.set_variable()¶; Python Library Documentation: built-in function set_variable in module psi4; set_variable(...). set_variable( (str)arg1, (float)arg2) -> None :. Sets a PSI variable, by name.; C++ signature :. void set_variable(Ss,d). psi4.thermo()¶; Python Library Documentation: built-in function thermo in module psi4; thermo(...). thermo( (Wavefunction)arg1, (Vector)arg2) -> float :. Computes thermodynamic data.; C++ signature :. d thermo(N5boost10shared_ptrIN3psi12WavefunctionEEE,N5boost10shared_ptrIN3psi6VectorEEE). psi4.transqt2()¶; Python Library Documentation: built-in function transqt2 in module psi4; transqt2(...). transqt2( (Wavefunction)arg1) -> float :. Runs the (deprecated) transformation code.; C++ signature :. d transqt2(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.version()¶; Python Library Documentation: built-in function version in module psi4; version(...). version() -> str :. Returns the version ID of this copy of Psi.; C++ signature :. PKc version(). AOShellCombinationsIterator¶. psi4.AOShellCombinationsIterator.first()¶; Python Library Documentation: method first; first(...) unbound psi4.AOShellCombinationsIterator method. first( (",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:106842,Modifiability,inherit,inherited,106842,"erence( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_ignore_reference(N3psi5DerivE {lvalue},b). psi4.Deriv.set_tpdm_presorted()¶; Python Library Documentation: method set_tpdm_presorted; set_tpdm_presorted(...) unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:107001,Modifiability,inherit,inherited,107001,")¶; Python Library Documentation: method set_tpdm_presorted; set_tpdm_presorted(...) unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:107076,Modifiability,inherit,inherited,107076,") unbound psi4.Deriv method. set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_tpdm_presorted(N3psi5DerivE {lvalue},b). DiagonalizeOrder¶. psi4.DiagonalizeOrder.Ascending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:109304,Modifiability,inherit,inherited,109304,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... —————————————",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:109606,Modifiability,inherit,inherited,109606,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:110330,Modifiability,inherit,inherited,110330," denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:110489,Modifiability,inherit,inherited,110489,"umber in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:110564,Modifiability,inherit,inherited,110564,"————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.Descending()¶; Python Library Documentation: DiagonalizeOrder in module psi4 object; class DiagonalizeOrder(Boost.Python.enum). docstring. Method resolution order:. DiagonalizeOrder. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Ascending = psi4.DiagonalizeOrder.Ascending. Descending = psi4.DiagonalizeOrder.Descending. names = {‘Ascending’: psi4.DiagonalizeOrder.Ascending, ‘Descending’: p... values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:112792,Modifiability,inherit,inherited,112792,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.DiagonalizeOrder.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.DiagonalizeOrder.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowe",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:113094,Modifiability,inherit,inherited,113094,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.DiagonalizeOrder.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.DiagonalizeOrder.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.DiagonalizeOrder.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.DiagonalizeOrder.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.DiagonalizeOrder.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.DiagonalizeOrder.names()¶;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:152507,Modifiability,inherit,inherited,152507,"anShell.nfunction()¶; Python Library Documentation: property. docstring. psi4.GaussianShell.nprimitive()¶; Python Library Documentation: property. docstring. psi4.GaussianShell.original_coef()¶; Python Library Documentation: method original_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:152666,Modifiability,inherit,inherited,152666,"ng. psi4.GaussianShell.original_coef()¶; Python Library Documentation: method original_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:152741,Modifiability,inherit,inherited,152741,"nal_coef; original_coef(...) unbound psi4.GaussianShell method. original_coef( (GaussianShell)arg1, (int)arg2) -> float :. docstring; C++ signature :. d original_coef(N3psi13GaussianShellE {lvalue},i). GeometryUnits¶. psi4.GeometryUnits.Angstrom()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:154969,Modifiability,inherit,inherited,154969,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:155271,Modifiability,inherit,inherited,155271,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:155954,Modifiability,inherit,inherited,155954,"criptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:156113,Modifiability,inherit,inherited,156113," numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:156188,Modifiability,inherit,inherited,156188," of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.Bohr()¶; Python Library Documentation: GeometryUnits in module psi4 object; class GeometryUnits(Boost.Python.enum). docstring. Method resolution order:. GeometryUnits. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Angstrom = psi4.GeometryUnits.Angstrom. Bohr = psi4.GeometryUnits.Bohr. names = {‘Angstrom’: psi4.GeometryUnits.Angstrom, ‘Bohr’: psi4.Geometr... values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}. ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:158416,Modifiability,inherit,inherited,158416,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.GeometryUnits.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.GeometryUnits.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:158718,Modifiability,inherit,inherited,158718,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.GeometryUnits.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.GeometryUnits.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.GeometryUnits.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.GeometryUnits.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.GeometryUnits.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.GeometryUnits.names()¶; Python Library Do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:243367,Modifiability,variab,variable,243367,"g2) -> None :. Uses the point group object obtain by calling point_group(); C++ signature :. void form_symmetry_information(N3psi8MoleculeE {lvalue},d). psi4.Molecule.geometry()¶; Python Library Documentation: method geometry; geometry(...) unbound psi4.Molecule method. geometry( (Molecule)arg1) -> Matrix :. Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); C++ signature :. N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_full_point_group()¶; Python Library Documentation: method get_full_point_group; get_full_point_group(...) unbound psi4.Molecule method. get_full_point_group( (Molecule)arg1) -> str :. Gets point group name such as C3v or S8; C++ signature :. Ss get_full_point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_variable()¶; Python Library Documentation: method get_variable; get_variable(...) unbound psi4.Molecule method. get_variable( (Molecule)arg1, (str)arg2) -> float :. Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; C++ signature :. d get_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.is_variable()¶; Python Library Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Docum",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:243715,Modifiability,variab,variable,243715," X 3) matrix of coordinates (in Bohr); C++ signature :. N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_full_point_group()¶; Python Library Documentation: method get_full_point_group; get_full_point_group(...) unbound psi4.Molecule method. get_full_point_group( (Molecule)arg1) -> str :. Gets point group name such as C3v or S8; C++ signature :. Ss get_full_point_group(N3psi8MoleculeE {lvalue}). psi4.Molecule.get_variable()¶; Python Library Documentation: method get_variable; get_variable(...) unbound psi4.Molecule method. get_variable( (Molecule)arg1, (str)arg2) -> float :. Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; C++ signature :. d get_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.is_variable()¶; Python Library Documentation: method is_variable; is_variable(...) unbound psi4.Molecule method. is_variable( (Molecule)arg1, (str)arg2) -> bool :. Checks if variable arg2 is in the list, returns true if it is, and returns false if not; C++ signature :. b is_variable(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.label()¶; Python Library Documentation: method label; label(...) unbound psi4.Molecule method. label( (Molecule)arg1, (int)arg2) -> str :. Gets the original label of the atom as given in the input file (C2, H4); C++ signature :. Ss label(N3psi8MoleculeE {lvalue},i). psi4.Molecule.mass()¶; Python Library Documentation: method mass; mass(...) unbound psi4.Molecule method. mass( (Molecule)arg1, (int)arg2) -> float :. Gets mass of atom arg2; C++ signature :. d mass(N3psi8MoleculeE {lvalue},i). psi4.Molecule.molecular_charge()¶; Python Library Documentation: method molecular_charge; molecular_charge(...) unbound psi4.Molecule method. molecular_charge( (Molecule)arg1) -> int :. Gets the molecular charge; C++ signature :. i molecular_charge(N3psi8MoleculeE {lvalue}). psi4.Molecule.move_to_com()¶; Python Library Documentation: method move_to_com; move_to_com(...) unbound psi4.Molecul",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:249951,Modifiability,extend,extended,249951," molecule; C++ signature :. N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d). psi4.Molecule.run_dftd3()¶; Python Library Documentation: method run_dftd3 in module qcdb.interface_dftd3; run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False) unbound psi4.Molecule method. Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. psi4.Molecule.save_string_xyz()¶; Python Library Documentation: method save_string_xyz; save_string_xyz(...) unbound psi4.Molecule method. save_string_xyz( (Molecule)arg1) -> str :. Saves the string of an XYZ file to arg2; C++ signature :. Ss save_string_xyz(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_string_xyz_file()¶; Python Library Documentation: method save_string_xyz_file; save_string_xyz_file(...) unbound psi4.Molecule method. save_string_xyz_file( (Molecule)arg1) -> str :. Saves an XYZ file to arg2; C++ signature :. Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}). psi4.Molecule.save_xyz_file()¶; Python Library Documentation: method save_xyz_file; save_xyz_file(...) unbound psi4.Molecule method. save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :. Saves an XYZ file to arg2; C++ signature :. void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b). psi4.Molecule.schoenflies_symbol()¶; Python Li",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:255747,Modifiability,variab,variable,255747,"2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:255785,Modifiability,variab,variables,255785,"2) -> None :. Sets the multiplicity (defined as 2Ms + 1); C++ signature :. void set_multiplicity(N3psi8MoleculeE {lvalue},i). psi4.Molecule.set_name()¶; Python Library Documentation: method set_name; set_name(...) unbound psi4.Molecule method. set_name( (Molecule)arg1, (str)arg2) -> None :. Sets molecule name; C++ signature :. void set_name(N3psi8MoleculeE {lvalue},Ss). psi4.Molecule.set_point_group()¶; Python Library Documentation: method set_point_group; set_point_group(...) unbound psi4.Molecule method. set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :. Sets the molecular point group to the point group object arg2; C++ signature :. void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE). psi4.Molecule.set_variable()¶; Python Library Documentation: method set_variable; set_variable(...) unbound psi4.Molecule method. set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :. Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); C++ signature :. void set_variable(N3psi8MoleculeE {lvalue},Ss,d). psi4.Molecule.symbol()¶; Python Library Documentation: method symbol; symbol(...) unbound psi4.Molecule method. symbol( (Molecule)arg1, (int)arg2) -> str :. Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); C++ signature :. Ss symbol(N3psi8MoleculeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:257142,Modifiability,variab,variable,257142,"culeE {lvalue},i). psi4.Molecule.symmetrize()¶; Python Library Documentation: method symmetrize; symmetrize(...) unbound psi4.Molecule method. symmetrize( (Molecule)arg1, (float)arg2) -> None :. Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; C++ signature :. void symmetrize(N3psi8MoleculeE {lvalue},d). psi4.Molecule.translate()¶; Python Library Documentation: method translate; translate(...) unbound psi4.Molecule method. translate( (Molecule)arg1, (Vector3)arg2) -> None :. Translates molecule by arg2; C++ signature :. void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E). psi4.Molecule.units()¶; Python Library Documentation: property. Units (Angstrom or Bohr) used to define the geometry. psi4.Molecule.update_geometry()¶; Python Library Documentation: method update_geometry; update_geometry(...) unbound psi4.Molecule method. update_geometry( (Molecule)arg1) -> None :. Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; C++ signature :. void update_geometry(N3psi8MoleculeE {lvalue}). psi4.Molecule.x()¶; Python Library Documentation: method x; x(...) unbound psi4.Molecule method. x( (Molecule)arg1, (int)arg2) -> float :. x position of atom; C++ signature :. d x(N3psi8MoleculeE {lvalue},i). psi4.Molecule.y()¶; Python Library Documentation: method y; y(...) unbound psi4.Molecule method. y( (Molecule)arg1, (int)arg2) -> float :. y position of atom; C++ signature :. d y(N3psi8MoleculeE {lvalue},i). psi4.Molecule.z()¶; Python Library Documentation: method z; z(...) unbound psi4.Molecule method. z( (Molecule)arg1, (int)arg2) -> float :. z position of atom; C++ signature :. d z(N3psi8MoleculeE {lvalue},i). MultipoleInt¶. psi4.MultipoleInt.basis()¶; Python Library Documentation: property. The basis set on center one. psi4.MultipoleInt.basis1()¶; Python Library Documentation: property. The basis set on center",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:272531,Modifiability,inherit,inherited,272531,"g. psi4.PotentialInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.PotentialInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). Process¶. psi4.Process.environment()¶; Python Library Documentation: Environment in module psi4 object; class Environment(Boost.Python.instance). Method resolution order:. Environment. Boost.Python.instance. __builtin__.object. Methods defined here:. __getitem__(...). __getitem__( (Environment)arg1, (str)arg2) -> str :. docstring. C++ signature :. Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss). __init__(...). __init__( (object)arg1) -> None :. C++ signature :. void __init__(P7_object). __reduce__ = <unnamed Boost.Python function>(...). ———————————————————————-. Data and other attributes defined here:. __instance_size__ = 464. ———————————————————————-. Data descriptors inherited from Boost.Python.instance:. __dict__. __weakref__. ———————————————————————-. Data and other attributes inherited from Boost.Python.instance:. __new__ = <built-in method __new__ of Boost.Python.class object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. PseudoTrial¶. psi4.PseudoTrial.getA()¶; Python Library Documentation: method getA; getA(...) unbound psi4.PseudoTrial method. getA( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getI()¶; Python Library Documentation: method getI; getI(...) unbound psi4.PseudoTrial method. getI( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getIPS()¶; Python Library Documentation: method getIPS; getIPS(...) unbound psi4.PseudoTrial method. getIPS( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:272645,Modifiability,inherit,inherited,272645,"ble_pybuffer(...) unbound psi4.PotentialInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). Process¶. psi4.Process.environment()¶; Python Library Documentation: Environment in module psi4 object; class Environment(Boost.Python.instance). Method resolution order:. Environment. Boost.Python.instance. __builtin__.object. Methods defined here:. __getitem__(...). __getitem__( (Environment)arg1, (str)arg2) -> str :. docstring. C++ signature :. Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss). __init__(...). __init__( (object)arg1) -> None :. C++ signature :. void __init__(P7_object). __reduce__ = <unnamed Boost.Python function>(...). ———————————————————————-. Data and other attributes defined here:. __instance_size__ = 464. ———————————————————————-. Data descriptors inherited from Boost.Python.instance:. __dict__. __weakref__. ———————————————————————-. Data and other attributes inherited from Boost.Python.instance:. __new__ = <built-in method __new__ of Boost.Python.class object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. PseudoTrial¶. psi4.PseudoTrial.getA()¶; Python Library Documentation: method getA; getA(...) unbound psi4.PseudoTrial method. getA( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getI()¶; Python Library Documentation: method getI; getI(...) unbound psi4.PseudoTrial method. getI( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getIPS()¶; Python Library Documentation: method getIPS; getIPS(...) unbound psi4.PseudoTrial method. getIPS( (PseudoTrial)arg1) -> Matrix :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}). psi4.PseudoTrial.getQ()¶; Python Library Documentation:",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:275983,Modifiability,inherit,inherited,275983,"n Library Documentation: property. docstring. psi4.PseudospectralInt.set_enable_pybuffer()¶; Python Library Documentation: method set_enable_pybuffer; set_enable_pybuffer(...) unbound psi4.PseudospectralInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:276142,Modifiability,inherit,inherited,276142,"_enable_pybuffer(...) unbound psi4.PseudospectralInt method. set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:276217,Modifiability,inherit,inherited,276217,"OneBodyAOInt)arg1, (bool)arg2) -> None :. docstring; C++ signature :. void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b). PsiReturnType¶. psi4.PsiReturnType.Balk()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:278445,Modifiability,inherit,inherited,278445,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:278747,Modifiability,inherit,inherited,278747,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:279510,Modifiability,inherit,inherited,279510,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:279669,Modifiability,inherit,inherited,279669,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:279744,Modifiability,inherit,inherited,279744,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.EndLoop()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:281972,Modifiability,inherit,inherited,281972,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:282274,Modifiability,inherit,inherited,282274,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:283037,Modifiability,inherit,inherited,283037,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:283196,Modifiability,inherit,inherited,283196,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:283271,Modifiability,inherit,inherited,283271,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Failure()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:285499,Modifiability,inherit,inherited,285499,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:285801,Modifiability,inherit,inherited,285801,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:286564,Modifiability,inherit,inherited,286564,"onal number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:286723,Modifiability,inherit,inherited,286723,"art of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:286798,Modifiability,inherit,inherited,286798,"ted from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.Success()¶; Python Library Documentation: PsiReturnType in module psi4 object; class PsiReturnType(Boost.Python.enum). docstring. Method resolution order:. PsiReturnType. Boost.Python.enum. __builtin__.int. __builtin__.object. Data and other attributes defined here:. Balk = psi4.PsiReturnType.Balk. EndLoop = psi4.PsiReturnType.EndLoop. Failure = psi4.PsiReturnType.Failure. Success = psi4.PsiReturnType.Success. names = {‘Balk’: psi4.PsiReturnType.Balk, ‘EndLoop’: psi4.PsiReturnTyp... values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure... ———————————————————————-. Methods inherited from Boost.Python.enum:. __repr__(...). x.__repr__() <==> repr(x). __str__(...). x.__str__() <==> str(x). ———————————————————————-. Data descriptors inherited from Boost.Python.enum:. name. ———————————————————————-. Methods inherited from __builtin__.int:. __abs__(...). x.__abs__() <==> abs(x). __add__(...). x.__add__(y) <==> x+y. __and__(...). x.__and__(y) <==> x&y. __cmp__(...). x.__cmp__(y) <==> cmp(x,y). __coerce__(...). x.__coerce__(y) <==> coerce(x, y). __div__(...). x.__div__(y) <==> x/y. __divmod__(...). x.__divmod__(y) <==> divmod(x, y). __float__(...). x.__float__() <==> float(x). __floordiv__(...). x.__floordiv__(y) <==> x//y. __format__(...). __getattribute__(...). x.__getattribute__(‘name’) <==> x.name. __getnewargs__(...). __hash__(...). x.__hash__() <==> hash(x). __hex__(...). x.__hex__() <==> hex(x). __index__(...). x[y:z] <==> x[y.__index__():z.__index__()]. __int__(...). x.__int__() <==> int(x). __invert__(...). x.__invert__() <==> ~x. __long__(...). x.__long__() <==> long(x). __lshift__(...). x.__lshift__(y) <==> x<<y. __mod__(...). x.__mod__(y) <==> x%y. __mul__(...). x.__mul__(y) <==> x*y. __neg__(...). x.__neg__() <==> -x. __nonzero__(...). x.__nonzero__() <==> x != 0. __oct__(...). x.__oct__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:289026,Modifiability,inherit,inherited,289026,"__(...). x.__rdiv__(y) <==> y/x. __rdivmod__(...). x.__rdivmod__(y) <==> divmod(y, x). __rfloordiv__(...). x.__rfloordiv__(y) <==> y//x. __rlshift__(...). x.__rlshift__(y) <==> y<<x. __rmod__(...). x.__rmod__(y) <==> y%x. __rmul__(...). x.__rmul__(y) <==> y*x. __ror__(...). x.__ror__(y) <==> y|x. __rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.PsiReturnType.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.PsiReturnType.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms.",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:289328,Modifiability,inherit,inherited,289328,"__rpow__(...). y.__rpow__(x[, z]) <==> pow(x, y[, z]). __rrshift__(...). x.__rrshift__(y) <==> y>>x. __rshift__(...). x.__rshift__(y) <==> x>>y. __rsub__(...). x.__rsub__(y) <==> y-x. __rtruediv__(...). x.__rtruediv__(y) <==> y/x. __rxor__(...). x.__rxor__(y) <==> y^x. __sub__(...). x.__sub__(y) <==> x-y. __truediv__(...). x.__truediv__(y) <==> x/y. __trunc__(...). Truncating an Integral returns itself. __xor__(...). x.__xor__(y) <==> x^y. bit_length(...). int.bit_length() -> int. Number of bits necessary to represent self in binary. >>> bin(37). ‘0b100101’. >>> (37).bit_length(). 6. conjugate(...). Returns self, the complex conjugate of any int. ———————————————————————-. Data descriptors inherited from __builtin__.int:. denominator. the denominator of a rational number in lowest terms. imag. the imaginary part of a complex number. numerator. the numerator of a rational number in lowest terms. real. the real part of a complex number. ———————————————————————-. Data and other attributes inherited from __builtin__.int:. __new__ = <built-in method __new__ of type object>. T.__new__(S, ...) -> a new object with type S, a subtype of T. psi4.PsiReturnType.bit_length()¶; Python Library Documentation: method_descriptor; bit_length(...). int.bit_length() -> int; Number of bits necessary to represent self in binary.; >>> bin(37). ‘0b100101’; >>> (37).bit_length(). 6. psi4.PsiReturnType.conjugate()¶; Python Library Documentation: method_descriptor; conjugate(...). Returns self, the complex conjugate of any int. psi4.PsiReturnType.denominator()¶; Python Library Documentation: getset descriptor __builtin__.int.denominator; denominator. the denominator of a rational number in lowest terms. psi4.PsiReturnType.imag()¶; Python Library Documentation: getset descriptor __builtin__.int.imag; imag. the imaginary part of a complex number. psi4.PsiReturnType.name()¶; Python Library Documentation: member descriptor Boost.Python.enum.name; name. psi4.PsiReturnType.names()¶; Python Library Do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:369436,Modifiability,extend,extend,369436,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:369484,Modifiability,extend,extend,369484,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:369492,Modifiability,extend,extend,369492,". void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturn",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:369539,Modifiability,extend,extend,369539,"i4.Wavefunction.sobasisset()¶; Python Library Documentation: method sobasisset; sobasisset(...) unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetP",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:369615,Modifiability,extend,extend,369615,"unbound psi4.Wavefunction method. sobasisset( (Wavefunction)arg1) -> SOBasisSet :. docstring; C++ signature :. N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}). psi4.Wavefunction.soccpi()¶; Python Library Documentation: method soccpi; soccpi(...) unbound psi4.Wavefunction method. soccpi( (Wavefunction)arg1) -> Dimension :. docstring; C++ signature :. N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelatio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:370030,Modifiability,extend,extend,370030,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:370078,Modifiability,extend,extend,370078,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:370086,Modifiability,extend,extend,370086,"nE soccpi(N3psi12WavefunctionE {lvalue}). matrix_vector¶. psi4.matrix_vector.append()¶; Python Library Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:370137,Modifiability,extend,extend,370137,"Documentation: method append; append(...) unbound psi4.matrix_vector method. append( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OneBodyAOInt; AngularMomentumInt; DipoleInt; ElectricFieldInt; ElectrostaticInt; KineticInt; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:370217,Modifiability,extend,extend,370217,"end( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). psi4.matrix_vector.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.matrix_vector method. extend( (matrix_vector)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE). vector_of_doubles¶. psi4.vector_of_doubles.append()¶; Python Library Documentation: method append; append(...) unbound psi4.vector_of_doubles method. append( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). psi4.vector_of_doubles.extend()¶; Python Library Documentation: method extend; extend(...) unbound psi4.vector_of_doubles method. extend( (vector_of_doubles)arg1, (object)arg2) -> None :. C++ signature :. void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE). Full Docs Output¶; Python Library Documentation: built-in module psi4. NAME; psi4. FILE; (built-in). CLASSES; Boost.Python.enum(__builtin__.int); DiagonalizeOrder; GeometryUnits; PsiReturnType; Boost.Python.instance(__builtin__.object); AOShellCombinationsIterator; BasisSet; BasisSetParser; Gaussian94BasisSetParser; CIVector; CdSalcList; CorrelationFactor; FittedSlaterCorrelationFactor; CubeProperties; DFChargeFitter; DFTensor; Deriv; Dimension; Dispersion; DoublePyBuffer; EFP; Environment; ExternalPotential; FCHKWriter; FittingMetric; Functional; GaussianShell; IO; IOManager; IntVector; IntegralFactory; JK; LaplaceDenominator; LibParallelHelper; Localizer; BoysLocalizer; PMLocalizer; Matrix; MatrixFactory; MintsHelper; MoldenWriter; Molecule; MultipoleSymmetry; NBOWriter; OEProp; OneBodyAOInt; AngularMomentumInt; DipoleInt; ElectricFieldInt; ElectrostaticInt; KineticInt; MultipoleInt; NablaInt; OverlapInt; PotentialInt; PseudospectralInt; QuadrupoleI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:372990,Modifiability,inherit,inherited,372990,"n); matrix_vector; vector_of_doubles; ; class AOShellCombinationsIterator(Boost.Python.instance); | Method resolution order:; | AOShellCombinationsIterator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | first(...); | first( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void first(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | is_done(...); | is_done( (AOShellCombinationsIterator)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_done(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | next(...); | next( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void next(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | p; | docstring; | ; | q; | docstring; | ; | r; | docstring; | ; | s; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:373170,Modifiability,inherit,inherited,373170,"{lvalue}); | ; | is_done(...); | is_done( (AOShellCombinationsIterator)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_done(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | next(...); | next( (AOShellCombinationsIterator)arg1) -> None :; | docstring; | ; | C++ signature :; | void next(N3psi27AOShellCombinationsIteratorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | p; | docstring; | ; | q; | docstring; | ; | r; | docstring; | ; | s; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void comp",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:373932,Modifiability,inherit,inherited,373932,"built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class AngularMomentumInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:374443,Modifiability,inherit,inherited,374443,"; | AngularMomentumInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(..",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:374849,Modifiability,inherit,inherited,374849,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_to_shell(...); | ao_to_shell( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i ao_to_shell(N3psi8BasisSetE {lvalue},i); | ; | decontract(...); | decontract( (BasisSet)arg1) -> BasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE decontract(N3psi8BasisSetE {lvalue}); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:375029,Modifiability,inherit,inherited,375029," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_to_shell(...); | ao_to_shell( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i ao_to_shell(N3psi8BasisSetE {lvalue},i); | ; | decontract(...); | decontract( (BasisSet)arg1) -> BasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE decontract(N3psi8BasisSetE {lvalue}); | ; | function_to_center(...); | function_to_center( (BasisSet)arg1, (int)arg2) -> int :; | Given a function number, return the number of the center it is on.; | ; | C++ signature :; | i fu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:381530,Modifiability,inherit,inherited,381530,"rbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :; | Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This cl",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:381710,Modifiability,inherit,inherited,381710,"arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:382466,Modifiability,inherit,inherited,382466," here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:382646,Modifiability,inherit,inherited,382646,"t__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:383392,Modifiability,inherit,inherited,383392,"; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | -------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:383680,Modifiability,inherit,inherited,383680,"--------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BoysLocalizer(Localizer); | docstring; | ; | Method resolution order:; | BoysLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:384050,Modifiability,inherit,inherited,384050,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:384314,Modifiability,inherit,inherited,384314,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ si",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:384494,Modifiability,inherit,inherited,384494,"alize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CIVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | axpy(...); | axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :; | docstring; | ; | C++ signature :; | void axpy(N3psi5detci6CIvectE {lvalue},d,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | close_io_files(...); | close_io_files( (CIVector)arg1, (int)arg2) -> None :; | docstring; | ; | C++ signature :; | void close_io_files(N3psi5detci6CIvectE {lvalue},i); | ; | copy(...); | copy( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:387748,Modifiability,inherit,inherited,387748," None :; | docstring; | ; | C++ signature :; | void set_nvec(N3psi5detci6CIvectE {lvalue},i); | ; | symnormalize(...); | symnormalize( (CIVector)arg1, (float)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void symnormalize(N3psi5detci6CIvectE {lvalue},d,i); | ; | vdot(...); | vdot( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> float :; | docstring; | ; | C++ signature :; | d vdot(N3psi5detci6CIvectE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | write(...); | write( (CIVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i write(N3psi5detci6CIvectE {lvalue},i,i); | ; | zero(...); | zero( (CIVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi5detci6CIvectE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | Returns a view of the CIVector's buffer; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIWavefunction(Wavefunction); | docstring; | ; | Method resolution order:; | CIWavefunction; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Hd_vector(...); | Hd_vector( (CIWavefunction)arg1, (int)arg2) -> CIVector :; | docstring; | ; | C++ signature :; | N5boost10sh",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:387928,Modifiability,inherit,inherited,387928,"{lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | write(...); | write( (CIVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i write(N3psi5detci6CIvectE {lvalue},i,i); | ; | zero(...); | zero( (CIVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void zero(N3psi5detci6CIvectE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | Returns a view of the CIVector's buffer; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CIWavefunction(Wavefunction); | docstring; | ; | Method resolution order:; | CIWavefunction; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Hd_vector(...); | Hd_vector( (CIWavefunction)arg1, (int)arg2) -> CIVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi5detci6CIvectEEE Hd_vector(N3psi5detci14CIWavefunctionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_mcscf(...); | compute_mcscf( (CIWavefunction)arg1) -> None :; | docstring; | ; | C++ signature :; | void com",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:393957,Modifiability,inherit,inherited,393957," -> None :; | docstring; | ; | C++ signature :; | void sigma(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | tpdm(...); | tpdm( (CIWavefunction)arg1, (CIVector)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE tpdm(N3psi5detci14CIWavefunctionE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i); | ; | transform_ci_integrals(...); | transform_ci_integrals( (CIWavefunction)arg1) -> None :; | docstring; | ; | C++ signature :; | void transform_ci_integrals(N3psi5detci14CIWavefunctionE {lvalue}); | ; | transform_mcscf_integrals(...); | transform_mcscf_integrals( (CIWavefunction)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void transform_mcscf_integrals(N3psi5detci14CIWavefunctionE {lvalue},b); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:404047,Modifiability,inherit,inherited,404047,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | -------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:404227,Modifiability,inherit,inherited,404227,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:404971,Modifiability,inherit,inherited,404971,"function)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CUHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | CUHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunctio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:405586,Modifiability,inherit,inherited,405586,"avefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:415676,Modifiability,inherit,inherited,415676,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSal",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:415856,Modifiability,inherit,inherited,415856,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class ca",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:416922,Modifiability,inherit,inherited,416922,"hon.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:417102,Modifiability,inherit,inherited,417102,"ass CdSalcList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CdSalcList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | matrix(...); | matrix( (CdSalcList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE matrix(N3psi10CdSalcListE {lvalue}); | ; | print_out(...); | print_out( (CdSalcList)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi10CdSalcListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boos",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:418202,Modifiability,inherit,inherited,418202,"------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CorrelationFactor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:418382,Modifiability,inherit,inherited,418382,".instance); | docstring; | ; | Method resolution order:; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,j); | ; | __init__( (object)arg1, (Vector)arg2, (Vector)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __we",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:419252,Modifiability,inherit,inherited,419252,"--------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFChargeFitter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFChargeFitter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:419432,Modifiability,inherit,inherited,419432,"ther attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class CubeProperties(Boost.Python.instance); | docstring; | ; | Method resolution order:; | CubeProperties; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_properties(...); | compute_properties( (CubeProperties)arg1) -> None :; | docstring; | ; | C++ signature :; | void compute_properties(N3psi14CubePropertiesE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFChargeFitter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFChargeFitter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...); | fit( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE fit(N3psi14DFChargeFitterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:421162,Modifiability,inherit,inherited,421162,">(...); | ; | d(...); | d( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE d(N3psi14DFChargeFitterE {lvalue}); | ; | fit(...); | fit( (DFChargeFitter)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE fit(N3psi14DFChargeFitterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setAuxiliary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | setD(...); | setD( (DFChargeFitter)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void setD(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | setPrimary(...); | setPrimary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setPrimary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFTensor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFTensor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Idfmo(...); | Idfmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Idfmo(N3psi8DFTensorE {lvalue}); | ; | Imo(...); | Imo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:421342,Modifiability,inherit,inherited,421342,"itterE {lvalue}); | ; | setAuxiliary(...); | setAuxiliary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setAuxiliary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | setD(...); | setD( (DFChargeFitter)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void setD(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | setPrimary(...); | setPrimary( (DFChargeFitter)arg1, (BasisSet)arg2) -> None :; | docstring; | ; | C++ signature :; | void setPrimary(N3psi14DFChargeFitterE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DFTensor(Boost.Python.instance); | docstring; | ; | Method resolution order:; | DFTensor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Idfmo(...); | Idfmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Idfmo(N3psi8DFTensorE {lvalue}); | ; | Imo(...); | Imo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Imo(N3psi8DFTensorE {lvalue}); | ; | Qmo(...); | Qmo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qmo(N3psi8DFTensorE {lvalue}); | ; | Qoo(...); | Qoo( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_pt",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:423413,Modifiability,inherit,inherited,423413,"x :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qov(N3psi8DFTensorE {lvalue}); | ; | Qso(...); | Qso( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qso(N3psi8DFTensorE {lvalue}); | ; | Qvv(...); | Qvv( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qvv(N3psi8DFTensorE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (Matrix)arg4, (int)arg5, (int)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,i); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Deriv(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Deriv; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:423593,Modifiability,inherit,inherited,423593,"trix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qso(N3psi8DFTensorE {lvalue}); | ; | Qvv(...); | Qvv( (DFTensor)arg1) -> Matrix :; | doctsring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Qvv(N3psi8DFTensorE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (Matrix)arg4, (int)arg5, (int)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE,i,i); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Deriv(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Deriv; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:425204,Modifiability,inherit,inherited,425204,"WavefunctionEEE); | ; | __init__( (object)arg1, (Wavefunction)arg2, (str)arg3, (bool)arg4, (bool)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE,c,b,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ; | set_deriv_density_backtransformed(...); | set_deriv_density_backtransformed( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_deriv_density_backtransformed(N3psi5DerivE {lvalue},b); | ; | set_ignore_reference(...); | set_ignore_reference( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_ignore_reference(N3psi5DerivE {lvalue},b); | ; | set_tpdm_presorted(...); | set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_tpdm_presorted(N3psi5DerivE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | -----------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:425384,Modifiability,inherit,inherited,425384,"e__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (Deriv)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE compute(N3psi5DerivE {lvalue}); | ; | set_deriv_density_backtransformed(...); | set_deriv_density_backtransformed( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_deriv_density_backtransformed(N3psi5DerivE {lvalue},b); | ; | set_ignore_reference(...); | set_ignore_reference( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_ignore_reference(N3psi5DerivE {lvalue},b); | ; | set_tpdm_presorted(...); | set_tpdm_presorted( (Deriv)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_tpdm_presorted(N3psi5DerivE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:426133,Modifiability,inherit,inherited,426133,"lue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnew",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:426362,Modifiability,inherit,inherited,426362,"------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:426497,Modifiability,inherit,inherited,426497,"_new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DiagonalizeOrder(Boost.Python.enum); | docstring; | ; | Method resolution order:; | DiagonalizeOrder; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Ascending = psi4.DiagonalizeOrder.Ascending; | ; | Descending = psi4.DiagonalizeOrder.Descending; | ; | names = {'Ascending': psi4.DiagonalizeOrder.Ascending, 'Descending': p...; | ; | values = {1: psi4.DiagonalizeOrder.Ascending, 3: psi4.DiagonalizeOrder...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:429176,Modifiability,inherit,inherited,429176,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dimension(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dimension; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Dimension)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i __getitem__(N3psi9DimensionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | vo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:429564,Modifiability,inherit,inherited,429564," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dimension(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dimension; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Dimension)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i __getitem__(N3psi9DimensionE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __init__( (object)arg1, (int)arg2, (str)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,Ss); | ; | __r",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:431921,Modifiability,inherit,inherited,431921," | n(...); | n( (Dimension)arg1) -> int :; | The order of the dimension; | ; | C++ signature :; | i n(N3psi9DimensionE {lvalue}); | ; | print_out(...); | print_out( (Dimension)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9DimensionE {lvalue}); | ; | to_tuple = _dimension_to_tuple(dim); | Converts a psi4.Dimension object to a tuple.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_list = _dimension_from_list(self, dims, name='New Dimension') from Boost.Python.class; | Builds a psi4.Dimension object from a python list or tuple. If a dimension; | object is passed a copy will be returned.; | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | name; | The name of the dimension. Used in printing.; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | --------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:432101,Modifiability,inherit,inherited,432101,"| void print_out(N3psi9DimensionE {lvalue}); | ; | to_tuple = _dimension_to_tuple(dim); | Converts a psi4.Dimension object to a tuple.; | ; | ----------------------------------------------------------------------; | Class methods defined here:; | ; | from_list = _dimension_from_list(self, dims, name='New Dimension') from Boost.Python.class; | Builds a psi4.Dimension object from a python list or tuple. If a dimension; | object is passed a copy will be returned.; | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | name; | The name of the dimension. Used in printing.; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12O",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:432845,Modifiability,inherit,inherited,432845,"--------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:433356,Modifiability,inherit,inherited,433356,"on order:; | DipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:433762,Modifiability,inherit,inherited,433762,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | a1(...); | a1( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a1(N3psi10DispersionE {lvalue}); | ; | a2(...); | a2( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a2(N3psi10DispersionE {lvalue}); | ; | bibtex(...); | bibtex( (Dispersion)arg1) -> str :; | Get the BibTeX key for the lit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:433942,Modifiability,inherit,inherited,433942," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Dispersion(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Dispersion; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | a1(...); | a1( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a1(N3psi10DispersionE {lvalue}); | ; | a2(...); | a2( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d a2(N3psi10DispersionE {lvalue}); | ; | bibtex(...); | bibtex( (Dispersion)arg1) -> str :; | Get the BibTeX key for the literature reference.; | ; | C++ signature :; | Ss bibtex(N3psi10DispersionE {lvalue}); | ; | citation(...); | citation( (Dispersion)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:438551,Modifiability,inherit,inherited,438551,"tation( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_citation(N3psi10DispersionE {lvalue},Ss); | ; | set_description(...); | set_description( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_description(N3psi10DispersionE {lvalue},Ss); | ; | set_name(...); | set_name( (Dispersion)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10DispersionE {lvalue},Ss); | ; | sr6(...); | sr6( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d sr6(N3psi10DispersionE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:438731,Modifiability,inherit,inherited,438731,"(str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10DispersionE {lvalue},Ss); | ; | sr6(...); | sr6( (Dispersion)arg1) -> float :; | docstring; | ; | C++ signature :; | d sr6(N3psi10DispersionE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | D",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:439682,Modifiability,inherit,inherited,439682,"---------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class EFP(Boost.Python.instance); | Class interfacing with libefp; | ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes l",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:439862,Modifiability,inherit,inherited,439862,"method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class EFP(Boost.Python.instance); | Class interfacing with libefp; | ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | pr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:441224,Modifiability,inherit,inherited,441224,"| ; | Method resolution order:; | EFP; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | print_out( (EFP)arg1) -> None :; | Prints options settings and EFP and QM geometries; | ; | C++ signature :; | void print_out(N3psi3efp3EFPE {lvalue}); | ; | set_qm_atoms(...); | set_qm_atoms( (EFP)arg1) -> None :; | Provides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:441404,Modifiability,inherit,inherited,441404,"ject,N3psi7OptionsE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute(...); | compute( (EFP)arg1) -> None :; | Computes libefp energies and, if active, torque; | ; | C++ signature :; | void compute(N3psi3efp3EFPE {lvalue}); | ; | nfragments(...); | nfragments( (EFP)arg1) -> int :; | Returns the number of EFP fragments in the molecule; | ; | C++ signature :; | i nfragments(N3psi3efp3EFPE {lvalue}); | ; | print_out(...); | print_out( (EFP)arg1) -> None :; | Prints options settings and EFP and QM geometries; | ; | C++ signature :; | void print_out(N3psi3efp3EFPE {lvalue}); | ; | set_qm_atoms(...); | set_qm_atoms( (EFP)arg1) -> None :; | Provides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:442156,Modifiability,inherit,inherited,442156,"ides libefp with QM fragment information; | ; | C++ signature :; | void set_qm_atoms(N3psi3efp3EFPE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:442689,Modifiability,inherit,inherited,442689,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:442883,Modifiability,inherit,inherited,442883,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:443063,Modifiability,inherit,inherited,443063," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:443821,Modifiability,inherit,inherited,443821,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectricFieldInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:444332,Modifiability,inherit,inherited,444332,"r:; | ElectricFieldInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:444738,Modifiability,inherit,inherited,444738,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:444918,Modifiability,inherit,inherited,444918," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:445676,Modifiability,inherit,inherited,445676,"he one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ElectrostaticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:446187,Modifiability,inherit,inherited,446187,"r:; | ElectrostaticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:446593,Modifiability,inherit,inherited,446593,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ---------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:446773,Modifiability,inherit,inherited,446773," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherit",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:447701,Modifiability,inherit,inherited,447701,"riptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:447881,Modifiability,inherit,inherited,447881," | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Environment(Boost.Python.instance); | Method resolution order:; | Environment; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Environment)arg1, (str)arg2) -> str :; | docstring; | ; | C++ signature :; | Ss __getitem__(N3psi7Process11EnvironmentE {lvalue},Ss); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstrin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:448659,Modifiability,inherit,inherited,448659,"---------; | Data and other attributes defined here:; | ; | __instance_size__ = 464; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfComplementERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfComplementERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:449192,Modifiability,inherit,inherited,449192,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:449386,Modifiability,inherit,inherited,449386,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:449566,Modifiability,inherit,inherited,449566," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signatu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:450324,Modifiability,inherit,inherited,450324,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ErfERI(TwoElectronInt); | docstring; | ; | Method resolution order:; | ErfERI; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:450857,Modifiability,inherit,inherited,450857,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:451051,Modifiability,inherit,inherited,451051,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:451231,Modifiability,inherit,inherited,451231," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ExternalPotential(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ExternalPotential; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | addBasis(...); | addBasis( (ExternalPotential)arg1, (BasisSet)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void addBasis(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | addCharge(...); | addCharge( (ExternalPotential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:453262,Modifiability,inherit,inherited,453262,"otential)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> None :; | docstring; | ; | C++ signature :; | void addCharge(N3psi17ExternalPotentialE {lvalue},d,d,d,d); | ; | clear(...); | clear( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi17ExternalPotentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class can",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:453442,Modifiability,inherit,inherited,453442,"otentialE {lvalue}); | ; | computePotentialMatrix(...); | computePotentialMatrix( (ExternalPotential)arg1, (BasisSet)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE computePotentialMatrix(N3psi17ExternalPotentialE {lvalue},N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | print_out(...); | print_out( (ExternalPotential)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi17ExternalPotentialE {lvalue}); | ; | setName(...); | setName( (ExternalPotential)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void setName(N3psi17ExternalPotentialE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:454194,Modifiability,inherit,inherited,454194,"------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:454727,Modifiability,inherit,inherited,454727,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:454921,Modifiability,inherit,inherited,454921,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:455101,Modifiability,inherit,inherited,455101," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | do",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:455885,Modifiability,inherit,inherited,455885,"BodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12DoubleCommutator(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12DoubleCommutator; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:456418,Modifiability,inherit,inherited,456418,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:456612,Modifiability,inherit,inherited,456612,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Ra",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:456792,Modifiability,inherit,inherited,456792," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signatu",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:457550,Modifiability,inherit,inherited,457550,"riptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12G12(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12G12; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:458083,Modifiability,inherit,inherited,458083,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:458277,Modifiability,inherit,inherited,458277,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:458457,Modifiability,inherit,inherited,458457," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:459223,Modifiability,inherit,inherited,459223,"inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class F12Squared(TwoElectronInt); | docstring; | ; | Method resolution order:; | F12Squared; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:459756,Modifiability,inherit,inherited,459756,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:459950,Modifiability,inherit,inherited,459950,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:460130,Modifiability,inherit,inherited,460130," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | --------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:460959,Modifiability,inherit,inherited,460959," ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:461139,Modifiability,inherit,inherited,461139,"---------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FCHKWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FCHKWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (FCHKWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi10FCHKWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:461984,Modifiability,inherit,inherited,461984,"----------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:462380,Modifiability,inherit,inherited,462380,"f Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittedSlaterCorrelationFactor(CorrelationFactor); | docstring; | ; | Method resolution order:; | FittedSlaterCorrelationFactor; | CorrelationFactor; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (bool)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | form_QR_inverse(...); | form_QR_inverse( (FittingMetric)arg1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:462560,Modifiability,inherit,inherited,462560,"e; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (float)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | exponent(...); | exponent( (FittedSlaterCorrelationFactor)arg1) -> float :; | ; | C++ signature :; | d exponent(N3psi29FittedSlaterCorrelationFactorE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from CorrelationFactor:; | ; | set_params(...); | set_params( (CorrelationFactor)arg1, (Vector)arg2, (Vector)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_params(N3psi17CorrelationFactorE {lvalue},N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class FittingMetric(Boost.Python.instance); | docstring; | ; | Method resolution order:; | FittingMetric; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (bool)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,b); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | form_QR_inverse(...); | form_QR_inverse( (FittingMetric)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void form_QR_inverse(N3psi13FittingMetricE {lvalue},d); | ; | form_cholesky_inverse(...); | form_cholesky_inverse( (FittingMetric)arg1) -> None :; | docstring; | ; | C++ signature :; | void form_cholesky_inverse",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:465249,Modifiability,inherit,inherited,465249," str :; | docstring; | ; | C++ signature :; | Ss get_algorithm(N3psi13FittingMetricE {lvalue}); | ; | get_metric(...); | get_metric( (FittingMetric)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE get_metric(N3psi13FittingMetricE {lvalue}); | ; | get_pivots(...); | get_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_pivots(N3psi13FittingMetricE {lvalue}); | ; | get_reverse_pivots(...); | get_reverse_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_reverse_pivots(N3psi13FittingMetricE {lvalue}); | ; | is_inverted(...); | is_inverted( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_inverted(N3psi13FittingMetricE {lvalue}); | ; | is_poisson(...); | is_poisson( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_poisson(N3psi13FittingMetricE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Functional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Functional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | alpha(...); | alpha( (Functional)arg1) -> float :; | docstring; | ; | C++ signature :; | d alpha(N3psi10FunctionalE {lvalue}); | ; | citation(...); | citation( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss citation(N3psi10FunctionalE {lvalue}); | ; | description(...); | descr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:465429,Modifiability,inherit,inherited,465429,"d_ptrIN3psi6MatrixEEE get_metric(N3psi13FittingMetricE {lvalue}); | ; | get_pivots(...); | get_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_pivots(N3psi13FittingMetricE {lvalue}); | ; | get_reverse_pivots(...); | get_reverse_pivots( (FittingMetric)arg1) -> IntVector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9IntVectorEEE get_reverse_pivots(N3psi13FittingMetricE {lvalue}); | ; | is_inverted(...); | is_inverted( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_inverted(N3psi13FittingMetricE {lvalue}); | ; | is_poisson(...); | is_poisson( (FittingMetric)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_poisson(N3psi13FittingMetricE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Functional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Functional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | alpha(...); | alpha( (Functional)arg1) -> float :; | docstring; | ; | C++ signature :; | d alpha(N3psi10FunctionalE {lvalue}); | ; | citation(...); | citation( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss citation(N3psi10FunctionalE {lvalue}); | ; | description(...); | description( (Functional)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss description(N3psi10FunctionalE {lvalue}); | ; | is_gga(...); | is_gga( (Functional)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:469861,Modifiability,inherit,inherited,469861,"loat)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_meta_cutoff(N3psi10FunctionalE {lvalue},d); | ; | set_name(...); | set_name( (Functional)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_name(N3psi10FunctionalE {lvalue},Ss); | ; | set_omega(...); | set_omega( (Functional)arg1, (float)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_omega(N3psi10FunctionalE {lvalue},d); | ; | set_parameter(...); | set_parameter( (Functional)arg1, (str)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_parameter(N3psi10FunctionalE {lvalue},Ss,d); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_base(...); | build_base( (str)arg1) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE build_base(Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ---------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:470041,Modifiability,inherit,inherited,470041,"ne :; | docstring; | ; | C++ signature :; | void set_omega(N3psi10FunctionalE {lvalue},d); | ; | set_parameter(...); | set_parameter( (Functional)arg1, (str)arg2, (float)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_parameter(N3psi10FunctionalE {lvalue},Ss,d); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_base(...); | build_base( (str)arg1) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE build_base(Ss); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:470848,Modifiability,inherit,inherited,470848,"t be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GaussianShell(Boost.Python.instance); | docstring; | ; | Method resolution order:; | GaussianShell; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | coef(...); | coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d coef(N3psi13GaussianShellE {lvalue},i); | ; | erd_coef(...); | erd_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d erd_coef(N3psi13Gaussi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:471028,Modifiability,inherit,inherited,471028,"-------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Gaussian94BasisSetParser(BasisSetParser); | docstring; | ; | Method resolution order:; | Gaussian94BasisSetParser; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GaussianShell(Boost.Python.instance); | docstring; | ; | Method resolution order:; | GaussianShell; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | coef(...); | coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d coef(N3psi13GaussianShellE {lvalue},i); | ; | erd_coef(...); | erd_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d erd_coef(N3psi13GaussianShellE {lvalue},i); | ; | exp(...); | exp( (GaussianShell)arg1, (int)arg2) -> float :; | Returns the exponent of the given primitive; | ; | C++ signature :; | d exp(N3psi13GaussianShellE {lvalue},i); | ; | is_cartesian(...); | i",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:473131,Modifiability,inherit,inherited,473131,"ianShellE {lvalue},i); | ; | is_cartesian(...); | is_cartesian( (GaussianShell)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_cartesian(N3psi13GaussianShellE {lvalue}); | ; | is_pure(...); | is_pure( (GaussianShell)arg1) -> bool :; | docstring; | ; | C++ signature :; | b is_pure(N3psi13GaussianShellE {lvalue}); | ; | original_coef(...); | original_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d original_coef(N3psi13GaussianShellE {lvalue},i); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | AMCHAR; | docstring; | ; | am; | docstring; | ; | amchar; | docstring; | ; | function_index; | Basis function index where this shell starts.; | ; | ncartesian; | docstring; | ; | ncenter; | docstring; | ; | nfunction; | docstring; | ; | nprimitive; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom,",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:473311,Modifiability,inherit,inherited,473311,"riginal_coef(...); | original_coef( (GaussianShell)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d original_coef(N3psi13GaussianShellE {lvalue},i); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | AMCHAR; | docstring; | ; | am; | docstring; | ; | amchar; | docstring; | ; | function_index; | Basis function index where this shell starts.; | ; | ncartesian; | docstring; | ; | ncenter; | docstring; | ; | nfunction; | docstring; | ; | nprimitive; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:474030,Modifiability,inherit,inherited,474030,"lass cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __get",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:474259,Modifiability,inherit,inherited,474259,"| ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:474394,Modifiability,inherit,inherited,474394,"| __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class GeometryUnits(Boost.Python.enum); | docstring; | ; | Method resolution order:; | GeometryUnits; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Angstrom = psi4.GeometryUnits.Angstrom; | ; | Bohr = psi4.GeometryUnits.Bohr; | ; | names = {'Angstrom': psi4.GeometryUnits.Angstrom, 'Bohr': psi4.Geometr...; | ; | values = {0: psi4.GeometryUnits.Angstrom, 1: psi4.GeometryUnits.Bohr}; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:477073,Modifiability,inherit,inherited,477073,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:477461,Modifiability,inherit,inherited,477461," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:478678,Modifiability,inherit,inherited,478678,"d from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class HF(Wavefunction); | docstring; | ; | Method resolution order:; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:488768,Modifiability,inherit,inherited,488768,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IO(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IO; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | close(...); | close( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void close(N3psi4PSIOE {lvalue},j,i); | ; | open(...); | open( (IO)arg1, (int)arg2, (int)arg3) -> N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:488948,Modifiability,inherit,inherited,488948,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IO(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IO; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | close(...); | close( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void close(N3psi4PSIOE {lvalue},j,i); | ; | open(...); | open( (IO)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void open(N3psi4PSIOE {lvalue},j,i); | ; | open_check(...); | open_check( (IO)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i open_check(N3psi4PSIOE {lvalue},j)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:491670,Modifiability,inherit,inherited,491670,"cstring; | ; | C++ signature :; | void tocprint(N3psi4PSIOE {lvalue},j); | ; | tocwrite(...); | tocwrite( (IO)arg1, (int)arg2) -> None :; | docstring; | ; | C++ signature :; | void tocwrite(N3psi4PSIOE {lvalue},j); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | change_file_namespace(...); | change_file_namespace( (int)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void change_file_namespace(j,Ss,Ss); | ; | get_default_namespace(...); | get_default_namespace() -> str :; | docstring; | ; | C++ signature :; | Ss get_default_namespace(); | ; | set_default_namespace(...); | set_default_namespace( (str)arg1) -> None :; | docstring; | ; | C++ signature :; | void set_default_namespace(Ss); | ; | shared_object(...); | shared_object() -> IO :; | ; | C++ signature :; | N5boost10shared_ptrIN3psi4PSIOEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IOManager(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IOManager; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | crashclean(...); | crashclean( (IOManager)arg1) -> None :; | docstring; | ; | C++ signature :; | void crashclean(N3psi11PSIOManage",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:491850,Modifiability,inherit,inherited,491850,"----------; | Static methods defined here:; | ; | change_file_namespace(...); | change_file_namespace( (int)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void change_file_namespace(j,Ss,Ss); | ; | get_default_namespace(...); | get_default_namespace() -> str :; | docstring; | ; | C++ signature :; | Ss get_default_namespace(); | ; | set_default_namespace(...); | set_default_namespace( (str)arg1) -> None :; | docstring; | ; | C++ signature :; | void set_default_namespace(Ss); | ; | shared_object(...); | shared_object() -> IO :; | ; | C++ signature :; | N5boost10shared_ptrIN3psi4PSIOEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IOManager(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IOManager; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | crashclean(...); | crashclean( (IOManager)arg1) -> None :; | docstring; | ; | C++ signature :; | void crashclean(N3psi11PSIOManagerE {lvalue}); | ; | get_default_path(...); | get_default_path( (IOManager)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss get_default_path(N3psi11PSIOManagerE {lvalue}); | ; | get_file_path(...); | get_file_path( (IOManager)arg1, (int)arg2) -> str :; | docstring; | ; | C+",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:494670,Modifiability,inherit,inherited,494670,"d set_default_path(N3psi11PSIOManagerE {lvalue},Ss); | ; | set_specific_path(...); | set_specific_path( (IOManager)arg1, (int)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_path(N3psi11PSIOManagerE {lvalue},i,Ss); | ; | set_specific_retention(...); | set_specific_retention( (IOManager)arg1, (int)arg2, (bool)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_retention(N3psi11PSIOManagerE {lvalue},i,b); | ; | write_scratch_file(...); | write_scratch_file( (IOManager)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void write_scratch_file(N3psi11PSIOManagerE {lvalue},Ss,Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> IOManager :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi11PSIOManagerEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:494850,Modifiability,inherit,inherited,494850,"cific_retention( (IOManager)arg1, (int)arg2, (bool)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_specific_retention(N3psi11PSIOManagerE {lvalue},i,b); | ; | write_scratch_file(...); | write_scratch_file( (IOManager)arg1, (str)arg2, (str)arg3) -> None :; | docstring; | ; | C++ signature :; | void write_scratch_file(N3psi11PSIOManagerE {lvalue},Ss,Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> IOManager :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi11PSIOManagerEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntVector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntVector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); | dim( (IntVector)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:496444,Modifiability,inherit,inherited,496444,"ne :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | dim(...); | dim( (IntVector)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (IntVector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi9IntVectorE {lvalue}); | ; | print_out(...); | print_out( (IntVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9IntVectorE {lvalue}); | ; | set(...); | set( (IntVector)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi9IntVectorE {lvalue},i,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntegralFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntegralFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrI",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:496624,Modifiability,inherit,inherited,496624,"ignature :; | i dim(N3psi9IntVectorE {lvalue},i); | ; | get(...); | get( (IntVector)arg1, (int)arg2, (int)arg3) -> int :; | docstring; | ; | C++ signature :; | i get(N3psi9IntVectorE {lvalue},i,i); | ; | nirrep(...); | nirrep( (IntVector)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi9IntVectorE {lvalue}); | ; | print_out(...); | print_out( (IntVector)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi9IntVectorE {lvalue}); | ; | set(...); | set( (IntVector)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void set(N3psi9IntVectorE {lvalue},i,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class IntegralFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | IntegralFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2, (BasisSet)arg3, (BasisSet)arg4, (BasisSet)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __init__( (object)arg1, (BasisSet)arg2 [, (BasisSet)arg3]) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE [,N5boost10shared_ptrIN3psi8BasisSetEEE]); | ; | __reduce__ = <unnamed Boost.Python",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:502881,Modifiability,inherit,inherited,502881,"3 [, (bool)arg4]]) -> TwoBodyAOInt :; | docstring; | ; | C++ signature :; | PN3psi12TwoBodyAOIntE f12g12(N3psi15IntegralFactoryE {lvalue},N5boost10shared_ptrIN3psi17CorrelationFactorEEE [,i [,b]]); | ; | overlap_3c(...); | overlap_3c( (IntegralFactory)arg1) -> ThreeCenterOverlapInt :; | docstring; | ; | C++ signature :; | PN3psi21ThreeCenterOverlapIntE overlap_3c(N3psi15IntegralFactoryE {lvalue}); | ; | shells_iterator(...); | shells_iterator( (IntegralFactory)arg1) -> AOShellCombinationsIterator :; | docstring; | ; | C++ signature :; | PN3psi27AOShellCombinationsIteratorE shells_iterator(N3psi15IntegralFactoryE {lvalue}); | ; | so_multipoles(...); | so_multipoles( (IntegralFactory)arg1, (int)arg2) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_multipoles(N3psi15IntegralFactoryE {lvalue},i); | ; | so_overlap(...); | so_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_overlap(N3psi15IntegralFactoryE {lvalue} [,i]); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class JK(Boost.Python.instance); | docstring; | ; | Method resolution order:; | JK; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C_left(...); | C_left( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_left(N3psi2JKE {lvalue}); | ; | C_right(...); | C_right( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_right(N3psi2JKE {lvalue}); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:503061,Modifiability,inherit,inherited,503061,"ralFactory)arg1) -> ThreeCenterOverlapInt :; | docstring; | ; | C++ signature :; | PN3psi21ThreeCenterOverlapIntE overlap_3c(N3psi15IntegralFactoryE {lvalue}); | ; | shells_iterator(...); | shells_iterator( (IntegralFactory)arg1) -> AOShellCombinationsIterator :; | docstring; | ; | C++ signature :; | PN3psi27AOShellCombinationsIteratorE shells_iterator(N3psi15IntegralFactoryE {lvalue}); | ; | so_multipoles(...); | so_multipoles( (IntegralFactory)arg1, (int)arg2) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_multipoles(N3psi15IntegralFactoryE {lvalue},i); | ; | so_overlap(...); | so_overlap( (IntegralFactory)arg1 [, (int)arg2]) -> object :; | docstring; | ; | C++ signature :; | PN3psi12OneBodySOIntE so_overlap(N3psi15IntegralFactoryE {lvalue} [,i]); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class JK(Boost.Python.instance); | docstring; | ; | Method resolution order:; | JK; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C_left(...); | C_left( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_left(N3psi2JKE {lvalue}); | ; | C_right(...); | C_right( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue} C_right(N3psi2JKE {lvalue}); | ; | D(...); | D( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE D(N3psi2JKE {lvalue}); | ; | J(...); | J( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:505524,Modifiability,inherit,inherited,505524,"mpute( (JK)arg1) -> None :; | ; | C++ signature :; | void compute(N3psi2JKE {lvalue}); | ; | finalize(...); | finalize( (JK)arg1) -> None :; | ; | C++ signature :; | void finalize(N3psi2JKE {lvalue}); | ; | initialize(...); | initialize( (JK)arg1) -> None :; | ; | C++ signature :; | void initialize(N3psi2JKE {lvalue}); | ; | print_header(...); | print_header( (JK)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_header(N3psi2JKE {lvalue}); | ; | wK(...); | wK( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE wK(N3psi2JKE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_JK(...); | build_JK( (BasisSet)arg1) -> JK :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi2JKEEE build_JK(N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:505704,Modifiability,inherit,inherited,505704,"t_header( (JK)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_header(N3psi2JKE {lvalue}); | ; | wK(...); | wK( (JK)arg1) -> matrix_vector :; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE wK(N3psi2JKE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_JK(...); | build_JK( (BasisSet)arg1) -> JK :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi2JKEEE build_JK(N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:506450,Modifiability,inherit,inherited,506450,"; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class KineticInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:506961,Modifiability,inherit,inherited,506961,"n order:; | KineticInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:507367,Modifiability,inherit,inherited,507367,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:507547,Modifiability,inherit,inherited,507547," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:508723,Modifiability,inherit,inherited,508723,"| __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LaplaceDenominator(Boost.Python.instance); | docstring; | ; | Method resolution order:; | LaplaceDenominator; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_vir(N3psi18LaplaceDenominatorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LibParallelHelper(Boost.Python.instance); | Method resolution order:; | LibParallelHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | AddTask(...); | AddTask( (LibParallelHelper)arg1, (str)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void AddTask(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python3strE {lvalue},i); | ; | Begin(...); | Begin( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Begin(N3psi11LibParall",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:508903,Modifiability,inherit,inherited,508903,"or; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Vector)arg2, (Vector)arg3, (float)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,d); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | denominator_occ(...); | denominator_occ( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_occ(N3psi18LaplaceDenominatorE {lvalue}); | ; | denominator_vir(...); | denominator_vir( (LaplaceDenominator)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE denominator_vir(N3psi18LaplaceDenominatorE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class LibParallelHelper(Boost.Python.instance); | Method resolution order:; | LibParallelHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | AddTask(...); | AddTask( (LibParallelHelper)arg1, (str)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void AddTask(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python3strE {lvalue},i); | ; | Begin(...); | Begin( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Begin(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Done(...); | Done( (LibParallelHelper)arg1) -> bool :; | ; | C++ signature :; | b Done(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | MakeJob(...); | MakeJob( (LibParallelHelper)arg1) -> None :; | ;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:510717,Modifiability,inherit,inherited,510717,"llelHelperE {lvalue}); | ; | Done(...); | Done( (LibParallelHelper)arg1) -> bool :; | ; | C++ signature :; | b Done(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | MakeJob(...); | MakeJob( (LibParallelHelper)arg1) -> None :; | ; | C++ signature :; | void MakeJob(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Next(...); | Next( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Next(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Synch(...); | Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :; | ; | C++ signature :; | N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 48; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:510897,Modifiability,inherit,inherited,510897," :; | ; | C++ signature :; | void MakeJob(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Next(...); | Next( (LibParallelHelper)arg1) -> str :; | ; | C++ signature :; | N5boost6python3strE Next(N3psi11LibParallel17LibParallelHelperE {lvalue}); | ; | Synch(...); | Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :; | ; | C++ signature :; | N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 48; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:512417,Modifiability,inherit,inherited,512417,"__(S, ...) -> a new object with type S, a subtype of T; ; class Localizer(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Matrix(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Matrix; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Matrix)arg1, (tuple)arg2) -> float ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:512597,Modifiability,inherit,inherited,512597,"-----------------; | Static methods defined here:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Matrix(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Matrix; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Matrix)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6MatrixE {lvalue},N5boost6python5tupleE); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2, (int)arg3) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,i); | ; | __init__( (object)arg1, (str)arg2, (int)arg3, (int)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss,i,i); | ; | __init__( (object)arg1, (str)arg2, (Dimension)a",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:524848,Modifiability,inherit,inherited,524848,"ptional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MatrixFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:525028,Modifiability,inherit,inherited,525028," | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MatrixFactory(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ---------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:526463,Modifiability,inherit,inherited,526463,"olution order:; | MatrixFactory; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrix(...); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> MatrixFactory :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi13MatrixFactoryEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MintsHelper(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MintsHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_angular_momentum(...); | ao_angular_momentum( (Mints",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:526643,Modifiability,inherit,inherited,526643,"); | create_matrix( (MatrixFactory)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue}); | ; | create_matrix( (MatrixFactory)arg1, (str)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE create_matrix(N3psi13MatrixFactoryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | shared_object(...); | shared_object() -> MatrixFactory :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi13MatrixFactoryEEE shared_object(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MintsHelper(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MintsHelper; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (BasisSet)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi8BasisSetEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ao_angular_momentum(...); | ao_angular_momentum( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE ao_angular_momentum(N3psi11MintsHelperE {lvalue}); | ; | ao_erf_eri(...); | ao_erf_eri( (MintsHelper)arg1, (float)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:540455,Modifiability,inherit,inherited,540455," so_overlap( (MintsHelper)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_overlap(N3psi11MintsHelperE {lvalue}); | ; | so_potential(...); | so_potential( (MintsHelper)arg1, (bool)arg2) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_potential(N3psi11MintsHelperE {lvalue},b); | ; | so_quadrupole(...); | so_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | so_traceless_quadrupole(...); | so_traceless_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_traceless_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | sobasisset(...); | sobasisset( (MintsHelper)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi11MintsHelperE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MoldenWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MoldenWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:540635,Modifiability,inherit,inherited,540635,"rix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE so_potential(N3psi11MintsHelperE {lvalue},b); | ; | so_quadrupole(...); | so_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | so_traceless_quadrupole(...); | so_traceless_quadrupole( (MintsHelper)arg1) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE so_traceless_quadrupole(N3psi11MintsHelperE {lvalue}); | ; | sobasisset(...); | sobasisset( (MintsHelper)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi11MintsHelperE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MoldenWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MoldenWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:542131,Modifiability,inherit,inherited,542131,"st.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:542311,Modifiability,inherit,inherited,542311,"te( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6, (Vector)arg7, (Vector)arg8) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | writeNO(...); | writeNO( (MoldenWriter)arg1, (str)arg2, (Matrix)arg3, (Matrix)arg4, (Vector)arg5, (Vector)arg6) -> None :; | docstring; | ; | C++ signature :; | void writeNO(N3psi12MoldenWriterE {lvalue},Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi6VectorEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Molecule(Boost.Python.instance); | Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; | ; | Method resolution order:; | Molecule; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | BFS(self); | Perform a breadth-first search (BFS) on the real atoms; | in molecule, returning an array of atom indices of fragments.; | Relies upon van der Waals radii and so faulty for close; | (esp. hydrogen-bonded) fragments. Original code from; | Michael S. Marshall.; | ; | Z(...); | Z( (Molecule)arg1, (int)arg2) -> float :; | Nuclear charge of atom; | ; | C++ signature :; | d Z(N3psi8MoleculeE {lvalue},i); | ; | __getattr__ = new_get_attr(self, name); | Functio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:548621,Modifiability,variab,variable,548621,"on(...); | fix_orientation( (Molecule)arg1, (bool)arg2) -> None :; | Fix the orientation at its current frame; | ; | C++ signature :; | void fix_orientation(N3psi8MoleculeE {lvalue},b); | ; | form_symmetry_information(...); | form_symmetry_information( (Molecule)arg1, (float)arg2) -> None :; | Uses the point group object obtain by calling point_group(); | ; | C++ signature :; | void form_symmetry_information(N3psi8MoleculeE {lvalue},d); | ; | geometry(...); | geometry( (Molecule)arg1) -> Matrix :; | Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); | ; | C++ signature :; | N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}); | ; | get_full_point_group(...); | get_full_point_group( (Molecule)arg1) -> str :; | Gets point group name such as C3v or S8; | ; | C++ signature :; | Ss get_full_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:548878,Modifiability,variab,variable,548878,"mation( (Molecule)arg1, (float)arg2) -> None :; | Uses the point group object obtain by calling point_group(); | ; | C++ signature :; | void form_symmetry_information(N3psi8MoleculeE {lvalue},d); | ; | geometry(...); | geometry( (Molecule)arg1) -> Matrix :; | Gets the geometry as a (Natom X 3) matrix of coordinates (in Bohr); | ; | C++ signature :; | N3psi6MatrixE geometry(N3psi8MoleculeE {lvalue}); | ; | get_full_point_group(...); | get_full_point_group( (Molecule)arg1) -> str :; | Gets point group name such as C3v or S8; | ; | C++ signature :; | Ss get_full_point_group(N3psi8MoleculeE {lvalue}); | ; | get_variable(...); | get_variable( (Molecule)arg1, (str)arg2) -> float :; | Checks if variable arg2 is in the list, sets it to val and returns true if it is, and returns false if not; | ; | C++ signature :; | d get_variable(N3psi8MoleculeE {lvalue},Ss); | ; | is_variable(...); | is_variable( (Molecule)arg1, (str)arg2) -> bool :; | Checks if variable arg2 is in the list, returns true if it is, and returns false if not; | ; | C++ signature :; | b is_variable(N3psi8MoleculeE {lvalue},Ss); | ; | label(...); | label( (Molecule)arg1, (int)arg2) -> str :; | Gets the original label of the atom as given in the input file (C2, H4); | ; | C++ signature :; | Ss label(N3psi8MoleculeE {lvalue},i); | ; | mass(...); | mass( (Molecule)arg1, (int)arg2) -> float :; | Gets mass of atom arg2; | ; | C++ signature :; | d mass(N3psi8MoleculeE {lvalue},i); | ; | molecular_charge(...); | molecular_charge( (Molecule)arg1) -> int :; | Gets the molecular charge; | ; | C++ signature :; | i molecular_charge(N3psi8MoleculeE {lvalue}); | ; | move_to_com(...); | move_to_com( (Molecule)arg1) -> None :; | Moves molecule to center of mass; | ; | C++ signature :; | void move_to_com(N3psi8MoleculeE {lvalue}); | ; | multiplicity(...); | multiplicity( (Molecule)arg1) -> int :; | Gets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | i multiplicity(N3psi8MoleculeE {lvalue}); | ; | name(...); | n",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:553324,Modifiability,extend,extended,553324,"at)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflies_symbol(...); | schoenflies_symbol( (Molecule)arg1) -> str :; | Returns the Schoenflies symbol; | ; | C++ signature :; | Ss schoenflies_symbol(N3psi8MoleculeE {lvalue}); | ; | set_active_fragment(...); | set_active_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Real; | ; | C++ signature",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:557297,Modifiability,variab,variable,557297," | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:557335,Modifiability,variab,variables,557335," | set_molecular_charge(...); | set_molecular_charge( (Molecule)arg1, (int)arg2) -> None :; | Sets the molecular charge; | ; | C++ signature :; | void set_molecular_charge(N3psi8MoleculeE {lvalue},i); | ; | set_multiplicity(...); | set_multiplicity( (Molecule)arg1, (int)arg2) -> None :; | Sets the multiplicity (defined as 2Ms + 1); | ; | C++ signature :; | void set_multiplicity(N3psi8MoleculeE {lvalue},i); | ; | set_name(...); | set_name( (Molecule)arg1, (str)arg2) -> None :; | Sets molecule name; | ; | C++ signature :; | void set_name(N3psi8MoleculeE {lvalue},Ss); | ; | set_point_group(...); | set_point_group( (Molecule)arg1, (PointGroup)arg2) -> None :; | Sets the molecular point group to the point group object arg2; | ; | C++ signature :; | void set_point_group(N3psi8MoleculeE {lvalue},N5boost10shared_ptrIN3psi10PointGroupEEE); | ; | set_variable(...); | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:558218,Modifiability,variab,variable,558218,"; | set_variable( (Molecule)arg1, (str)arg2, (float)arg3) -> None :; | Assigns the value arg3 to the variable arg2 in the list of geometry variables, then calls update_geometry(); | ; | C++ signature :; | void set_variable(N3psi8MoleculeE {lvalue},Ss,d); | ; | symbol(...); | symbol( (Molecule)arg1, (int)arg2) -> str :; | Gets the cleaned up label of atom arg2 (C2 => C, H4 = H); | ; | C++ signature :; | Ss symbol(N3psi8MoleculeE {lvalue},i); | ; | symmetrize(...); | symmetrize( (Molecule)arg1, (float)arg2) -> None :; | Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry.; | ; | C++ signature :; | void symmetrize(N3psi8MoleculeE {lvalue},d); | ; | translate(...); | translate( (Molecule)arg1, (Vector3)arg2) -> None :; | Translates molecule by arg2; | ; | C++ signature :; | void translate(N3psi8MoleculeE {lvalue},N3psi7Vector3E); | ; | update_geometry(...); | update_geometry( (Molecule)arg1) -> None :; | Reevaluates the geometry with current variable values, orientation directives, etc. Must be called after initial Molecule definition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_strin",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:559632,Modifiability,inherit,inherited,559632,"nition by string.; | ; | C++ signature :; | void update_geometry(N3psi8MoleculeE {lvalue}); | ; | x(...); | x( (Molecule)arg1, (int)arg2) -> float :; | x position of atom; | ; | C++ signature :; | d x(N3psi8MoleculeE {lvalue},i); | ; | y(...); | y( (Molecule)arg1, (int)arg2) -> float :; | y position of atom; | ; | C++ signature :; | d y(N3psi8MoleculeE {lvalue},i); | ; | z(...); | z( (Molecule)arg1, (int)arg2) -> float :; | z position of atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | units; | Units (Angstrom or Bohr) used to define the geometry; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:559812,Modifiability,inherit,inherited,559812,"f atom; | ; | C++ signature :; | d z(N3psi8MoleculeE {lvalue},i); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | create_molecule_from_string(...); | create_molecule_from_string( (str)arg1) -> Molecule :; | Returns a new Molecule with member data from the geometry string arg1 in psi4 format; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8MoleculeEEE create_molecule_from_string(Ss); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | units; | Units (Angstrom or Bohr) used to define the geometry; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:560562,Modifiability,inherit,inherited,560562,"--------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:561073,Modifiability,inherit,inherited,561073,"order:; | MultipoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:561479,Modifiability,inherit,inherited,561479,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:561659,Modifiability,inherit,inherited,561659," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE creat",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:562741,Modifiability,inherit,inherited,562741,"---------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class MultipoleSymmetry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE create_matrices(N3psi16OperatorSymmetryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:562921,Modifiability,inherit,inherited,562921,"metry(Boost.Python.instance); | docstring; | ; | Method resolution order:; | MultipoleSymmetry; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (int)arg2, (Molecule)arg3, (IntegralFactory)arg4, (MatrixFactory)arg5) -> None :; | ; | C++ signature :; | void __init__(P7_object,i,N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE,N5boost10shared_ptrIN3psi13MatrixFactoryEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | create_matrices(...); | create_matrices( (MultipoleSymmetry)arg1, (str)arg2) -> matrix_vector :; | docstring; | ; | C++ signature :; | St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE create_matrices(N3psi16OperatorSymmetryE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:563745,Modifiability,inherit,inherited,563745,"); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:563925,Modifiability,inherit,inherited,563925,"--------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NBOWriter(Boost.Python.instance); | docstring; | ; | Method resolution order:; | NBOWriter; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | write(...); | write( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12One",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:564667,Modifiability,inherit,inherited,564667,"( (NBOWriter)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void write(N3psi9NBOWriterE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class NablaInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:565178,Modifiability,inherit,inherited,565178,"ion order:; | NablaInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:565584,Modifiability,inherit,inherited,565584,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:565764,Modifiability,inherit,inherited,565764," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OEProp(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OEProp; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1, (Wavefunction)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add(...); | add( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void add(N3psi6OEPropE {lvalue},Ss); | ; | clear(...); | clear( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void clear(N3psi6OEPropE {lvalue}); | ; | compute(...); | compute( (OEProp)arg1) -> None :; | docstring; | ; | C++ signature :; | void c",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:568134,Modifiability,inherit,inherited,568134,"signature :; | void set_Da_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Da_so(...); | set_Da_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Da_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_so(...); | set_Db_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_title(...); | set_title( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_title(N3psi6OEPropE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OneBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:568314,Modifiability,inherit,inherited,568314,"3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_ao(...); | set_Db_ao( (OEProp)arg1, (Matrix)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void set_Db_ao(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,i); | ; | set_Db_mo(...); | set_Db_mo( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_mo(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_Db_so(...); | set_Db_so( (OEProp)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_Db_so(N3psi6OEPropE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE); | ; | set_title(...); | set_title( (OEProp)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_title(N3psi6OEPropE {lvalue},Ss); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OneBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:569841,Modifiability,inherit,inherited,569841," Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OrbitalSpace(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OrbitalSpace; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C(...); | C( (OrbitalSpace)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE C(N3psi12OrbitalSpaceE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (str)arg2, (str)arg3, (Matrix)arg4, (Vector)arg5, (BasisSet)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:570021,Modifiability,inherit,inherited,570021,"_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OrbitalSpace(Boost.Python.instance); | docstring; | ; | Method resolution order:; | OrbitalSpace; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | C(...); | C( (OrbitalSpace)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE C(N3psi12OrbitalSpaceE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (str)arg2, (str)arg3, (Matrix)arg4, (Vector)arg5, (BasisSet)arg6, (IntegralFactory)arg7) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss,Ss,N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6VectorEEE,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi15IntegralFactoryEEE); | ; | __init__( (object)arg1, (str)arg2, (str)arg3, (Matr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:573375,Modifiability,inherit,inherited,573375,"ral(N3psi12OrbitalSpaceE {lvalue}); | ; | name(...); | name( (OrbitalSpace)arg1) -> str :; | docstring; | ; | C++ signature :; | Ss name(N3psi12OrbitalSpaceE {lvalue}); | ; | nirrep(...); | nirrep( (OrbitalSpace)arg1) -> int :; | docstring; | ; | C++ signature :; | i nirrep(N3psi12OrbitalSpaceE {lvalue}); | ; | print_out(...); | print_out( (OrbitalSpace)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi12OrbitalSpaceE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_cabs_space(...); | build_cabs_space( (OrbitalSpace)arg1, (OrbitalSpace)arg2, (float)arg3) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_cabs_space(N3psi12OrbitalSpaceE,N3psi12OrbitalSpaceE,d); | ; | build_ri_space(...); | build_ri_space( (Molecule)arg1, (str)arg2, (str)arg3, (float)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:573555,Modifiability,inherit,inherited,573555,"e :; | i nirrep(N3psi12OrbitalSpaceE {lvalue}); | ; | print_out(...); | print_out( (OrbitalSpace)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi12OrbitalSpaceE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | build_cabs_space(...); | build_cabs_space( (OrbitalSpace)arg1, (OrbitalSpace)arg2, (float)arg3) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_cabs_space(N3psi12OrbitalSpaceE,N3psi12OrbitalSpaceE,d); | ; | build_ri_space(...); | build_ri_space( (Molecule)arg1, (str)arg2, (str)arg3, (float)arg4) -> OrbitalSpace :; | docstring; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi1",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:574301,Modifiability,inherit,inherited,574301,"string; | ; | C++ signature :; | N3psi12OrbitalSpaceE build_ri_space(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,d); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class OverlapInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:574812,Modifiability,inherit,inherited,574812,"n order:; | OverlapInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:575218,Modifiability,inherit,inherited,575218,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inheri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:575398,Modifiability,inherit,inherited,575398," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:576140,Modifiability,inherit,inherited,576140,"origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | -------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:576428,Modifiability,inherit,inherited,576428,"------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PMLocalizer(Localizer); | docstring; | ; | Method resolution order:; | PMLocalizer; | Localizer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Bo",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:576798,Modifiability,inherit,inherited,576798,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:577062,Modifiability,inherit,inherited,577062,"nnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from Localizer:; | ; | localize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:577242,Modifiability,inherit,inherited,577242,"alize(...); | localize( (Localizer)arg1) -> None :; | Perform the localization procedure; | ; | C++ signature :; | void localize(N3psi9LocalizerE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods inherited from Localizer:; | ; | build(...); | build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Localizer:; | ; | L; | Localized orbital coefficients; | ; | U; | Orbital rotation matrix; | ; | converged; | Did the localization procedure converge?; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ---------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:578481,Modifiability,inherit,inherited,578481,"erited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PetiteList(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PetiteList; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:578661,Modifiability,inherit,inherited,578661," | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | aotoso(...); | aotoso( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE aotoso(N3psi10PetiteListE {lvalue}); | ; | print(...); | print( (PetiteList)arg1, (str)arg2) -> None :; | docstring; | ; | C++ signature :; | void print(N3psi10PetiteListE {lvalue},Ss); | ; | sotoao(...); | sotoao( (PetiteList)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE sotoao(N3psi10PetiteListE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_siz",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:579703,Modifiability,inherit,inherited,579703,"ance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class canno",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:579883,Modifiability,inherit,inherited,579883," S, a subtype of T; ; class PointGroup(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PointGroup; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (str)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,Ss); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | symbol(...); | symbol( (PointGroup)arg1) -> str :; | Returns Schoenflies symbol for point group; | ; | C++ signature :; | Ss symbol(N3psi10PointGroupE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:580633,Modifiability,inherit,inherited,580633,"--------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PotentialInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:581144,Modifiability,inherit,inherited,581144,"order:; | PotentialInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ sign",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:581550,Modifiability,inherit,inherited,581550,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:;",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:581730,Modifiability,inherit,inherited,581730," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:582606,Modifiability,inherit,inherited,582606,"buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudoTrial(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PseudoTrial; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:582786,Modifiability,inherit,inherited,582786,"ttributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Process(Boost.Python.instance); | Method resolution order:; | Process; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | environment; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 24; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudoTrial(Boost.Python.instance); | docstring; | ; | Method resolution order:; | PseudoTrial; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}); | ; | getI(...); | getI( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:584397,Modifiability,inherit,inherited,584397,"++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | getA(...); | getA( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getA(N3psi11PseudoTrialE {lvalue}); | ; | getI(...); | getI( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}); | ; | getQ(...); | getQ( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getQ(N3psi11PseudoTrialE {lvalue}); | ; | getR(...); | getR( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getR(N3psi11PseudoTrialE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:584577,Modifiability,inherit,inherited,584577,"l)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getI(N3psi11PseudoTrialE {lvalue}); | ; | getIPS(...); | getIPS( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getIPS(N3psi11PseudoTrialE {lvalue}); | ; | getQ(...); | getQ( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getQ(N3psi11PseudoTrialE {lvalue}); | ; | getR(...); | getR( (PseudoTrial)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE getR(N3psi11PseudoTrialE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void comput",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:585337,Modifiability,inherit,inherited,585337,"----------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PseudospectralInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:585848,Modifiability,inherit,inherited,585848,":; | PseudospectralInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = p",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:586254,Modifiability,inherit,inherited,586254,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ---------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:586434,Modifiability,inherit,inherited,586434," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> st",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:587243,Modifiability,inherit,inherited,587243,"-------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnew",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:587472,Modifiability,inherit,inherited,587472," attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <=",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:587607,Modifiability,inherit,inherited,587607," a new object with type S, a subtype of T; ; class PsiReturnType(Boost.Python.enum); | docstring; | ; | Method resolution order:; | PsiReturnType; | Boost.Python.enum; | __builtin__.int; | __builtin__.object; | ; | Data and other attributes defined here:; | ; | Balk = psi4.PsiReturnType.Balk; | ; | EndLoop = psi4.PsiReturnType.EndLoop; | ; | Failure = psi4.PsiReturnType.Failure; | ; | Success = psi4.PsiReturnType.Success; | ; | names = {'Balk': psi4.PsiReturnType.Balk, 'EndLoop': psi4.PsiReturnTyp...; | ; | values = {0: psi4.PsiReturnType.Success, 1: psi4.PsiReturnType.Failure...; | ; | ----------------------------------------------------------------------; | Methods inherited from Boost.Python.enum:; | ; | __repr__(...); | x.__repr__() <==> repr(x); | ; | __str__(...); | x.__str__() <==> str(x); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.enum:; | ; | name; | ; | ----------------------------------------------------------------------; | Methods inherited from __builtin__.int:; | ; | __abs__(...); | x.__abs__() <==> abs(x); | ; | __add__(...); | x.__add__(y) <==> x+y; | ; | __and__(...); | x.__and__(y) <==> x&y; | ; | __cmp__(...); | x.__cmp__(y) <==> cmp(x,y); | ; | __coerce__(...); | x.__coerce__(y) <==> coerce(x, y); | ; | __div__(...); | x.__div__(y) <==> x/y; | ; | __divmod__(...); | x.__divmod__(y) <==> divmod(x, y); | ; | __float__(...); | x.__float__() <==> float(x); | ; | __floordiv__(...); | x.__floordiv__(y) <==> x//y; | ; | __format__(...); | ; | __getattribute__(...); | x.__getattribute__('name') <==> x.name; | ; | __getnewargs__(...); | ; | __hash__(...); | x.__hash__() <==> hash(x); | ; | __hex__(...); | x.__hex__() <==> hex(x); | ; | __index__(...); | x[y:z] <==> x[y.__index__():z.__index__()]; | ; | __int__(...); | x.__int__() <==> int(x); | ; | __invert__(...); | x.__invert__() <==> ~x; | ; | __long__(...); | x.__long__() <==> long(x); | ; | __lshift__(...); | x.__lshif",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:590286,Modifiability,inherit,inherited,590286,"; | x.__rlshift__(y) <==> y<<x; | ; | __rmod__(...); | x.__rmod__(y) <==> y%x; | ; | __rmul__(...); | x.__rmul__(y) <==> y*x; | ; | __ror__(...); | x.__ror__(y) <==> y|x; | ; | __rpow__(...); | y.__rpow__(x[, z]) <==> pow(x, y[, z]); | ; | __rrshift__(...); | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ---------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:590674,Modifiability,inherit,inherited,590674," | x.__rrshift__(y) <==> y>>x; | ; | __rshift__(...); | x.__rshift__(y) <==> x>>y; | ; | __rsub__(...); | x.__rsub__(y) <==> y-x; | ; | __rtruediv__(...); | x.__rtruediv__(y) <==> y/x; | ; | __rxor__(...); | x.__rxor__(y) <==> y^x; | ; | __sub__(...); | x.__sub__(y) <==> x-y; | ; | __truediv__(...); | x.__truediv__(y) <==> x/y; | ; | __trunc__(...); | Truncating an Integral returns itself.; | ; | __xor__(...); | x.__xor__(y) <==> x^y; | ; | bit_length(...); | int.bit_length() -> int; | ; | Number of bits necessary to represent self in binary.; | >>> bin(37); | '0b100101'; | >>> (37).bit_length(); | 6; | ; | conjugate(...); | Returns self, the complex conjugate of any int.; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from __builtin__.int:; | ; | denominator; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | --------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:591572,Modifiability,inherit,inherited,591572,"; | the denominator of a rational number in lowest terms; | ; | imag; | the imaginary part of a complex number; | ; | numerator; | the numerator of a rational number in lowest terms; | ; | real; | the real part of a complex number; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __in",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:591752,Modifiability,inherit,inherited,591752,"om __builtin__.int:; | ; | __new__ = <built-in method __new__ of type object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Psi_Numpy_Interface(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Psi_Numpy_Interface; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:592504,Modifiability,inherit,inherited,592504,"init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class QuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:593015,Modifiability,inherit,inherited,593015,"rder:; | QuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python funct",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:593421,Modifiability,inherit,inherited,593421,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inheri",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:593601,Modifiability,inherit,inherited,593601," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:594343,Modifiability,inherit,inherited,594343,"e origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class RHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | RHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunctio",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:594958,Modifiability,inherit,inherited,594958,"avefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:605048,Modifiability,inherit,inherited,605048,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:605228,Modifiability,inherit,inherited,605228,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4ROHFE {lvalue}); | ; | moFeff(...); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ---------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:606446,Modifiability,inherit,inherited,606446,"nherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ROHF(HF, Wavefunction); | docstring; | ; | Method resolution order:; | ROHF; | HF; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | moFa(...); | moFa( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFa(N3psi3scf4ROHFE {lvalue}); | ; | moFb(...); | moFb( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFb(N3psi3scf4ROHFE {lvalue}); | ; | moFeff(...); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:607061,Modifiability,inherit,inherited,607061,"); | moFeff( (ROHF)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE moFeff(N3psi3scf4ROHFE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from HF:; | ; | occupation_a(...); | occupation_a( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_a(N3psi3scf2HFE {lvalue}); | ; | occupation_b(...); | occupation_b( (HF)arg1) -> Vector :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6VectorEEE occupation_b(N3psi3scf2HFE {lvalue}); | ; | semicanonicalize(...); | semicanonicalize( (HF)arg1) -> None :; | docstring; | ; | C++ signature :; | void semicanonicalize(N3psi3scf2HFE {lvalue}); | ; | ----------------------------------------------------------------------; | Methods inherited from Wavefunction:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Da(...); | Da( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Da(N",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:617151,Modifiability,inherit,inherited,617151,"nction)arg1, (Matrix)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_hessian(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:617331,Modifiability,inherit,inherited,617331,"_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data desc",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:618274,Modifiability,inherit,inherited,618274,"WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_func",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:618454,Modifiability,inherit,inherited,618454,"uilt-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SOBasisSet(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SOBasisSet; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | petite_list(...); | petite_list( (SOBasisSet)arg1) -> PetiteList :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10PetiteListEEE petite_list(N3psi10SOBasisSetE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SuperFunctional(Boost.Python.instance); | docstring; | ; | Method resolution order:; | SuperFunctional; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | add_c_functional(...); | add_c_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_c_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | add_x_functional(...); | add_x_functional( (SuperFunctional)arg1, (Functional)arg2) -> None :; | docstring; | ; | C++ signature :; | void add_x_functional(N3psi15SuperFunctionalE {lvalue},N5boost10shared_ptrIN3psi10FunctionalEEE); | ; | allocate(...); | allocate( (SuperF",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:627072,Modifiability,inherit,inherited,627072,"g1) -> float :; | docstring; | ; | C++ signature :; | d x_alpha(N3psi15SuperFunctionalE {lvalue}); | ; | x_functional(...); | x_functional( (SuperFunctional)arg1, (str)arg2) -> Functional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10FunctionalEEE x_functional(N3psi15SuperFunctionalE {lvalue},Ss); | ; | x_omega(...); | x_omega( (SuperFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d x_omega(N3psi15SuperFunctionalE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | blank(...); | blank() -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(); | ; | build(...); | build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SymmetryOperation(Boost.Python.instance); | Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; | ; | Method resolution order:; | SymmetryOperation; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | E(...); | E( (SymmetryOperation)arg1) -> None :; | Set equal to E; | ; | C++ signature :; | void E(N3psi17Sy",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:627252,Modifiability,inherit,inherited,627252,"perFunctional)arg1) -> float :; | docstring; | ; | C++ signature :; | d x_omega(N3psi15SuperFunctionalE {lvalue}); | ; | ----------------------------------------------------------------------; | Static methods defined here:; | ; | blank(...); | blank() -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE blank(); | ; | build(...); | build( (str)arg1, (int)arg2, (int)arg3) -> SuperFunctional :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi15SuperFunctionalEEE build(Ss,i,i); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class SymmetryOperation(Boost.Python.instance); | Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; | ; | Method resolution order:; | SymmetryOperation; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | E(...); | E( (SymmetryOperation)arg1) -> None :; | Set equal to E; | ; | C++ signature :; | void E(N3psi17SymmetryOperationE {lvalue}); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (SymmetryOperation)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,N3psi17SymmetryOperationE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | c2_x(...); | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:631295,Modifiability,inherit,inherited,631295,"peration)arg1) -> float :; | Returns trace of transformation matrix; | ; | C++ signature :; | d trace(N3psi17SymmetryOperationE {lvalue}); | ; | transform(...); | transform( (SymmetryOperation)arg1, (SymmetryOperation)arg2) -> SymmetryOperation :; | Performs the transform arg2 * arg1 * arg2~; | ; | C++ signature :; | N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE); | ; | transpose(...); | transpose( (SymmetryOperation)arg1) -> None :; | Performs transposition of matrix operation; | ; | C++ signature :; | void transpose(N3psi17SymmetryOperationE {lvalue}); | ; | unit(...); | unit( (SymmetryOperation)arg1) -> None :; | Set equal to a unit matrix; | ; | C++ signature :; | void unit(N3psi17SymmetryOperationE {lvalue}); | ; | zero(...); | zero( (SymmetryOperation)arg1) -> None :; | Zero out the symmetry operation; | ; | C++ signature :; | void zero(N3psi17SymmetryOperationE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 96; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverla",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:631475,Modifiability,inherit,inherited,631475,"ignature :; | N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE); | ; | transpose(...); | transpose( (SymmetryOperation)arg1) -> None :; | Performs transposition of matrix operation; | ; | C++ signature :; | void transpose(N3psi17SymmetryOperationE {lvalue}); | ; | unit(...); | unit( (SymmetryOperation)arg1) -> None :; | Set equal to a unit matrix; | ; | C++ signature :; | void unit(N3psi17SymmetryOperationE {lvalue}); | ; | zero(...); | zero( (SymmetryOperation)arg1) -> None :; | Zero out the symmetry operation; | ; | C++ signature :; | void zero(N3psi17SymmetryOperationE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 96; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ---------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:632827,Modifiability,inherit,inherited,632827,".instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class ThreeCenterOverlapInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | ThreeCenterOverlapInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:633007,Modifiability,inherit,inherited,633007,"te_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (ThreeCenterOverlapInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi21ThreeCenterOverlapIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | v",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:633777,Modifiability,inherit,inherited,633777," function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TracelessQuadrupoleInt(OneBodyAOInt); | docstring; | ; | Method resolution order:; | TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:634288,Modifiability,inherit,inherited,634288,"TracelessQuadrupoleInt; | OneBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python func",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:634694,Modifiability,inherit,inherited,634694,"ises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from OneBodyAOInt:; | ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:634874,Modifiability,inherit,inherited,634874," ; | compute_shell(...); | compute_shell( (OneBodyAOInt)arg1, (int)arg2, (int)arg3) -> None :; | docstring; | ; | C++ signature :; | void compute_shell(N3psi12OneBodyAOIntE {lvalue},i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (OneBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12OneBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from OneBodyAOInt:; | ; | basis; | The basis set on center one; | ; | basis1; | The basis set on center one; | ; | basis2; | The basis set on center two; | ; | origin; | The origin about which the one body ints are being computed.; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:636211,Modifiability,inherit,inherited,636211,"ted from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoBodyAOInt(Boost.Python.instance); | docstring; | ; | Method resolution order:; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:636391,Modifiability,inherit,inherited,636391,"shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:637145,Modifiability,inherit,inherited,637145,"it__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class TwoElectronInt(TwoBodyAOInt); | docstring; | ; | Method resolution order:; | TwoElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | -----------------------------------------------------",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:637678,Modifiability,inherit,inherited,637678,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:637872,Modifiability,inherit,inherited,637872,"oElectronInt; | TwoBodyAOInt; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __g",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:638052,Modifiability,inherit,inherited,638052," Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Methods inherited from TwoBodyAOInt:; | ; | compute_shell(...); | compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; | docstring; | ; | C++ signature :; | m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); | ; | set_enable_pybuffer(...); | set_enable_pybuffer( (TwoBodyAOInt)arg1, (bool)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_enable_pybuffer(N3psi12TwoBodyAOIntE {lvalue},b); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from TwoBodyAOInt:; | ; | py_buffer; | docstring; | ; | py_buffer_object; | docstring; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __getitem__(...); | __getitem__( (Vector)arg1, (int)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},i); | ; | __getitem__( (Vector)arg1, (tuple)arg2) -> float :; | docstring; | ; | C++ signature :; | d __getitem__(N3psi6VectorE {lvalue},N5boost6python5tupleE); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __init__( (object)arg1, (int)arg2) -> None :; | ; | C++ signature :; | void __init__(P7_object,i); | ; | __init__( (object)arg1, (Dimension)arg2) -> None :; | ; |",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:642906,Modifiability,inherit,inherited,642906,"ptional); | If a single dense numpy array is given, a dimension can be supplied to; | apply irreps to this array. Note that this discards all extra information; | given in the matrix besides the diagonal blocks determined by the passed; | dimension.; | dim2 :; | Same as dim1 only if using a Psi4.Dimension object.; | ; | Returns; | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector3(Boost.Python.instance); | Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; | ; | Method resolution order:; | Vector3; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (Vector3)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __add__(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | __ge",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:643086,Modifiability,inherit,inherited,643086," | -------; | ret : psi4.Vector or psi4.Matrix; | Returns the given Psi4 object ; | ; | Notes; | -----; | This is a generalized function to convert a NumPy array to ; | ; | Examples; | --------; | ; | >>> data = np.random.rand(20); | >>> vector = array_to_matrix(data); | ; | >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; | >>> matrix = array_to_matrix(irrep_data); | >>> print matrix.rowspi().to_tuple(); | >>> (2, 0, 4); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | np; | ; | shape; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Vector3(Boost.Python.instance); | Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; | ; | Method resolution order:; | Vector3; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __add__(...); | __add__( (Vector3)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __add__(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | __getitem__(...); | __getitem__( (Vector3)arg1, (int)arg2) -> float :; | Returns the arg2-th element of arg1.; | ; | C++ signature :; | d __getitem__(N3psi7Vector3E {lvalue},i); | ; | __iadd__(...); | __iadd__( (object)arg1, (Vector3)arg2) -> object :; | ; | C++ signature :; | P7_object __iadd__(N5boost6python14back_referenceIRN3psi",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:646576,Modifiability,inherit,inherited,646576,"{lvalue},N3psi7Vector3E); | ; | cross(...); | cross( (Vector3)arg1, (Vector3)arg2) -> Vector3 :; | Returns cross product of arg1 and arg2; | ; | C++ signature :; | N3psi7Vector3E cross(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | distance(...); | distance( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns distance between two points represented by arg1 and arg2; | ; | C++ signature :; | d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | dot(...); | dot( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns dot product of arg1 and arg2; | ; | C++ signature :; | d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | norm(...); | norm( (Vector3)arg1) -> float :; | Returns Euclidean norm of arg1; | ; | C++ signature :; | d norm(N3psi7Vector3E {lvalue}); | ; | normalize(...); | normalize( (Vector3)arg1) -> None :; | Returns vector of unit length and arg1 direction; | ; | C++ signature :; | void normalize(N3psi7Vector3E {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:646756,Modifiability,inherit,inherited,646756,"ns distance between two points represented by arg1 and arg2; | ; | C++ signature :; | d distance(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | dot(...); | dot( (Vector3)arg1, (Vector3)arg2) -> float :; | Returns dot product of arg1 and arg2; | ; | C++ signature :; | d dot(N3psi7Vector3E {lvalue},N3psi7Vector3E); | ; | norm(...); | norm( (Vector3)arg1) -> float :; | Returns Euclidean norm of arg1; | ; | C++ signature :; | d norm(N3psi7Vector3E {lvalue}); | ; | normalize(...); | normalize( (Vector3)arg1) -> None :; | Returns vector of unit length and arg1 direction; | ; | C++ signature :; | void normalize(N3psi7Vector3E {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9Dimen",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:647904,Modifiability,inherit,inherited,647904,">; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class View(Boost.Python.instance); | Method resolution order:; | View; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Wavefunction(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matr",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:648084,Modifiability,inherit,inherited,648084,"n.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __call__(...); | __call__( (View)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE __call__(N3psi4ViewE {lvalue}); | ; | __init__(...); | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE); | ; | __init__( (object)arg1, (Matrix)arg2, (Dimension)arg3, (Dimension)arg4, (Dimension)arg5, (Dimension)arg6) -> None :; | ; | C++ signature :; | void __init__(P7_object,N5boost10shared_ptrIN3psi6MatrixEEE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE,N3psi9DimensionE); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class Wavefunction(Boost.Python.instance); | docstring; | ; | Method resolution order:; | Wavefunction; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | Ca(...); | Ca( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca(N3psi12WavefunctionE {lvalue}); | ; | Ca_subset(...); | Ca_subset( (Wavefunction)arg1, (str)arg2, (str)arg3) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Ca_subset(N3psi12WavefunctionE {lvalue},Ss,Ss); | ; | Cb(...); | Cb( (Wavefunction)arg1) -> Matrix :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi6MatrixEEE Cb(N3psi12WavefunctionE {lvalue}); | ; | Cb_subset(...); | Cb_subset( (Wav",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:658799,Modifiability,inherit,inherited,658799,"e},N5boost10shared_ptrIN3psi6MatrixEEE {lvalue}); | ; | set_reference_wavefunction(...); | set_reference_wavefunction( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void set_reference_wavefunction(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | shallow_copy(...); | shallow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class matrix_vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | matrix_vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (matrix_vector)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __delitem__(...); | __d",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:658979,Modifiability,inherit,inherited,658979,"allow_copy( (Wavefunction)arg1, (Wavefunction)arg2) -> None :; | docstring; | ; | C++ signature :; | void shallow_copy(N3psi12WavefunctionE {lvalue},N5boost10shared_ptrIN3psi12WavefunctionEEE); | ; | sobasisset(...); | sobasisset( (Wavefunction)arg1) -> SOBasisSet :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10SOBasisSetEEE sobasisset(N3psi12WavefunctionE {lvalue}); | ; | soccpi(...); | soccpi( (Wavefunction)arg1) -> Dimension :; | docstring; | ; | C++ signature :; | N3psi9DimensionE soccpi(N3psi12WavefunctionE {lvalue}); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class matrix_vector(Boost.Python.instance); | docstring; | ; | Method resolution order:; | matrix_vector; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (matrix_vector)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __delitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object); | ; | __getitem__(...); | __getitem__( (object)arg1, (object)arg2) -> object :; | ; | C++ signature :; | N5boost6python3api6objectE __getitem__(N5boost6python14back_refere",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:661133,Modifiability,extend,extend,661133," | ; | C++ signature :; | void __init__(P7_object); | ; | __iter__(...); | __iter__( (object)arg1) -> object :; | ; | C++ signature :; | N5boost6python7objects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPNS_10shared_ptrIN3psi6MatrixEEESt6vectorISC_SaISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_o",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:661148,Modifiability,extend,extend,661148,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:661232,Modifiability,extend,extend,661232,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:661579,Modifiability,inherit,inherited,661579,"aISC_EEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorINS_10shared_ptrIN3psi6MatrixEEESaIS6_EEEE); | ; | __len__(...); | __len__( (matrix_vector)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:661759,Modifiability,inherit,inherited,661759,".); | ; | __setitem__(...); | __setitem__( (matrix_vector)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},P7_object,P7_object); | ; | append(...); | append( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (matrix_vector)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class vector_of_doubles(Boost.Python.instance); | docstring; | ; | Method resolution order:; | vector_of_doubles; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __contains__(...); | __contains__( (vector_of_doubles)arg1, (object)arg2) -> bool :; | ; | C++ signature :; | b __contains__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __delitem__(...); | __delitem__( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void __delitem__(St6vectorIdSaIdEE {lvalue},P7_object); | ; | __getitem__(...); | __getitem__( (object)arg1, (object)arg2) -> object :; | ; | C++ signature :; | N5boost6python3api6objectE __getitem__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE,P7_object); | ; | __init__(...)",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:663663,Modifiability,extend,extend,663663,"3api6objectE __getitem__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE,P7_object); | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __iter__(...); | __iter__( (object)arg1) -> object :; | ; | C++ signature :; | N5boost6python7objects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:663678,Modifiability,extend,extend,663678,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:663766,Modifiability,extend,extend,663766,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:664077,Modifiability,inherit,inherited,664077,"bjects14iterator_rangeINS0_19return_value_policyINS0_15return_by_valueENS0_21default_call_policiesEEEN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEE __iter__(N5boost6python14back_referenceIRSt6vectorIdSaIdEEEE); | ; | __len__(...); | __len__( (vector_of_doubles)arg1) -> int :; | ; | C++ signature :; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:664257,Modifiability,inherit,inherited,664257,"; | m __len__(St6vectorIdSaIdEE {lvalue}); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | __setitem__(...); | __setitem__( (vector_of_doubles)arg1, (object)arg2, (object)arg3) -> None :; | ; | C++ signature :; | void __setitem__(St6vectorIdSaIdEE {lvalue},P7_object,P7_object); | ; | append(...); | append( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void append(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | extend(...); | extend( (vector_of_doubles)arg1, (object)arg2) -> None :; | ; | C++ signature :; | void extend(St6vectorIdSaIdEE {lvalue},N5boost6python3api6objectE); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 40; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T. FUNCTIONS; DASUM(...); DASUM( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4) -> float :; docstring; ; C++ signature :; d DASUM(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DAXPY(...); DAXPY( (int)arg1, (int)arg2, (float)arg3, (Vector)arg4, (int)arg5, (Vector)arg6, (int)arg7) -> None :; docstring; ; C++ signature :; void DAXPY(i,m,d,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DCOPY(...); DCOPY( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> None :; docstring; ; C++ signature :; void DCOPY(i,m,N5boost10shared_ptrIN3psi6VectorEEE,i,N5boost10shared_ptrIN3psi6VectorEEE,i); ; DDOT(...); DDOT( (int)arg1, (int)arg2, (Vector)arg3, (int)arg4, (Vector)arg5, (int)arg6) -> float :; docstring; ; C++",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:677766,Modifiability,variab,variables,677766,"E cclambda(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccresponse(...); ccresponse( (Wavefunction)arg1) -> float :; Runs the coupled cluster response theory code.; ; C++ signature :; d ccresponse(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; C++ signature :; d ccsort(); ; cctransort(...); cctransort( (Wavefunction)arg1) -> None :; Runs CCTRANSORT, which transforms and reorders integrals for use in the coupled cluster codes.; ; C++ signature :; void cctransort(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; cctriples(...); cctriples( (Wavefunction)arg1) -> float :; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:678466,Modifiability,config,configuration,678466,":; Runs the coupled cluster (T) energy code.; ; C++ signature :; d cctriples(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; C++ signature :; void clean(); ; clean_variables(...); clean_variables() -> None :; Empties all PSI variables that have set internally.; ; C++ signature :; void clean_variables(); ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; C++ signature :; void close_outfile(); ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> int :; docstring; ; C++ signature :; m compute_shell(N3psi12TwoBodyAOIntE {lvalue},i,i,i,i); ; dcft(...); dcft( (Wavefunction)arg1) -> Wavefunction :; Runs the density cumulant functional theory code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dcft(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; detci(...); detci( (Wavefunction)arg1) -> Wavefunction :; Runs the determinant-based configuration interaction code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE detci(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfmp2(...); dfmp2( (Wavefunction)arg1) -> Wavefunction :; Runs the DF-MP2 code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfmp2(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; dfocc(...); dfocc( (Wavefunction)arg1) -> Wavefunction :; Runs the density-fitted orbital optimized CC codes.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dfocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; displace_atom(...); displace_atom( (Matrix)arg1, (int)arg2, (int)arg3, (int)arg4, (float)arg5) -> Matrix :; Displaces one coordinate of single atom.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE displace_atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d); ; dmrg(...); dmrg( (Wavefunction)arg1) -> Wavefunction :; Runs the DMRG code.; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE dm",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:681735,Modifiability,adapt,adapted,681735,"1) -> matrix_vector :; Gets list of displacements needed for a finite difference gradient computation, from energy points.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE); ; fd_geoms_freq_0(...); fd_geoms_freq_0( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fd_geoms_freq_1(...); fd_geoms_freq_1( (Molecule)arg1, (int)arg2) -> matrix_vector :; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; C++ signature :; St6vectorIN5boost10shared_ptrIN3psi6MatrixEEESaIS4_EE fd_geoms_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,i); ; fisapt(...); fisapt( (Wavefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual ",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:682636,Modifiability,variab,variables,682636,"vefunction)arg1) -> float :; Runs the functional-group intramolecular symmetry adapted perturbation theory code.; ; C++ signature :; d fisapt(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; flush_outfile(...); flush_outfile() -> None :; Flushes the output file.; ; C++ signature :; void flush_outfile(); ; fnocc(...); fnocc( (Wavefunction)arg1) -> Wavefunction :; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code; ; C++ signature :; N5boost10shared_ptrIN3psi12WavefunctionEEE fnocc(N5boost10shared_ptrIN3psi12WavefunctionEEE); ; get_active_efp(...); get_active_efp() -> EFP :; Returns the currently active EFP object.; ; C++ signature :; N5boost10shared_ptrIN3psi3efp3EFPEEE get_active_efp(); ; get_active_molecule(...); get_active_molecule() -> Molecule :; Returns the currently active molecule object.; ; C++ signature :; N5boost10shared_ptrIN3psi8MoleculeEEE get_active_molecule(); ; get_array_variable(...); get_array_variable( (str)arg1) -> Matrix :; Returns one of the PSI variables set internally by the modules or python driver (see manual for full listing of variables available).; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_array_variable(Ss); ; get_array_variables(...); get_array_variables() -> dict :; Returns dictionary of the PSI variables set internally by the modules or python driver.; ; C++ signature :; N5boost6python4dictE get_array_variables(); ; get_atomic_point_charges(...); get_atomic_point_charges() -> Vector :; Returns the most recently computed atomic point charges, as a double * object.; ; C++ signature :; N5boost10shared_ptrIN3psi6VectorEEE get_atomic_point_charges(); ; get_efp_torque(...); get_efp_torque() -> Matrix :; Returns the most recently computed gradient for the EFP portion, as a Nefp by 6 Matrix object.; ; C++ signature :; N5boost10shared_ptrIN3psi6MatrixEEE get_efp_torque(); ; get_frequencies(...); get_frequencies() -> Vector :; Returns the most recently computed frequencies, as a 3N-6 Vector object.; ; C++ signature :; N5boost10s",MatchSource.WIKI,psi4manual/1.0.0/autodoc_psimod-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html
