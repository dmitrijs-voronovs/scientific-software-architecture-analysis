id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/group__Roofitcore.html:8032,Integrability,integrat,integrator,8032,"ser methods. More...;  ; class  RooCmdConfig;  Configurable parser for RooCmdArg named arguments. More...;  ; class  RooCollectionProxy< RooCollection_t >;  Concrete proxy for RooArgSet or RooArgList objects. More...;  ; class  RooCompositeDataStore;  Combines several disjunct datasets into one. More...;  ; class  RooConstraintSum;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. More...;  ; class  RooConstVar;  Represents a constant real-valued object. More...;  ; class  RooConvCoefVar;  Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. More...;  ; class  RooConvGenContext;  Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. More...;  ; class  RooConvIntegrandBinding;  Implementation of RooAbsFunc that represent the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator. More...;  ; class  RooCurve;  One-dimensional graphical representation of a real-valued function. More...;  ; class  RooDataHist;  Container class to hold N-dimensional binned data. More...;  ; class  RooDataHistSliceIter;  Iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet. More...;  ; class  RooDataProjBinding;  adaptor that projects a real function via summation of states provided in a dataset. More...;  ; class  RooDataSet;  Container class to hold unbinned data. More...;  ; class  RooDerivative;  Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. More...;  ; class  RooDirItem;  Utility base class for RooFit objects that are to be attached to ROOT directories. More...;  ; class  RooDLLSignificanceMCSModule;  Add-on module to RooMCSt",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:10688,Integrability,interface,interface,10688,"rror of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). More...;  ; class  RooFunctor;  Lightweight interface adaptor that exports a RooAbsPdf as a functor. More...;  ; class  RooGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooGenContext;  Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context. More...;  ; class  RooGenericPdf;  Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. More...;  ; class  RooGenFitStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooGenProdProj;  General form of projected integral of product of PDFs, utility class for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:10823,Integrability,integrat,integration,10823,"ss that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). More...;  ; class  RooFunctor;  Lightweight interface adaptor that exports a RooAbsPdf as a functor. More...;  ; class  RooGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooGenContext;  Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context. More...;  ; class  RooGenericPdf;  Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. More...;  ; class  RooGenFitStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooGenProdProj;  General form of projected integral of product of PDFs, utility class for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propabi",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:11925,Integrability,integrat,integrator,11925," all RooAbsPdf classes that do not have or need a specialized generator context. More...;  ; class  RooGenericPdf;  Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. More...;  ; class  RooGenFitStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooGenProdProj;  General form of projected integral of product of PDFs, utility class for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Mi",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:12612,Integrability,integrat,integration,12612,"calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of se",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:12959,Integrability,interface,interface,12959,"e integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensi",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:13027,Integrability,interface,interface,13027,"e integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensi",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:13125,Integrability,message,messages,13125,"g. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:13606,Integrability,integrat,integration,13606,"te Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given conf",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14160,Integrability,integrat,integrators,14160,generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects w,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14266,Integrability,integrat,integrators,14266,class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14430,Integrability,integrat,integrators,14430,lass  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implement,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14536,Integrability,integrat,integrators,14536,mSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. More...;  ; class  RooPrintable;  A 'mix-in' base class that define the,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:15016,Integrability,depend,depends,15016,PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. More...;  ; class  RooPrintable;  A 'mix-in' base class that define the standard RooFit plotting and printing methods. More...;  ; class  RooProdGenContext;  Efficient implementation of the generator context specific for RooProdPdf PDFs. More...;  ; class  RooProdPdf;  Efficient implementation of a product of PDFs of the form. More...;  ; class  RooProduct;  Represents the product of a given set of RooAbsReal objects. More...;  ; class  RooProfileLL;  Implements the profile likelihood estimator for a giv,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:16565,Integrability,interface,interface,16565,"otting and printing methods. More...;  ; class  RooProdGenContext;  Efficient implementation of the generator context specific for RooProdPdf PDFs. More...;  ; class  RooProdPdf;  Efficient implementation of a product of PDFs of the form. More...;  ; class  RooProduct;  Represents the product of a given set of RooAbsReal objects. More...;  ; class  RooProfileLL;  Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. More...;  ; class  RooProjectedPdf;  A RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMini",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:17074,Integrability,interface,interface,17074," of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of su",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:17192,Integrability,interface,interface,17192," of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of su",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:17493,Integrability,wrap,wraps,17493,"ns. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions \( {a_i} \), it returns \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). More...;  ; class  RooRombergIntegrator;  Adaptive numerical integration algorithm. More...;  ; class  RooSecondMoment;  ; class  RooSharedProperties;  Class RooSharedProperties is the base class for shared properties that ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:18340,Integrability,integrat,integration,18340,"  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions \( {a_i} \), it returns \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). More...;  ; class  RooRombergIntegrator;  Adaptive numerical integration algorithm. More...;  ; class  RooSecondMoment;  ; class  RooSharedProperties;  Class RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList. More...;  ; class  RooSimGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimSplitGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consi",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:19816,Integrability,interface,interface,19816,plementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooSubsidiaryL;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent subsidiary or constraint functions. More...;  ; class  RooFit::TestStatistics::RooSumL;  Likelihood class that sums over multiple -log components. More...;  ; class  RooSuperCategory;  Joins several RooAbsCategoryLValue objects into a single category. More...;  ; class  RooTable;  Abstract interface for table objects. More...;  ; class  RooTemplateProxy< T >;  ; class  RooThresholdCategory;  A real-to-category mapping defined by a series of thresholds. More...;  ; class  RooTrace;  Controls the memory tracing hooks in all RooFit objects. More...;  ; class  RooTreeDataStore;  TTree-backed data storage. More...;  ; class  RooTruthModel;  Implements a RooResolution model that corresponds to a delta function. More...;  ; class  RooUnbinnedL;  A -log(likelihood) calculation from a dataset (assumed to be unbinned) and a PDF. More...;  ; class  RooUniformBinning;  Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points. More...;  ; class  RooVectorDataStore;  Uses std::vector to store data columns. More...;  ; class  RooWorkspace;  Persistable container for RooFit projects. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:1948,Modifiability,variab,variable,1948,"t base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:5424,Modifiability,variab,variable,5424,"ecific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interface for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTr",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:8424,Modifiability,adapt,adaptor,8424,"alued object. More...;  ; class  RooConvCoefVar;  Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. More...;  ; class  RooConvGenContext;  Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. More...;  ; class  RooConvIntegrandBinding;  Implementation of RooAbsFunc that represent the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator. More...;  ; class  RooCurve;  One-dimensional graphical representation of a real-valued function. More...;  ; class  RooDataHist;  Container class to hold N-dimensional binned data. More...;  ; class  RooDataHistSliceIter;  Iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet. More...;  ; class  RooDataProjBinding;  adaptor that projects a real function via summation of states provided in a dataset. More...;  ; class  RooDataSet;  Container class to hold unbinned data. More...;  ; class  RooDerivative;  Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. More...;  ; class  RooDirItem;  Utility base class for RooFit objects that are to be attached to ROOT directories. More...;  ; class  RooDLLSignificanceMCSModule;  Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:9483,Modifiability,parameteriz,parameterized,9483,"mation of states provided in a dataset. More...;  ; class  RooDataSet;  Container class to hold unbinned data. More...;  ; class  RooDerivative;  Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. More...;  ; class  RooDirItem;  Utility base class for RooFit objects that are to be attached to ROOT directories. More...;  ; class  RooDLLSignificanceMCSModule;  Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF helper class to fit efficiencies parameterized by a supplied function F. More...;  ; class  RooEllipse;  Two-dimensional ellipse that can be used to represent an error contour. More...;  ; class  RooErrorVar;  Auxiliary class that represents the error of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:9961,Modifiability,extend,extended,9961," of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF helper class to fit efficiencies parameterized by a supplied function F. More...;  ; class  RooEllipse;  Two-dimensional ellipse that can be used to represent an error contour. More...;  ; class  RooErrorVar;  Auxiliary class that represents the error of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). More...;  ; class  RooFunctor;  Lightweight interface adaptor that exports a RooAbsPdf as a functor. More...;  ; class  RooGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooGenContext;  Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:10029,Modifiability,extend,extended,10029," of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF helper class to fit efficiencies parameterized by a supplied function F. More...;  ; class  RooEllipse;  Two-dimensional ellipse that can be used to represent an error contour. More...;  ; class  RooErrorVar;  Auxiliary class that represents the error of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). More...;  ; class  RooFunctor;  Lightweight interface adaptor that exports a RooAbsPdf as a functor. More...;  ; class  RooGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooGenContext;  Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:10698,Modifiability,adapt,adaptor,10698,"rror of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). More...;  ; class  RooFunctor;  Lightweight interface adaptor that exports a RooAbsPdf as a functor. More...;  ; class  RooGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooGenContext;  Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context. More...;  ; class  RooGenericPdf;  Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. More...;  ; class  RooGenFitStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooGenProdProj;  General form of projected integral of product of PDFs, utility class for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:12463,Modifiability,variab,variable,12463,"for RooProdPdf. More...;  ; class  RooHist;  Graphical representation of binned data based on the TGraphAsymmErrors class. More...;  ; class  RooHistError;  Singleton class used to calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:12563,Modifiability,adapt,adaptive,12563,"calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of se",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14112,Modifiability,config,configuration,14112,generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects w,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14320,Modifiability,config,configuration,14320,class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14382,Modifiability,config,configuration,14382,lass  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implement,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14590,Modifiability,config,configuration,14590,mSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. More...;  ; class  RooPrintable;  A 'mix-in' base class that define the,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:16896,Modifiability,variab,variable,16896,"rofileLL;  Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. More...;  ; class  RooProjectedPdf;  A RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation o",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:17084,Modifiability,adapt,adaptor,17084," of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of su",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:835,Performance,cache,cache,835,". ROOT: RooFit Core. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; RooFit CoreRooFit. ; RooFit core classes. These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. M",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:972,Performance,cache,cache,972,"OT: RooFit Core. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; RooFit CoreRooFit. ; RooFit core classes. These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:1153,Performance,cache,cache,1153,"These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class fo",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:1342,Performance,cache,cache,1342,"recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of rea",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:1961,Performance,perform,performing,1961,"t base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:2550,Performance,perform,perform,2550," set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalu",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:3650,Performance,cache,cached,3650,"lass  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base class for all test statistics. More...;  ; class  RooAcceptReject;  Generic Monte Carlo toy generator implement the accept/reject sampling technique on any positively valued function. More...;  ; class  RooAdaptiveGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooAdaptiveIntegratorND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:5859,Performance,cache,cache,5859,"face for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three s",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:6011,Performance,cache,cache,6011," all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. More...;  ; class  RooCmdConfig;  Configurable par",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:13544,Performance,cache,cache,13544,"te Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given conf",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:14845,Performance,cache,cache,14845,tion of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features. More...;  ; class  RooPolyVar;  A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. More...;  ; class  RooPrintable;  A 'mix-in' base class that define the standard RooFit plotting and printing methods. More...;  ; class  RooProdGenContext;  Efficient implementation of the generator context specific for RooProdPdf PDFs. More...;  ; class  RooProdPdf;  Efficient implementation of a product of PDFs of the form. More...; ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:2857,Testability,test,test,2857,"sFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base c",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:3884,Testability,test,test,3884," statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base class for all test statistics. More...;  ; class  RooAcceptReject;  Generic Monte Carlo toy generator implement the accept/reject sampling technique on any positively valued function. More...;  ; class  RooAdaptiveGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooAdaptiveIntegratorND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interf",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:5185,Testability,log,log,5185,"ND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interface for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalizatio",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:7312,Testability,log,log,7312,"ates. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. More...;  ; class  RooCmdConfig;  Configurable parser for RooCmdArg named arguments. More...;  ; class  RooCollectionProxy< RooCollection_t >;  Concrete proxy for RooArgSet or RooArgList objects. More...;  ; class  RooCompositeDataStore;  Combines several disjunct datasets into one. More...;  ; class  RooConstraintSum;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. More...;  ; class  RooConstVar;  Represents a constant real-valued object. More...;  ; class  RooConvCoefVar;  Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. More...;  ; class  RooConvGenContext;  Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. More...;  ; class  RooConvIntegrandBinding;  Implementation of RooAbsFunc that represent the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator. More...;  ; class  RooCurve;  One-dimensional graphical representation of a real-valued function. More...;  ; class  RooDataHist;  Container class to hold N-dimensional binned data. More...;  ; class  RooDataHistSliceIter;  Iterates over all bins in a RooDataHist that occur i",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:13436,Testability,log,log,13436," RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators us",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:19463,Testability,log,log,19463,ed properties that can be stored in RooSharedPropertiesList. More...;  ; class  RooSimGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimSplitGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooSubsidiaryL;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent subsidiary or constraint functions. More...;  ; class  RooFit::TestStatistics::RooSumL;  Likelihood class that sums over multiple -log components. More...;  ; class  RooSuperCategory;  Joins several RooAbsCategoryLValue objects into a single category. More...;  ; class  RooTable;  Abstract interface for table objects. More...;  ; class  RooTemplateProxy< T >;  ; class  RooThresholdCategory;  A real-to-category mapping defined by a series of thresholds. More...;  ; class  RooTrace;  Controls the memory tracing hooks in all RooFit objects. More...;  ; class  RooTreeDataStore;  TTree-backed data storage. More...;  ; class  RooTruthModel;  Implements a RooResolution model that corresponds to a delta function. More...;  ; class  RooUnbinnedL;  A -log(likelihood) calculation from a dataset (assumed to be unbinned) and a PDF. More...;  ; class  RooUniformBinning;  Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:19656,Testability,log,log,19656,ator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimSplitGenContext;  Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooSubsidiaryL;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent subsidiary or constraint functions. More...;  ; class  RooFit::TestStatistics::RooSumL;  Likelihood class that sums over multiple -log components. More...;  ; class  RooSuperCategory;  Joins several RooAbsCategoryLValue objects into a single category. More...;  ; class  RooTable;  Abstract interface for table objects. More...;  ; class  RooTemplateProxy< T >;  ; class  RooThresholdCategory;  A real-to-category mapping defined by a series of thresholds. More...;  ; class  RooTrace;  Controls the memory tracing hooks in all RooFit objects. More...;  ; class  RooTreeDataStore;  TTree-backed data storage. More...;  ; class  RooTruthModel;  Implements a RooResolution model that corresponds to a delta function. More...;  ; class  RooUnbinnedL;  A -log(likelihood) calculation from a dataset (assumed to be unbinned) and a PDF. More...;  ; class  RooUniformBinning;  Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points. More...;  ; class  RooVectorDataStore;  Uses std::vector to store data columns. More...;  ; class  RooWorkspace;  Persi,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:20277,Testability,log,log,20277,plementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. More...;  ; class  RooSimultaneous;  Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. More...;  ; class  RooStringVar;  A RooAbsArg implementing string values. More...;  ; class  RooStudyManager;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooStudyPackage;  Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. More...;  ; class  RooSubsidiaryL;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPdf objects that represent subsidiary or constraint functions. More...;  ; class  RooFit::TestStatistics::RooSumL;  Likelihood class that sums over multiple -log components. More...;  ; class  RooSuperCategory;  Joins several RooAbsCategoryLValue objects into a single category. More...;  ; class  RooTable;  Abstract interface for table objects. More...;  ; class  RooTemplateProxy< T >;  ; class  RooThresholdCategory;  A real-to-category mapping defined by a series of thresholds. More...;  ; class  RooTrace;  Controls the memory tracing hooks in all RooFit objects. More...;  ; class  RooTreeDataStore;  TTree-backed data storage. More...;  ; class  RooTruthModel;  Implements a RooResolution model that corresponds to a delta function. More...;  ; class  RooUnbinnedL;  A -log(likelihood) calculation from a dataset (assumed to be unbinned) and a PDF. More...;  ; class  RooUniformBinning;  Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points. More...;  ; class  RooVectorDataStore;  Uses std::vector to store data columns. More...;  ; class  RooWorkspace;  Persistable container for RooFit projects. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitcore.html:17170,Usability,simpl,simple,17170," of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of su",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
https://root.cern/doc/master/group__Roofitmain.html:989,Availability,avail,available,989,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__Roofitmain.html:410,Modifiability,extend,extend,410,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__Roofitmain.html:551,Modifiability,extend,extend,551,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__Roofitmain.html:1098,Testability,test,tests,1098,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__Roofitmain.html:252,Usability,guid,guides,252,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__Roofitmain.html:534,Usability,guid,guides,534,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
https://root.cern/doc/master/group__RootFinders.html:525,Integrability,interface,interface,525,". ROOT: One-dimensional Root-Finding. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; One-dimensional Root-FindingMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for finding the roots of a one-dimensional function. ; Various implementations exist in MathCore and MathMore The user interacts with a proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional fu",MatchSource.WIKI,doc/master/group__RootFinders.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__RootFinders.html
https://root.cern/doc/master/group__RootFinders.html:622,Usability,simpl,simplest,622,". ROOT: One-dimensional Root-Finding. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; One-dimensional Root-FindingMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for finding the roots of a one-dimensional function. ; Various implementations exist in MathCore and MathMore The user interacts with a proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional fu",MatchSource.WIKI,doc/master/group__RootFinders.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__RootFinders.html
https://root.cern/doc/master/group__RootFinders.html:2075,Usability,simpl,simplified,2075,"proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional functions. More...;  ; class  ROOT::Math::Roots::Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  ROOT::Math::Roots::Steffenson;  Steffenson method, providing the fastes convergence. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__RootFinders.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__RootFinders.html
https://root.cern/doc/master/group__Shapes__classes.html:12127,Availability,error,error,12127,"nsensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...;  ; class  TGeoHalfSpace;  A half space is limited just by a plane, defined by a point and the normal direction. More...;  ; class  TGeoHelix;  Class representing a helix curve. More...;  ; class  TGeoPolygon;  An arbitrary polygon defined by vertices. More...;  ; class  TGeoShape;  Base abstract class for all shapes. More...;  ; class  TGeoShapeAssembly;  The shape encapsulating an assembly (union) of volumes. More...;  ;",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:1874,Modifiability,inherit,inheritance,1874,"he crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX1",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:10463,Modifiability,parameteriz,parameterizations,10463,"ong a given axis. Supported axes are: X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis. The general rule is that that divisions are possible on whatever axis that produces still known shapes as slices. The division of shapes are performed by the call TGeoShape::Divide(), but this operation can be done only via TGeoVolume::Divide() method. In other words, the algorithm for dividing a specific shape is known by the shape object, but is always invoked in a generic way from the volume level. Details on how to do that can be found in the paragraph ‘Dividing volumes'. One can see how all division options are interpreted and which their result inside specific shape classes is. Parametric Shapes; Shapes generally have a set of parameters that is well defined at build time. In fact, when the final geometrical hierarchy is assembled and the geometry is closed, all constituent shapes MUST**have well defined and valid parameters. In order to ease-up geometry creation, some parameterizations are however allowed.; For instance let's suppose that we need to define several volumes having exactly the same properties but different sizes. A way to do this would be to create as many different volumes and shapes. The modeller allows however the definition of a single volume having undefined shape parameters.; TGeoManager::Volume(const char *name,const char *shape,Int_t nmed);; TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388. name: the name of the newly created volume;; shape:the type of the associated shape. This has to contain the case-insensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual ",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:11717,Modifiability,parameteriz,parameterizations,11717,"tion of a single volume having undefined shape parameters.; TGeoManager::Volume(const char *name,const char *shape,Int_t nmed);; TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388. name: the name of the newly created volume;; shape:the type of the associated shape. This has to contain the case-insensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...; ",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:12426,Modifiability,parameteriz,parameterization,12426," be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...;  ; class  TGeoHalfSpace;  A half space is limited just by a plane, defined by a point and the normal direction. More...;  ; class  TGeoHelix;  Class representing a helix curve. More...;  ; class  TGeoPolygon;  An arbitrary polygon defined by vertices. More...;  ; class  TGeoShape;  Base abstract class for all shapes. More...;  ; class  TGeoShapeAssembly;  The shape encapsulating an assembly (union) of volumes. More...;  ; class  TGeoVolume;  TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:4470,Performance,perform,performed,4470,"s: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are objects that are useful only at geometry creation stage. The pointer to a shape is in fact needed only when referring to a given volume and it is always accessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, cons",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:9716,Performance,perform,performed,9716,"in TGeoManager class); gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::MakeTubeTGeoVolume * MakeTube(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3204; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43. Dividing Shapes; Shapes can generally be divided along a given axis. Supported axes are: X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis. The general rule is that that divisions are possible on whatever axis that produces still known shapes as slices. The division of shapes are performed by the call TGeoShape::Divide(), but this operation can be done only via TGeoVolume::Divide() method. In other words, the algorithm for dividing a specific shape is known by the shape object, but is always invoked in a generic way from the volume level. Details on how to do that can be found in the paragraph ‘Dividing volumes'. One can see how all division options are interpreted and which their result inside specific shape classes is. Parametric Shapes; Shapes generally have a set of parameters that is well defined at build time. In fact, when the final geometrical hierarchy is assembled and the geometry is closed, all constituent shapes MUST**have well defined and valid parameters. In order to ease-up geometry creation, some parameterizations are however allowed.; For instance let's suppose that we need to define several volumes having exactly the same properties but different sizes. A way to do this would be to create as many different volumes and shapes. The modeller allows however the definition of a single volu",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:866,Safety,safe,safe,866,". ROOT: Shapes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; ShapesThe Geometry Package. ; Shapes are geometrical objects that provide the basic modeling functionality. . Primitive Shapes; Navigation Methods Performed By Shapes; Creating Shapes; Dividing Shapes; Parametric Shapes. The ""shapes"" provide the definition of the local coordinate system of the volume. Any volume must have a shape. Any shape recognized by the modeller has to derive from the base **TGeoShape** class, providing methods for:. Finding out if a point defined in their local frame is contained or not by the shape;; Computing the distance to enter/exit the shape from a local point, given a known direction;; Computing the maximum distance in any direction from a local point that does NOT result in a boundary crossing of the shape (safe distance);; Computing the cosines of the normal vector to the crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:5365,Safety,safe,safe,5365,"cessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;;",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:5572,Safety,safe,safe,5572," required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsid",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:5911,Safety,safe,safe,5911,"st =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:6010,Safety,safe,safe,6010,"the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum s",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:6273,Safety,safe,safe,6273,"ble_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum shift of a point in any direction that does not change its inside/outsidestate (does not cross shape boundaries). The state of the point has to be properly supplied.; Double_t *TGeoShape::ComputeNormal(Double_t *point[3],; Double_t *dir[3],Double_t *norm[3]);; TGeoShape::",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:6521,Safety,safe,safe,6521,"thod computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum shift of a point in any direction that does not change its inside/outsidestate (does not cross shape boundaries). The state of the point has to be properly supplied.; Double_t *TGeoShape::ComputeNormal(Double_t *point[3],; Double_t *dir[3],Double_t *norm[3]);; TGeoShape::ComputeNormalvirtual void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm)=0; The method above computes the director cosines of normal to the crossed shape surface from a given point towards direction. This is filled into the norm array, supplied by the user. The normal vector is a",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:6688,Safety,safe,safe,6688,"thod computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum shift of a point in any direction that does not change its inside/outsidestate (does not cross shape boundaries). The state of the point has to be properly supplied.; Double_t *TGeoShape::ComputeNormal(Double_t *point[3],; Double_t *dir[3],Double_t *norm[3]);; TGeoShape::ComputeNormalvirtual void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm)=0; The method above computes the director cosines of normal to the crossed shape surface from a given point towards direction. This is filled into the norm array, supplied by the user. The normal vector is a",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:11831,Safety,detect,detector,11831,"r *name,const char *shape,Int_t nmed);; TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388. name: the name of the newly created volume;; shape:the type of the associated shape. This has to contain the case-insensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...;  ; class  TGeoHalfSpace;  A half space is limited just by a plane, defined by a point and ",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:4248,Security,access,accessible,4248,"; Trapezoids: TGeoTrd1, TGeoTrd2 classes; General Trapezoid: TGeoTrap class; Twisted Trapezoid: TGeoGtra class; Arbitrary 8 vertices shapes: TGeoArb8 class; Tubes: TGeoTube class; Tube Segments: TGeoTubeSeg class; Cut Tubes: TGeoCtub class; Elliptical Tubes: TGeoEltu class; Hyperboloids: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are objects that are useful only at geometry creation stage. The pointer to a shape is in fact needed only when referring to a given volume and it is always accessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -D",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__Shapes__classes.html:3070,Usability,simpl,simplicity,3070," TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; Naming shape primitive is mandatory only for the primitives used in Boolean composites (see ""Composite Shapes""). For the sake of simplicity, we will describe only the constructors in the second form. Primitive Shapes. Boxes: TGeoBBox class; Parallelepiped: TGeoPara class; Trapezoids: TGeoTrd1, TGeoTrd2 classes; General Trapezoid: TGeoTrap class; Twisted Trapezoid: TGeoGtra class; Arbitrary 8 vertices shapes: TGeoArb8 class; Tubes: TGeoTube class; Tube Segments: TGeoTubeSeg class; Cut Tubes: TGeoCtub class; Elliptical Tubes: TGeoEltu class; Hyperboloids: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are ob",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
https://root.cern/doc/master/group__SMatrixGroup.html:2573,Availability,down,downloaded,2573,"::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:1481,Deployability,release,release,1481,"an be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and square",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2610,Deployability,install,install,2610,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2682,Deployability,install,install,2682,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2651,Modifiability,config,configure,2651,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:173,Performance,perform,performance,173,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:447,Performance,optimiz,optimization,447,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:633,Performance,optimiz,optimized,633,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:1005,Performance,perform,performant,1005,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2010,Performance,optimiz,optimized,2010,"with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2864,Performance,perform,performance,2864,"erations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product. ;  ;  SMatrix Storage Representation;  Classes",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2646,Testability,test,test,2646,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SMatrixGroup.html:2717,Testability,test,tests,2717,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
https://root.cern/doc/master/group__SpecFunc.html:601,Availability,error,error,601,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:21131,Availability,error,error,21131,"ml; CERNLIB https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/c346/top.html; while the latter is used by. Abramowitz and Stegun; Mathematica http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html; C++ standard http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1687.pdf; in order to be C++ compliant, we decided to use the latter, hence the change of the sign in the function call to GSL. . Definition at line 276 of file SpecFuncMathMore.cxx. ◆ erf(). double ROOT::Math::erf ; (; double ; x). Error function encountered in integrating the normal distribution. . \[ erf(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. This function is provided only for convenience, in case your standard C++ implementation does not support it. If it does, please use these standard version! ; Definition at line 59 of file SpecFuncMathCore.cxx. ◆ erfc(). double ROOT::Math::erfc ; (; double ; x). Complementary error function. . \[ erfc(x) = 1 - erf(x) = \frac{2}{\sqrt{\pi}} \int_{x}^{\infty} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 44 of file SpecFuncMathCore.cxx. ◆ expint(). double ROOT::Math::expint ; (; double ; x). Calculates the exponential integral. . \[ Ei(x) = - \int_{-x}^{\infty} \frac{e^{-t}}{t} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 287 of file SpecFuncMathMore.cxx. ◆ expint_n(). double ROOT::Math::expint_n ; (; int ; n, . double ; x . ). Definition at line 296 of file SpecFuncMathMore.cxx. ◆ hyperg(). double ROOT::Math::hyperg ; (; double ; a, . double ; b, . double ; c, . double ; x . ). Calculates Gauss' hypergeometric function. . \[ _{2}F_{1}(a,b;c;x) = \frac{\Gamma(c)}{\Gamma(a) \Gamma(b)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)\Gamma(b+n)}{\Gamma(c+n)} \frac{x^n}{n!} \]. For detailed description see Mathworld. The i",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:508,Deployability,integrat,integrating,508,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:20673,Deployability,integrat,integrating,20673,"ans. There are two different definitions used for the elliptic integral of the third kind:. \[; P(\phi,k,n) = \int_0^\phi \frac{dt}{(1 + n \sin^2{t})\sqrt{1 - k^2 \sin^2{t}}}; \]. and. \[; P(\phi,k,n) = \int_0^\phi \frac{dt}{(1 - n \sin^2{t})\sqrt{1 - k^2 \sin^2{t}}}; \]. the former is adopted by. GSL http://www.gnu.org/software/gsl/manual/gsl-ref_7.html#SEC95; Planetmath http://planetmath.org/encyclopedia/EllipticIntegralsAndJacobiEllipticFunctions.html; CERNLIB https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/c346/top.html; while the latter is used by. Abramowitz and Stegun; Mathematica http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html; C++ standard http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1687.pdf; in order to be C++ compliant, we decided to use the latter, hence the change of the sign in the function call to GSL. . Definition at line 276 of file SpecFuncMathMore.cxx. ◆ erf(). double ROOT::Math::erf ; (; double ; x). Error function encountered in integrating the normal distribution. . \[ erf(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. This function is provided only for convenience, in case your standard C++ implementation does not support it. If it does, please use these standard version! ; Definition at line 59 of file SpecFuncMathCore.cxx. ◆ erfc(). double ROOT::Math::erfc ; (; double ; x). Complementary error function. . \[ erfc(x) = 1 - erf(x) = \frac{2}{\sqrt{\pi}} \int_{x}^{\infty} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 44 of file SpecFuncMathCore.cxx. ◆ expint(). double ROOT::Math::expint ; (; double ; x). Calculates the exponential integral. . \[ Ei(x) = - \int_{-x}^{\infty} \frac{e^{-t}}{t} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 287 of file SpecFuncMathMore.cxx. ◆ expin",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:508,Integrability,integrat,integrating,508,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:4729,Integrability,depend,dependence,4729,"ates the complete elliptic integral of the third kind. ;  ; double ROOT::Math::expint (double x);  Calculates the exponential integral. ;  ; double ROOT::Math::hyperg (double a, double b, double c, double x);  Calculates Gauss' hypergeometric function. ;  ; double ROOT::Math::laguerre (unsigned n, double x);  Calculates the Laguerre polynomials. ;  ; double ROOT::Math::lambert_W0 (double x);  Calculates the Lambert W function on branch 0. ;  ; double ROOT::Math::lambert_Wm1 (double x);  Calculates the Lambert W function on branch -1. ;  ; double ROOT::Math::legendre (unsigned l, double x);  Calculates the Legendre polynomials. ;  ; double ROOT::Math::riemann_zeta (double x);  Calculates the Riemann zeta function. ;  ; double ROOT::Math::sph_bessel (unsigned n, double x);  Calculates the spherical Bessel functions of the first kind (also called regular spherical Bessel functions). ;  ; double ROOT::Math::sph_legendre (unsigned l, unsigned m, double theta);  Computes the spherical (normalized) associated Legendre polynomials, or spherical harmonic without azimuthal dependence ( \(e^(im\phi)\)). ;  ; double ROOT::Math::sph_neumann (unsigned n, double x);  Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double ROOT::Math::airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double ROOT::Math::airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double ROOT::Math::airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy functi",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:20673,Integrability,integrat,integrating,20673,"ans. There are two different definitions used for the elliptic integral of the third kind:. \[; P(\phi,k,n) = \int_0^\phi \frac{dt}{(1 + n \sin^2{t})\sqrt{1 - k^2 \sin^2{t}}}; \]. and. \[; P(\phi,k,n) = \int_0^\phi \frac{dt}{(1 - n \sin^2{t})\sqrt{1 - k^2 \sin^2{t}}}; \]. the former is adopted by. GSL http://www.gnu.org/software/gsl/manual/gsl-ref_7.html#SEC95; Planetmath http://planetmath.org/encyclopedia/EllipticIntegralsAndJacobiEllipticFunctions.html; CERNLIB https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/c346/top.html; while the latter is used by. Abramowitz and Stegun; Mathematica http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html; C++ standard http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1687.pdf; in order to be C++ compliant, we decided to use the latter, hence the change of the sign in the function call to GSL. . Definition at line 276 of file SpecFuncMathMore.cxx. ◆ erf(). double ROOT::Math::erf ; (; double ; x). Error function encountered in integrating the normal distribution. . \[ erf(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. This function is provided only for convenience, in case your standard C++ implementation does not support it. If it does, please use these standard version! ; Definition at line 59 of file SpecFuncMathCore.cxx. ◆ erfc(). double ROOT::Math::erfc ; (; double ; x). Complementary error function. . \[ erfc(x) = 1 - erf(x) = \frac{2}{\sqrt{\pi}} \int_{x}^{\infty} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 44 of file SpecFuncMathCore.cxx. ◆ expint(). double ROOT::Math::expint ; (; double ; x). Calculates the exponential integral. . \[ Ei(x) = - \int_{-x}^{\infty} \frac{e^{-t}}{t} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 287 of file SpecFuncMathMore.cxx. ◆ expin",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:27401,Integrability,depend,dependence,27401,"inition at line 360 of file SpecFuncMathMore.cxx. ◆ sinint(). double ROOT::Math::sinint ; (; double ; x). Calculates the sine integral. . \[ Si(x) = - \int_{0}^{x} \frac{\sin t}{t} dt \]. For detailed description see Mathworld. The implementation used is that of CERNLIB, based on Y.L. Luke, The special functions and their approximations, v.II, (Academic Press, New York l969) 325-326. ; Definition at line 122 of file SpecFuncMathCore.cxx. ◆ sph_bessel(). double ROOT::Math::sph_bessel ; (; unsigned ; n, . double ; x . ). Calculates the spherical Bessel functions of the first kind (also called regular spherical Bessel functions). . \[ j_{n}(x) = \sqrt{\frac{\pi}{2x}} J_{n+1/2}(x) \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 371 of file SpecFuncMathMore.cxx. ◆ sph_legendre(). double ROOT::Math::sph_legendre ; (; unsigned ; l, . unsigned ; m, . double ; theta . ). Computes the spherical (normalized) associated Legendre polynomials, or spherical harmonic without azimuthal dependence ( \(e^(im\phi)\)). . \[ Y_l^m(theta,0) = \sqrt{(2l+1)/(4\pi)} \sqrt{(l-m)!/(l+m)!} P_l^m(cos \theta) \]. for \(m \geq 0, l \geq m\), where the Condon-Shortley phase \((-1)^m\) is included in P_l^m(x) This function is consistent with both C++0x and GSL, even though there is a discrepancy in where to include the phase. There is no reference in Abramowitz and Stegun. ; Definition at line 382 of file SpecFuncMathMore.cxx. ◆ sph_neumann(). double ROOT::Math::sph_neumann ; (; unsigned ; n, . double ; x . ). Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). . \[ n_n(x) = y_n(x) = \sqrt{\frac{\pi}{2x}} N_{n+1/2}(x) \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 394 of file SpecFuncMathMore.cxx. ◆ tgamma(). double ROOT::Math::tgamma ; (; double ; x). The gamma function is defined to be the exten",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:5918,Modifiability,coupling,coupling,5918," of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double ROOT::Math::airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double ROOT::Math::airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double ROOT::Math::airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double ROOT::Math::wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double ROOT::Math::wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double ROOT::Math::wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double ROOT::Math::expint_n (int n, double x);  ; double ROOT::Math::digamma (double x);  . Function Documentation. ◆ airy_Ai(). double ROOT::Math::airy_Ai ; (; double ; x). Calculates the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. The implementation used is that of GSL. ; Definition at line 402 of file SpecFuncMathMore.cxx. ◆ airy_Ai_deriv(). double ROOT::Math::airy_Ai_deriv ; (; double ; x). Calculates the derivative of the Airy functi",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:6075,Modifiability,coupling,coupling,6075,"s the Airy function Ai. ;  ; double ROOT::Math::airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double ROOT::Math::airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double ROOT::Math::wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double ROOT::Math::wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double ROOT::Math::wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double ROOT::Math::expint_n (int n, double x);  ; double ROOT::Math::digamma (double x);  . Function Documentation. ◆ airy_Ai(). double ROOT::Math::airy_Ai ; (; double ; x). Calculates the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. The implementation used is that of GSL. ; Definition at line 402 of file SpecFuncMathMore.cxx. ◆ airy_Ai_deriv(). double ROOT::Math::airy_Ai_deriv ; (; double ; x). Calculates the derivative of the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. ",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:6268,Modifiability,coupling,coupling,6268,"ive of the Airy function Ai. ;  ; double ROOT::Math::airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double ROOT::Math::wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double ROOT::Math::wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double ROOT::Math::wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double ROOT::Math::expint_n (int n, double x);  ; double ROOT::Math::digamma (double x);  . Function Documentation. ◆ airy_Ai(). double ROOT::Math::airy_Ai ; (; double ; x). Calculates the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. The implementation used is that of GSL. ; Definition at line 402 of file SpecFuncMathMore.cxx. ◆ airy_Ai_deriv(). double ROOT::Math::airy_Ai_deriv ; (; double ; x). Calculates the derivative of the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. The implementation used is that of GSL. ; Definition at line 418 of file SpecFuncMathMore.cxx. ◆ airy_Bi(). double ROOT::Math::airy_Bi ; (; double ; x). Calculates the Airy fu",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:28782,Modifiability,coupling,coupling,28782," Definition at line 382 of file SpecFuncMathMore.cxx. ◆ sph_neumann(). double ROOT::Math::sph_neumann ; (; unsigned ; n, . double ; x . ). Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). . \[ n_n(x) = y_n(x) = \sqrt{\frac{\pi}{2x}} N_{n+1/2}(x) \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 394 of file SpecFuncMathMore.cxx. ◆ tgamma(). double ROOT::Math::tgamma ; (; double ; x). The gamma function is defined to be the extension of the factorial to real numbers. . \[ \Gamma(x) = \int_{0}^{\infty} t^{x-1} e^{-t} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 89 of file SpecFuncMathCore.cxx. ◆ wigner_3j(). double ROOT::Math::wigner_3j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_ma, . int ; two_mb, . int ; two_mc . ). Calculates the Wigner 3j coupling coefficients. ; (ja jb jc; ma mb mc); where ja,ma,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 466 of file SpecFuncMathMore.cxx. ◆ wigner_6j(). double ROOT::Math::wigner_6j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ; two_jf . ). Calculates the Wigner 6j coupling coefficients. ; (ja jb jc; jd je jf); where ja,jb,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 470 of file SpecFuncMathMore.cxx. ◆ wigner_9j(). double ROOT::Math::wigner_9j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ;",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:29300,Modifiability,coupling,coupling,29300,"; (; double ; x). The gamma function is defined to be the extension of the factorial to real numbers. . \[ \Gamma(x) = \int_{0}^{\infty} t^{x-1} e^{-t} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 89 of file SpecFuncMathCore.cxx. ◆ wigner_3j(). double ROOT::Math::wigner_3j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_ma, . int ; two_mb, . int ; two_mc . ). Calculates the Wigner 3j coupling coefficients. ; (ja jb jc; ma mb mc); where ja,ma,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 466 of file SpecFuncMathMore.cxx. ◆ wigner_6j(). double ROOT::Math::wigner_6j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ; two_jf . ). Calculates the Wigner 6j coupling coefficients. ; (ja jb jc; jd je jf); where ja,jb,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 470 of file SpecFuncMathMore.cxx. ◆ wigner_9j(). double ROOT::Math::wigner_9j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ; two_jf, . int ; two_jg, . int ; two_jh, . int ; two_ji . ). Calculates the Wigner 9j coupling coefficients. ; (ja jb jc; jd je jf; jg jh ji); where ja,jb...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 474 of file SpecFuncMathMore.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time)",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:29866,Modifiability,coupling,coupling,29866," function is defined to be the extension of the factorial to real numbers. . \[ \Gamma(x) = \int_{0}^{\infty} t^{x-1} e^{-t} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 89 of file SpecFuncMathCore.cxx. ◆ wigner_3j(). double ROOT::Math::wigner_3j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_ma, . int ; two_mb, . int ; two_mc . ). Calculates the Wigner 3j coupling coefficients. ; (ja jb jc; ma mb mc); where ja,ma,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 466 of file SpecFuncMathMore.cxx. ◆ wigner_6j(). double ROOT::Math::wigner_6j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ; two_jf . ). Calculates the Wigner 6j coupling coefficients. ; (ja jb jc; jd je jf); where ja,jb,...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 470 of file SpecFuncMathMore.cxx. ◆ wigner_9j(). double ROOT::Math::wigner_9j ; (; int ; two_ja, . int ; two_jb, . int ; two_jc, . int ; two_jd, . int ; two_je, . int ; two_jf, . int ; two_jg, . int ; two_jh, . int ; two_ji . ). Calculates the Wigner 9j coupling coefficients. ; (ja jb jc; jd je jf; jg jh ji); where ja,jb...etc are integers or half integers. The function takes as input arguments only integers which corresponds to half integer units, e.g two_ja = 2 * ja; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 474 of file SpecFuncMathMore.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:804,Testability,log,logarithm,804,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__SpecFunc.html:25771,Testability,log,logarithm,25771,") \geq -1 \). ; Definition at line 334 of file SpecFuncMathMore.cxx. ◆ lambert_Wm1(). double ROOT::Math::lambert_Wm1 ; (; double ; x). Calculates the Lambert W function on branch -1. ; The Lambert W functions are defined to be the solution of the equation. \[ W(x) \exp(W(x)) = x \]. For detailed description see Mathworld or Wikipedia.; This function implements the Lambert W function on branch -1, which is real valued and defined for \( -1/e \seq x < 0 \) with \( W_{-1}(x) \seq -1 \). ; Definition at line 341 of file SpecFuncMathMore.cxx. ◆ legendre(). double ROOT::Math::legendre ; (; unsigned ; l, . double ; x . ). Calculates the Legendre polynomials. . \[ P_{l}(x) = \frac{1}{2^l l!} \frac{d^l}{dx^l} (x^2 - 1)^l \]. for \(l \geq 0, |x|\leq1\) in the Rodrigues representation. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 349 of file SpecFuncMathMore.cxx. ◆ lgamma(). double ROOT::Math::lgamma ; (; double ; x). Calculates the logarithm of the gamma function. ; The implementation used is that of Cephes from S. Moshier. ; Definition at line 74 of file SpecFuncMathCore.cxx. ◆ riemann_zeta(). double ROOT::Math::riemann_zeta ; (; double ; x). Calculates the Riemann zeta function. . \[ \zeta (x) = \left\{ \begin{array}{cl} \sum_{k=1}^{\infty}k^{-x} & \mbox{for $x > 1$} \\ 2^x \pi^{x-1} \sin{(\frac{1}{2}\pi x)} \Gamma(1-x) \zeta (1-x) & \mbox{for $x < 1$} \end{array} \right. \]. For detailed description see Mathworld. The implementation used is that of GSL.; CHECK WHETHER THE IMPLEMENTATION CALCULATES X<1 ; Definition at line 360 of file SpecFuncMathMore.cxx. ◆ sinint(). double ROOT::Math::sinint ; (; double ; x). Calculates the sine integral. . \[ Si(x) = - \int_{0}^{x} \frac{\sin t}{t} dt \]. For detailed description see Mathworld. The implementation used is that of CERNLIB, based on Y.L. Luke, The special functions and their approximations, v.II, (Academic Press, New York l969) 325-326. ; Definition at line 122 of file",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
https://root.cern/doc/master/group__Spectrum.html:238,Integrability,interface,interface,238,". ROOT: Advanced spectra processing classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Advanced spectra processing classes.Histogram Library. ; Legacy Code The Spectrum package is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using The Spectrum package might still be a valid solution.; AuthorsMiroslav Morhac Institute of Physics Slovak Academy of Sciences, R.Brun (Repackaging for C++). Processing and visualization functions.; Efficient one and two dimensional gold deconvolution and its application to gamma-ray spectra decomposition.; Identification of peaks in multidimensional coincidence gamma-ray spectra.; Background elimination for multidimensional coincidence gamma-ray spectra. . Classes; class  TSpectrum;  Advanced Spectra Processing. More...;  ; class  TSpectrum2;  Advanced 2-dimensional spectra processing. More...;  ; class  TSpectrum2Fit;  Advanced 2-dimensional spectra fitting functions. More...;  ; class  TSpectrum2Transform;  Advanced 2-dimensional orthogonal transform functions. More...;  ; class  TSpectrum3;  Advanced 3-dimensional spectra processing functions. More...;  ; class  TSpectrumFit;  Advanced 1-dimensional spectra fitting functions. More...;  ; class  TSpectrumTransform;  Advanced 1-dimensional orthogonal transform functions. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Spectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Spectrum.html
https://root.cern/doc/master/group__Spectrum.html:379,Integrability,depend,depending,379,". ROOT: Advanced spectra processing classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Advanced spectra processing classes.Histogram Library. ; Legacy Code The Spectrum package is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using The Spectrum package might still be a valid solution.; AuthorsMiroslav Morhac Institute of Physics Slovak Academy of Sciences, R.Brun (Repackaging for C++). Processing and visualization functions.; Efficient one and two dimensional gold deconvolution and its application to gamma-ray spectra decomposition.; Identification of peaks in multidimensional coincidence gamma-ray spectra.; Background elimination for multidimensional coincidence gamma-ray spectra. . Classes; class  TSpectrum;  Advanced Spectra Processing. More...;  ; class  TSpectrum2;  Advanced 2-dimensional spectra processing. More...;  ; class  TSpectrum2Fit;  Advanced 2-dimensional spectra fitting functions. More...;  ; class  TSpectrum2Transform;  Advanced 2-dimensional orthogonal transform functions. More...;  ; class  TSpectrum3;  Advanced 3-dimensional spectra processing functions. More...;  ; class  TSpectrumFit;  Advanced 1-dimensional spectra fitting functions. More...;  ; class  TSpectrumTransform;  Advanced 1-dimensional orthogonal transform functions. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Spectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Spectrum.html
https://root.cern/doc/master/group__StatFunc.html:340,Deployability,continuous,continuous,340,". ROOT: Statistical functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. M",MatchSource.WIKI,doc/master/group__StatFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__StatFunc.html
https://root.cern/doc/master/group__StatFunc.html:1021,Deployability,continuous,continuous,1021,". ROOT: Statistical functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. M",MatchSource.WIKI,doc/master/group__StatFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__StatFunc.html
https://root.cern/doc/master/group__TEve.html:6749,Deployability,update,update,6749," Base class for TEveUtil visualization elements, providing hierarchy management, rendering control and list-tree item management. More...;  ; class  TEveElementEditor;  Editor for TEveElement class. More...;  ; class  TEveElementList;  A list of TEveElements. More...;  ; class  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapePro",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:10394,Deployability,update,updates,10394," Editor for TEveLine class. More...;  ; class  TEveLineGL;  GL-renderer for TEveLine class. More...;  ; class  TEveLineProjected;  Projected copy of a TEveLine. More...;  ; class  TEveElement::TEveListTreeInfo;  Structure holding information about TGListTree and TGListTreeItem that represents given TEveElement. More...;  ; class  TEveListTreeItem;  Special list-tree-item for Eve. More...;  ; class  TEveMacro;  Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. More...;  ; class  TEveMagField;  Abstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator. More...;  ; class  TEveMagFieldConst;  Implements constant magnetic field, given by a vector fB. More...;  ; class  TEveMagFieldDuo;  Implements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut. More...;  ; class  TEveManager;  Central application manager for Eve. More...;  ; class  TEvePad;  This was intended as a TPad wrapper to allow smart updates of groups of pads. More...;  ; class  TEvePadHolder;  Exception safe wrapper for setting gPad. More...;  ; class  TEveParamList;  Collection of named parameters. More...;  ; class  TEveParamListEditor;  GUI editor for TEveParamList. More...;  ; class  TEvePathMarkT< TT >;  Special-point on track: More...;  ; class  TEvePlot3D;  Description of TEvePlot3D. More...;  ; class  TEvePlot3DGL;  OpenGL renderer class for TEvePlot3D. More...;  ; class  TEvePointSelector;  TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. More...;  ; class  TEvePointSelectorConsumer;  TEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class. More...;  ; class  TEvePointSet;  TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). More..",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:7018,Integrability,wrap,wrapper,7018,"  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTre",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:7808,Integrability,wrap,wrapper,7808," TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTreeEditorFrame;  Composite GUI frame for parallel display of a TGListTree and TEveGedEditor. More...;  ; class  TEveGridStepper;  Provide discrete position coordinates for placement of objects on regular grids. More...;  ; class  TEveGridStepperEditor;  Editor for TEveGridStepper class. More...;  ; class  TEveGridStepperSubEditor;  Sub-editor for TEveGridStepper class. More...;  ; class  TEveGTriVecValuator;  Composite GUI element for setting three numerical values (label, three number-entries). More...;  ; class  TEveGValuator;  Composite GUI element for single value selection (supports label, number-entry and slider). More...;  ; class  TEveGValuatorBase;  Base class for composite GUI elements for setting of numeric values. More...;  ; class  TEveJetCone;  Draws a jet cone with leading particle is specified in (eta,phi)",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:10371,Integrability,wrap,wrapper,10371," Editor for TEveLine class. More...;  ; class  TEveLineGL;  GL-renderer for TEveLine class. More...;  ; class  TEveLineProjected;  Projected copy of a TEveLine. More...;  ; class  TEveElement::TEveListTreeInfo;  Structure holding information about TGListTree and TGListTreeItem that represents given TEveElement. More...;  ; class  TEveListTreeItem;  Special list-tree-item for Eve. More...;  ; class  TEveMacro;  Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. More...;  ; class  TEveMagField;  Abstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator. More...;  ; class  TEveMagFieldConst;  Implements constant magnetic field, given by a vector fB. More...;  ; class  TEveMagFieldDuo;  Implements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut. More...;  ; class  TEveManager;  Central application manager for Eve. More...;  ; class  TEvePad;  This was intended as a TPad wrapper to allow smart updates of groups of pads. More...;  ; class  TEvePadHolder;  Exception safe wrapper for setting gPad. More...;  ; class  TEveParamList;  Collection of named parameters. More...;  ; class  TEveParamListEditor;  GUI editor for TEveParamList. More...;  ; class  TEvePathMarkT< TT >;  Special-point on track: More...;  ; class  TEvePlot3D;  Description of TEvePlot3D. More...;  ; class  TEvePlot3DGL;  OpenGL renderer class for TEvePlot3D. More...;  ; class  TEvePointSelector;  TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. More...;  ; class  TEvePointSelectorConsumer;  TEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class. More...;  ; class  TEvePointSet;  TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). More..",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:10471,Integrability,wrap,wrapper,10471,"More...;  ; class  TEveLineProjected;  Projected copy of a TEveLine. More...;  ; class  TEveElement::TEveListTreeInfo;  Structure holding information about TGListTree and TGListTreeItem that represents given TEveElement. More...;  ; class  TEveListTreeItem;  Special list-tree-item for Eve. More...;  ; class  TEveMacro;  Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. More...;  ; class  TEveMagField;  Abstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator. More...;  ; class  TEveMagFieldConst;  Implements constant magnetic field, given by a vector fB. More...;  ; class  TEveMagFieldDuo;  Implements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut. More...;  ; class  TEveManager;  Central application manager for Eve. More...;  ; class  TEvePad;  This was intended as a TPad wrapper to allow smart updates of groups of pads. More...;  ; class  TEvePadHolder;  Exception safe wrapper for setting gPad. More...;  ; class  TEveParamList;  Collection of named parameters. More...;  ; class  TEveParamListEditor;  GUI editor for TEveParamList. More...;  ; class  TEvePathMarkT< TT >;  Special-point on track: More...;  ; class  TEvePlot3D;  Description of TEvePlot3D. More...;  ; class  TEvePlot3DGL;  OpenGL renderer class for TEvePlot3D. More...;  ; class  TEvePointSelector;  TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. More...;  ; class  TEvePointSelectorConsumer;  TEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class. More...;  ; class  TEvePointSet;  TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). More...;  ; class  TEvePointSetArray;  An array of point-sets with each point-set playing a role ",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:13117,Integrability,wrap,wrapping,13117,"s for non-linear projections. More...;  ; class  TEveProjectionAxes;  Axes for non-linear projections. More...;  ; class  TEveProjectionAxesEditor;  GUI editor for TEveProjectionAxes. More...;  ; class  TEveProjectionAxesGL;  OpenGL renderer class for TEveProjectionAxes. More...;  ; class  TEveProjectionManager;  Manager class for steering of projections and managing projected objects. More...;  ; class  TEveProjectionManagerEditor;  GUI editor for TEveProjectionManager class. More...;  ; class  TEveQuadSet;  Supports various internal formats that result in rendering of a set of planar (lines, rectangles, hexagons with shared normal) objects. More...;  ; class  TEveQuadSetGL;  GL-renderer for TEveQuadSet class. More...;  ; class  TEveRefBackPtr;  Base-class for reference-counted objects with reverse references to TEveElement objects. More...;  ; class  TEveRefCnt;  Base-class for reference-counted objects. More...;  ; class  TEveRGBAPalette;  A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. More...;  ; class  TEveRGBAPaletteEditor;  Editor for TEveRGBAPalette class. More...;  ; class  TEveRGBAPaletteOverlay;  Description of TEveRGBAPaletteOverlay. More...;  ; class  TEveRGBAPaletteSubEditor;  Sub-editor for TEveRGBAPalette class. More...;  ; class  TEveRhoZProjection;  Transformation from 3D to 2D. More...;  ; class  TEveRPhiProjection;  XY projection with distortion around given center. More...;  ; class  TEveScalableStraightLineSet;  Straight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object. More...;  ; class  TEveScene;  Eve representation of TGLScene. More...;  ; class  TEveSceneInfo;  TEveUtil representation of TGLSceneInfo. More...;  ; class  TEveSceneList;  List of Scenes providing common operations on TEveScene collections. More...;  ; class  TEveSecondarySelectable;  Semi-abstract interface for classes supporting secondary-sel",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:14034,Integrability,interface,interface,14034,"  A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. More...;  ; class  TEveRGBAPaletteEditor;  Editor for TEveRGBAPalette class. More...;  ; class  TEveRGBAPaletteOverlay;  Description of TEveRGBAPaletteOverlay. More...;  ; class  TEveRGBAPaletteSubEditor;  Sub-editor for TEveRGBAPalette class. More...;  ; class  TEveRhoZProjection;  Transformation from 3D to 2D. More...;  ; class  TEveRPhiProjection;  XY projection with distortion around given center. More...;  ; class  TEveScalableStraightLineSet;  Straight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object. More...;  ; class  TEveScene;  Eve representation of TGLScene. More...;  ; class  TEveSceneInfo;  TEveUtil representation of TGLSceneInfo. More...;  ; class  TEveSceneList;  List of Scenes providing common operations on TEveScene collections. More...;  ; class  TEveSecondarySelectable;  Semi-abstract interface for classes supporting secondary-selection. More...;  ; class  TEveSelection;  Make sure there is a SINGLE running TEveSelection for each selection type (select/highlight). More...;  ; class  TEveSelectorToEventList;  TSelector that stores entry numbers of matching TTree entries into an event-list. More...;  ; class  TEveShape;  Abstract base-class for 2D/3D shapes. More...;  ; class  TEveShapeEditor;  GUI editor for TEveShape. More...;  ; class  TEveStraightLineSet;  Set of straight lines with optional markers along the lines. More...;  ; class  TEveStraightLineSetEditor;  Editor for TEveStraightLineSet class. More...;  ; class  TEveStraightLineSetGL;  GL-renderer for TEveStraightLineSet class. More...;  ; class  TEveStraightLineSetProjected;  Projected replica of a TEveStraightLineSet. More...;  ; class  TEveText;  TEveElement class used for displaying FreeType GL fonts. More...;  ; class  TEveTextEditor;  GUI editor for TEveText. More...;  ; class  TEveTextGL;  OpenGL rende",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:408,Performance,perform,perform,408,". ROOT: Event Display. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Event DisplayGraphics » 3D Graphics. ; The Event Display classes. ; Eve is a ROOT module based on experiment-independent part of the ALICE event display developed in cooperation between ALICE offline project and ROOT during the last two years. It has been used in ALICE for more than a year to perform high-level event visualization, debugging of simulation and reconstruction code as well as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mappi",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:7013,Safety,safe,safe,7013,"  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTre",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:10466,Safety,safe,safe,10466,"More...;  ; class  TEveLineProjected;  Projected copy of a TEveLine. More...;  ; class  TEveElement::TEveListTreeInfo;  Structure holding information about TGListTree and TGListTreeItem that represents given TEveElement. More...;  ; class  TEveListTreeItem;  Special list-tree-item for Eve. More...;  ; class  TEveMacro;  Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. More...;  ; class  TEveMagField;  Abstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator. More...;  ; class  TEveMagFieldConst;  Implements constant magnetic field, given by a vector fB. More...;  ; class  TEveMagFieldDuo;  Implements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut. More...;  ; class  TEveManager;  Central application manager for Eve. More...;  ; class  TEvePad;  This was intended as a TPad wrapper to allow smart updates of groups of pads. More...;  ; class  TEvePadHolder;  Exception safe wrapper for setting gPad. More...;  ; class  TEveParamList;  Collection of named parameters. More...;  ; class  TEveParamListEditor;  GUI editor for TEveParamList. More...;  ; class  TEvePathMarkT< TT >;  Special-point on track: More...;  ; class  TEvePlot3D;  Description of TEvePlot3D. More...;  ; class  TEvePlot3DGL;  OpenGL renderer class for TEvePlot3D. More...;  ; class  TEvePointSelector;  TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. More...;  ; class  TEvePointSelectorConsumer;  TEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class. More...;  ; class  TEvePointSet;  TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). More...;  ; class  TEvePointSetArray;  An array of point-sets with each point-set playing a role ",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:967,Security,validat,validation,967,". ROOT: Event Display. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Event DisplayGraphics » 3D Graphics. ; The Event Display classes. ; Eve is a ROOT module based on experiment-independent part of the ALICE event display developed in cooperation between ALICE offline project and ROOT during the last two years. It has been used in ALICE for more than a year to perform high-level event visualization, debugging of simulation and reconstruction code as well as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mappi",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:1577,Usability,simpl,simplifed,1577,"l as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mapping (TEveRGBAPelette) and surrounding frame (TEveFrameBox). Hexagonal and rectangular digits. Base-classes for 2D projections with dynamically controllable fish-eye magnification of the vertex region (TEveProjectionManager and TEveProjection). Tracks, points and geometries can be projected automatically. R-phi and Rho-z projections are currently supported. A r-phi projection with fish-eye transformation of a simulated ALICE pp@14TeV event. TriangleSet class for presentation of generic triangle mesh",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TEve.html:7493,Usability,simpl,simplified,7493," class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTreeEditorFrame;  Composite GUI frame for parallel display of a TGListTree and TEveGedEditor. More...;  ; class  TEveGridStepper;  Provide discrete position coordinates for placement of objects on regular grids. More...;  ; class  TEveGridStepperEditor;  Editor for TEveGridStepper class. More...;  ; class  TEveGridStepperSubEditor;  Sub-editor for TEveGridStepper class. More...;  ; class  TEveGTriVecValuator;  Composite GUI e",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
https://root.cern/doc/master/group__TMVA.html:3037,Availability,error,error,3037,"idation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More...;  ; class  TMVA::FitterBase;  Base class for TMVA fitters. More...;  ; class  TMVA::GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  TMVA::GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Functio",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:4519,Availability,error,errors,4519,"tion;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  TMVA::HyperParameterOptimisation;  ; class  TMVA::HyperParameterOptimisationResult;  ; class  TMVA::IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  TMVA::IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  TMVA::Interval;  The TMVA::Interval Class. More...;  ; class  TMVA::IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  TMVA::IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  TMVA::KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  kNN;  kNN::Event describes point in input variable vector-space, with additional functionality like distance between points More...;  ; class  TMVA::LDA;  ; class  TMVA::LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  TMVA::LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  TMVA::LogInterval;  The TMVA::Interval Class. More...;  ; class  TMVA::MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  TMVA::MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  TMVA::MethodBase;  Virtual base Class for all MVA method. More...;  ; class  TMVA::MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  TMVA::MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class  TMV",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:10224,Availability,error,error,10224,"This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  TMVA::PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  TMVA::PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  TMVA::PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  TMVA::PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  TMVA::PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  TMVA::PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  TMVA::PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamVect;  ; class  TMVA::PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  TMVA::QuickMVAProbEstimator;  ; class  TMVA::Ranking;  Ranking for variables in method (implementation) More...;  ; class  TMVA::Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  TMVA::RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  TMVA::Results;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsMulticlass;  Class which takes the results of a multiclass classification. Mor",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:1530,Deployability,configurat,configuration,1530,"on. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data inform",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:3412,Integrability,interface,interface,3412,"ontains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More...;  ; class  TMVA::FitterBase;  Base class for TMVA fitters. More...;  ; class  TMVA::GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  TMVA::GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  TMVA::HyperParameterOptimisation;  ; class  TMVA::HyperParameterOptimisationResult;  ; class  TMVA::IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  TMVA::IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  TMVA::Interval;  The TMVA::Interval Class. More...;  ; class  TMVA::IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. M",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:4363,Integrability,interface,interface,4363,"re...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  TMVA::HyperParameterOptimisation;  ; class  TMVA::HyperParameterOptimisationResult;  ; class  TMVA::IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  TMVA::IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  TMVA::Interval;  The TMVA::Interval Class. More...;  ; class  TMVA::IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  TMVA::IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  TMVA::KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  kNN;  kNN::Event describes point in input variable vector-space, with additional functionality like distance between points More...;  ; class  TMVA::LDA;  ; class  TMVA::LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  TMVA::LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  TMVA::LogInterval;  The TMVA::Interval Class. More...;  ; class  TMVA::MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  TMVA::MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  TMVA::MethodBase;  Virtual base Class for all MVA method. More...;  ; class  TMVA::MethodBayesClassifier;  ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:7676,Integrability,interface,interface,7676,"the linear correlations between the input variables. More...;  ; class  TMVA::MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  TMVA::MethodLD;  Linear Discriminant. More...;  ; class  TMVA::MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  TMVA::MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  TMVA::MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  TMVA::MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  TMVA::MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  TMVA::MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  TMVA::MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  TMVA::MinuitFitter;  /Fitter using MINUIT More...;  ; class  TMVA::MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  TMVA::MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  TMVA::MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  TMVA::kNN::Node< T >;  This file contains binary tree and global function template that searches tree for k-nearest neigbors. More...;  ; class  TMVA::Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::OptimizeConfigParameters;  ; class  TMVA::OptionBase;  Class for TMVA-option handling. More...;  ; class  TMVA::OptionMap;  class to storage options for the differents methods More...;  ; class  TMVA::PDEFoam;  Implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamCell;  ; class  TMVA::PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:8872,Integrability,interface,interface,8872,"ificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  TMVA::MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  TMVA::kNN::Node< T >;  This file contains binary tree and global function template that searches tree for k-nearest neigbors. More...;  ; class  TMVA::Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::OptimizeConfigParameters;  ; class  TMVA::OptionBase;  Class for TMVA-option handling. More...;  ; class  TMVA::OptionMap;  class to storage options for the differents methods More...;  ; class  TMVA::PDEFoam;  Implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamCell;  ; class  TMVA::PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  TMVA::PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  TMVA::PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  TMVA::PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  TMVA::PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  TMVA::PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  TMVA::PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  TMVA::PDEFoamKernelTrivial;  This class ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:9443,Integrability,interface,interface,9443,"options for the differents methods More...;  ; class  TMVA::PDEFoam;  Implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamCell;  ; class  TMVA::PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  TMVA::PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  TMVA::PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  TMVA::PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  TMVA::PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  TMVA::PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  TMVA::PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  TMVA::PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  TMVA::PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  TMVA::PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  TMVA::PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamVect;  ; class  TMVA::PDF;  PDF wrapper",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:10411,Integrability,wrap,wrapper,10411,"class is the abstract kernel interface for PDEFoam. More...;  ; class  TMVA::PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  TMVA::PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  TMVA::PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  TMVA::PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  TMVA::PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  TMVA::PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamVect;  ; class  TMVA::PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  TMVA::QuickMVAProbEstimator;  ; class  TMVA::Ranking;  Ranking for variables in method (implementation) More...;  ; class  TMVA::Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  TMVA::RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  TMVA::Results;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  TMVA::ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ROCCalc;  ; class  TMVA::ROCCurve;  ; class  TMVA::RootFinder;  Root finding using Brents algorithm (translated from CERNLIB functio",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:12006,Integrability,interface,interface,12006,"result. More...;  ; class  TMVA::ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  TMVA::ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ROCCalc;  ; class  TMVA::ROCCurve;  ; class  TMVA::RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  TMVA::Rule;  Implementation of a rule. More...;  ; class  TMVA::RuleCut;  A class describing a 'rule cut'. More...;  ; class  TMVA::RuleEnsemble;  ; class  TMVA::RuleFit;  A class implementing various fits of rule ensembles. More...;  ; class  TMVA::RuleFitAPI;  J Friedman's RuleFit method. More...;  ; class  TMVA::RuleFitParams;  A class doing the actual fitting of a linear model using rules as base functions. More...;  ; class  TMVA::SdivSqrtSplusB;  Implementation of the SdivSqrtSplusB as separation criterion. More...;  ; class  TMVA::SeparationBase;  An interface to calculate the ""SeparationGain"" for different separation criteria used in various training algorithms. More...;  ; class  TMVA::SimulatedAnnealing;  Base implementation of simulated annealing fitting procedure. More...;  ; class  TMVA::SimulatedAnnealingFitter;  Fitter using a Simulated Annealing Algorithm. More...;  ; class  TMVA::SVEvent;  Event class for Support Vector Machine. More...;  ; class  TMVA::SVKernelFunction;  Kernel for Support Vector Machine. More...;  ; class  TMVA::SVKernelMatrix;  Kernel matrix for Support Vector Machine. More...;  ; class  TMVA::SVWorkingSet;  Working class for Support Vector Machine. More...;  ; class  TMVA::TActivation;  Interface for TNeuron activation function classes. More...;  ; class  TMVA::TActivationChooser;  Class for easily choosing activation functions. More...;  ; class  TMVA::TActivationIdentity;  Identity activation function for TNeuron. More...;  ; class  TMVA::TActivationRadial;  Radial basis activation function for ANN. More...;  ; class  TMVA::TActivationR",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:14172,Integrability,rout,routines,14172,onSigmoid;  Sigmoid activation function for TNeuron. More...;  ; class  TMVA::TActivationTanh;  Tanh activation function for ANN. More...;  ; class  TMVA::Timer;  Timing information for training and evaluation of MVA methods. More...;  ; class  TMVA;  Base Class for all classes that need option parsing. More...;  ; class  TMVA::TNeuron;  Neuron class used by TMVA artificial neural network methods. More...;  ; class  TMVA::TNeuronInput;  Interface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Line,MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:1530,Modifiability,config,configuration,1530,"on. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data inform",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:4702,Modifiability,variab,variable,4702,"e...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  TMVA::HyperParameterOptimisation;  ; class  TMVA::HyperParameterOptimisationResult;  ; class  TMVA::IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  TMVA::IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  TMVA::Interval;  The TMVA::Interval Class. More...;  ; class  TMVA::IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  TMVA::IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  TMVA::KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  kNN;  kNN::Event describes point in input variable vector-space, with additional functionality like distance between points More...;  ; class  TMVA::LDA;  ; class  TMVA::LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  TMVA::LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  TMVA::LogInterval;  The TMVA::Interval Class. More...;  ; class  TMVA::MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  TMVA::MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  TMVA::MethodBase;  Virtual base Class for all MVA method. More...;  ; class  TMVA::MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  TMVA::MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class  TMVA::MethodBoost;  Class for boosting a TMVA method. More...;  ; class  TMVA::MethodCategory;  Class for categorizing the phase space. More...;  ; class  TMVA::MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:6689,Modifiability,variab,variables,6689,"or categorizing the phase space. More...;  ; class  TMVA::MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  TMVA::MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  TMVA::MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  TMVA::MethodCrossValidation;  ; class  TMVA::MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  TMVA::MethodDNN;  Deep Neural Network Implementation. More...;  ; class  TMVA::MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  TMVA::MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  TMVA::MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  TMVA::MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  TMVA::MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  TMVA::MethodLD;  Linear Discriminant. More...;  ; class  TMVA::MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  TMVA::MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  TMVA::MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  TMVA::MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  TMVA::MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  TMVA::MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improve",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:7398,Modifiability,variab,variables,7398,"tion discriminant analysis (FDA). More...;  ; class  TMVA::MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  TMVA::MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  TMVA::MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  TMVA::MethodLD;  Linear Discriminant. More...;  ; class  TMVA::MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  TMVA::MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  TMVA::MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  TMVA::MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  TMVA::MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  TMVA::MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  TMVA::MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  TMVA::MinuitFitter;  /Fitter using MINUIT More...;  ; class  TMVA::MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  TMVA::MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  TMVA::MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  TMVA::kNN::Node< T >;  This file contains binary tree and global function template that searches tree for k-nearest neigbors. More...;  ; class  TMVA::Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::OptimizeConfigParameters;  ; class  TMVA::OptionBase; ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:10561,Modifiability,variab,variables,10561,"a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  TMVA::PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  TMVA::PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  TMVA::PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  TMVA::PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  TMVA::PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  TMVA::PDEFoamVect;  ; class  TMVA::PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  TMVA::QuickMVAProbEstimator;  ; class  TMVA::Ranking;  Ranking for variables in method (implementation) More...;  ; class  TMVA::Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  TMVA::RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  TMVA::Results;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  TMVA::ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  TMVA::ROCCalc;  ; class  TMVA::ROCCurve;  ; class  TMVA::RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  TMVA::Rule;  Implementation of a rule. More...;  ; class  TMVA::RuleCut;  A class describing a 'rule ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:14828,Modifiability,variab,variables,14828,erface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  TMVA::VariablePCATransform;  Linear interpolation class. More...;  ; class  TMVA::VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  TMVA::VariableTransformBase;  Linear interpolation class. More...;  ; class  TMVA::Volume;  Volume for BinarySearchTree. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:15071,Modifiability,variab,variable,15071,erface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  TMVA::VariablePCATransform;  Linear interpolation class. More...;  ; class  TMVA::VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  TMVA::VariableTransformBase;  Linear interpolation class. More...;  ; class  TMVA::Volume;  Volume for BinarySearchTree. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:15316,Modifiability,variab,variables,15316,erface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  TMVA::VariablePCATransform;  Linear interpolation class. More...;  ; class  TMVA::VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  TMVA::VariableTransformBase;  Linear interpolation class. More...;  ; class  TMVA::Volume;  Volume for BinarySearchTree. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:1189,Performance,perform,perform,1189,"te-Analysis classes.; See:. The TMVA Web manual in ROOT Web site; The TMVA Users Guide. Old links, referring to old TMVA versions, but they can still be useful for some of the TMVA methods:. Description of the traditional TMVA Methods; The TMVA Options Reference. . Classes; class  TMVA::AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:1962,Performance,perform,perform,1962,"uner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPrune",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:1976,Security,validat,validation,1976,"uner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPrune",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:2109,Security,validat,validation,2109,"::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More..",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:702,Usability,simpl,simple,702,". ROOT: TMVA. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMVA. ; The Multi Variate Analysis package. ; The TMVA Multi-Variate-Analysis classes.; See:. The TMVA Web manual in ROOT Web site; The TMVA Users Guide. Old links, referring to old TMVA versions, but they can still be useful for some of the TMVA methods:. Description of the traditional TMVA Methods; The TMVA Options Reference. . Classes; class  TMVA::AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__TMVA.html:6556,Usability,simpl,simple,6556,"or categorizing the phase space. More...;  ; class  TMVA::MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  TMVA::MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  TMVA::MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  TMVA::MethodCrossValidation;  ; class  TMVA::MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  TMVA::MethodDNN;  Deep Neural Network Implementation. More...;  ; class  TMVA::MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  TMVA::MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  TMVA::MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  TMVA::MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  TMVA::MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  TMVA::MethodLD;  Linear Discriminant. More...;  ; class  TMVA::MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  TMVA::MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  TMVA::MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  TMVA::MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  TMVA::MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  TMVA::MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improve",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
https://root.cern/doc/master/group__tree.html:515,Energy Efficiency,reduce,reduce,515,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:3074,Integrability,interface,interface,3074," More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. More...;  ; class  TFriendElement;  A TFriendElement TF describes a TTree object TF in a file. More...;  ; class  ROOT::TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TLeaf;  A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. More...;  ; class  TLeafB;  A TLeaf for an 8 bit Integer data type. More...;  ; class  TLeafC;  A TLeaf for a variable length string. More...;  ; class  TLeafD;  A TLeaf for a 64 bit floating point data type. More...;  ; class  TLeafD32;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; cla",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:3215,Integrability,depend,depending,3215,"ctionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. More...;  ; class  TFriendElement;  A TFriendElement TF describes a TTree object TF in a file. More...;  ; class  ROOT::TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TLeaf;  A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. More...;  ; class  TLeafB;  A TLeaf for an 8 bit Integer data type. More...;  ; class  TLeafC;  A TLeaf for a variable length string. More...;  ; class  TLeafD;  A TLeaf for a 64 bit floating point data type. More...;  ; class  TLeafD32;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6093,Integrability,interface,interface,6093,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6141,Integrability,interface,interface,6141,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6218,Integrability,interface,interface,6218,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6562,Integrability,interface,interface,6562,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6661,Integrability,interface,interface,6661,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:2235,Modifiability,extend,extends,2235," ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; class  TChain;  A chain is a collection of files containing TTree objects. More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, usi",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:3751,Modifiability,variab,variable,3751,"ries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. More...;  ; class  TFriendElement;  A TFriendElement TF describes a TTree object TF in a file. More...;  ; class  ROOT::TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TLeaf;  A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. More...;  ; class  TLeafB;  A TLeaf for an 8 bit Integer data type. More...;  ; class  TLeafC;  A TLeaf for a variable length string. More...;  ; class  TLeafD;  A TLeaf for a 64 bit floating point data type. More...;  ; class  TLeafD32;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:4931,Modifiability,variab,variables,4931,"cated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits para",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:5023,Modifiability,variab,variables,5023,"ase when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implement",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6483,Modifiability,extend,extend,6483,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:6679,Modifiability,plugin,plugins,6679,". More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:485,Performance,optimiz,optimized,485,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:577,Performance,perform,performance,577,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:1856,Performance,queue,queues,1856,"lection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; class  TChain;  A chain is a collection of files containing TTree objects. More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:2971,Performance,load,loaded,2971,"ferSQL;  Implement TBuffer for a SQL backend. More...;  ; class  TChain;  A chain is a collection of files containing TTree objects. More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. More...;  ; class  TFriendElement;  A TFriendElement TF describes a TTree object TF in a file. More...;  ; class  ROOT::TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TLeaf;  A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. More...;  ; class  TLeafB;  A TLeaf for an 8 bit Integer data type. More...;  ; class  TLeafC;  A TLeaf for a variable length string. More...;  ; class  TLeafD;  A TLeaf for a 64 bit floating point data type. More...;  ; class  TLeafD32;  A TLeaf for a 24 bit truncated floating point data type. More.",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:5788,Performance,cache,cache,5788,"rowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implementing or helping the various TTree cloning method. More...;  ; class  TTreeResult;  Class defining interface to a TTree query result with the same interface as for SQL databases. More...;  ; class  TTreeRow;  Class defining interface to a row of a TTree query result. More...;  ; class  TTreeSQL;  A TTree object is a list of TBranch. More...;  ; class  TVirtualBranchBrowsable;  TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. More...;  ; class  TVirtualIndex;  Abstract interface for Tree Index. More...;  ; class  TVirtualTreePlayer;  Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. More...;  . ROOT master - Reference Guide Generated on Tue ",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:603,Security,access,access,603,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:465,Testability,test,tested,465,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:4888,Usability,simpl,simple,4888,"cated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits para",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__tree.html:4979,Usability,simpl,simple,4979,"ase when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implement",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
https://root.cern/doc/master/group__Tutorials.html:1216,Integrability,interface,interface,1216," scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs class",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:1288,Integrability,interface,interface,1288,"YS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs classes"" usage. ;  ;  Graphics tutorials;  Various examples showing the basic ROOT graphics. ;  ;  O",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:1773,Integrability,interface,interface,1773,"ou can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs classes"" usage. ;  ;  Graphics tutorials;  Various examples showing the basic ROOT graphics. ;  ;  OpenGL tutorials;  Various examples showing the OpenGL graphics in ROOT. ;  ;  Tutorials specific to Mac/Cocoa;  Various examples showing graphics done with the Mac graphics system Cocoa. ;  ;  GUI tutorials;  Example code which illustrates how to use the ROOT GUI. ;  ;  HistFactory Tutorials;  These tutorials illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:2663,Integrability,interface,interface,2663,"s;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs classes"" usage. ;  ;  Graphics tutorials;  Various examples showing the basic ROOT graphics. ;  ;  OpenGL tutorials;  Various examples showing the OpenGL graphics in ROOT. ;  ;  Tutorials specific to Mac/Cocoa;  Various examples showing graphics done with the Mac graphics system Cocoa. ;  ;  GUI tutorials;  Example code which illustrates how to use the ROOT GUI. ;  ;  HistFactory Tutorials;  These tutorials illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ;  ;  IO tutorials;  These tutorials illustrate some of the capabilities of the ROOT IO subsystem. ;  ;  Math tutorials;  Examples showing the Math classes. ;  ;  Matrix tutorials;  Examples showing how to use TMatrix. ;  ;  Monte Carlo tutorials;  Monte Carlo examples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials i",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:3357,Integrability,interface,interface,3357,"in ROOT. ;  ;  Tutorials specific to Mac/Cocoa;  Various examples showing graphics done with the Mac graphics system Cocoa. ;  ;  GUI tutorials;  Example code which illustrates how to use the ROOT GUI. ;  ;  HistFactory Tutorials;  These tutorials illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ;  ;  IO tutorials;  These tutorials illustrate some of the capabilities of the ROOT IO subsystem. ;  ;  Math tutorials;  Examples showing the Math classes. ;  ;  Matrix tutorials;  Examples showing how to use TMatrix. ;  ;  Monte Carlo tutorials;  Monte Carlo examples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examples showing unuran capabilities. ;  ;  VecOps tutorials;  These examples show the functionalities of the VecOps utilities. ;  ;  FITS files interface tutorials;  Examples showing the FITS file interface. ;  ;  XML tutorials;  XML exa",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:3588,Integrability,interface,interface,3588,"s illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ;  ;  IO tutorials;  These tutorials illustrate some of the capabilities of the ROOT IO subsystem. ;  ;  Math tutorials;  Examples showing the Math classes. ;  ;  Matrix tutorials;  Examples showing how to use TMatrix. ;  ;  Monte Carlo tutorials;  Monte Carlo examples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examples showing unuran capabilities. ;  ;  VecOps tutorials;  These examples show the functionalities of the VecOps utilities. ;  ;  FITS files interface tutorials;  Examples showing the FITS file interface. ;  ;  XML tutorials;  XML examples. ;  ;  Proof tutorials;  These examples aim to illustrate the usage of PROOF. ;  ;  TWebCanvas tutorials;  Examples showing the special features of web-based canvas. ;  ;  Webgui tutorials;  Webgui examples. ;  ;  Legacy tutorials;  Legacy ",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:4232,Integrability,interface,interface,4232,"xamples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examples showing unuran capabilities. ;  ;  VecOps tutorials;  These examples show the functionalities of the VecOps utilities. ;  ;  FITS files interface tutorials;  Examples showing the FITS file interface. ;  ;  XML tutorials;  XML examples. ;  ;  Proof tutorials;  These examples aim to illustrate the usage of PROOF. ;  ;  TWebCanvas tutorials;  Examples showing the special features of web-based canvas. ;  ;  Webgui tutorials;  Webgui examples. ;  ;  Legacy tutorials;  Legacy Tutorials. ;  . Files; file  demos.C;  This macro shows a control bar to run some of the ROOT tutorials. ;  ; file  demoshelp.C;  This macro shows help on running the Demos. ;  ; file  hsimple.C;   This program creates : ;  ; file  rootlogoff.C;  Example of rootlogoff.C. ;  ; file  rootlogon.C;  Example of rootlogon.C. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:4285,Integrability,interface,interface,4285,"xamples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examples showing unuran capabilities. ;  ;  VecOps tutorials;  These examples show the functionalities of the VecOps utilities. ;  ;  FITS files interface tutorials;  Examples showing the FITS file interface. ;  ;  XML tutorials;  XML examples. ;  ;  Proof tutorials;  These examples aim to illustrate the usage of PROOF. ;  ;  TWebCanvas tutorials;  Examples showing the special features of web-based canvas. ;  ;  Webgui tutorials;  Webgui examples. ;  ;  Legacy tutorials;  Legacy Tutorials. ;  . Files; file  demos.C;  This macro shows a control bar to run some of the ROOT tutorials. ;  ; file  demoshelp.C;  This macro shows help on running the Demos. ;  ; file  hsimple.C;   This program creates : ;  ; file  rootlogoff.C;  Example of rootlogoff.C. ;  ; file  rootlogon.C;  Example of rootlogon.C. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:3132,Safety,safe,safety,3132,"heir objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs classes"" usage. ;  ;  Graphics tutorials;  Various examples showing the basic ROOT graphics. ;  ;  OpenGL tutorials;  Various examples showing the OpenGL graphics in ROOT. ;  ;  Tutorials specific to Mac/Cocoa;  Various examples showing graphics done with the Mac graphics system Cocoa. ;  ;  GUI tutorials;  Example code which illustrates how to use the ROOT GUI. ;  ;  HistFactory Tutorials;  These tutorials illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ;  ;  IO tutorials;  These tutorials illustrate some of the capabilities of the ROOT IO subsystem. ;  ;  Math tutorials;  Examples showing the Math classes. ;  ;  Matrix tutorials;  Examples showing how to use TMatrix. ;  ;  Monte Carlo tutorials;  Monte Carlo examples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examp",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:392,Security,access,access,392,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:455,Security,access,access,455,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:780,Testability,benchmark,benchmark,780,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:806,Testability,benchmark,benchmarks,806,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:853,Testability,benchmark,benchmarks,853,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__Tutorials.html:200,Usability,learn,learn,200,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
https://root.cern/doc/master/group__tutorial__dataframe.html:466,Availability,avail,available,466,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:5234,Availability,down,downloads,5234,"_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ;  ; file  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEvent",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:5361,Availability,down,downloads,5361,"cessed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ;  ; file  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame.",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:5493,Availability,down,downloads,5493,"r tools, contained in ROOT/RDFHelpers.hxx. ;  ; file  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:5617,Availability,down,downloads,5617,";  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df10",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:3438,Deployability,update,update,3438,"nges.py;   Use Range to limit the amount of data processed. ;  ; file  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ; file  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ; file  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ; file  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ; file  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ; file  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df013_InspectAnalysis.C;   Use callbacks to update a plot and a progress bar during the event loop. ;  ; file  df014_CSVDataSource.C;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df014_CSVDataSource.py;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df015_LazyDataSource.C;   Use the lazy RDataFrame data source to concatenate computation graphs. ;  ; file  df016_vecOps.C;   Process collections in RDataFrame with the help of RVec. ;  ; file  df016_vecOps.py;   Process collections in RDataFrame with the help of RVec. ;  ; file  df017_vecOpsHEP.C;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df017_vecOpsHEP.py;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df018_customActions.C;   Implement a custom action to fill THns. ;  ; file  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:7066,Deployability,release,release,7066,"ge. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:7181,Deployability,release,release,7181,"sic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:7315,Deployability,release,release,7315,"sic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:7450,Deployability,release,release,7450,"sic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:7573,Deployability,release,release,7573,"sic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:230,Integrability,interface,interface,230,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:274,Integrability,interface,interface,274,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:1227,Integrability,interface,interface,1227,"tive analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; file  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ; file  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ; file  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  d",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:375,Performance,multi-thread,multi-threading,375,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:577,Performance,multi-thread,multi-threading,577,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:1395,Performance,multi-thread,multi-threading,1395,"ing and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; file  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ; file  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ; file  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df004_cutFlowReport.py;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df005_fillAnyObject.C;   Using the generic Fill action. ;  ; file  df006_ranges.C;   U",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:881,Security,access,accesses,881,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:1556,Usability,guid,guide,1556,"OT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; file  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ; file  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ; file  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df004_cutFlowReport.py;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df005_fillAnyObject.C;   Using the generic Fill action. ;  ; file  df006_ranges.C;   Use Range to limit the amount of data processed. ;  ; file  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ; file  df0",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__dataframe.html:3458,Usability,progress bar,progress bar,3458,"nges.py;   Use Range to limit the amount of data processed. ;  ; file  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ; file  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ; file  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ; file  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ; file  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ; file  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df013_InspectAnalysis.C;   Use callbacks to update a plot and a progress bar during the event loop. ;  ; file  df014_CSVDataSource.C;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df014_CSVDataSource.py;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df015_LazyDataSource.C;   Use the lazy RDataFrame data source to concatenate computation graphs. ;  ; file  df016_vecOps.C;   Process collections in RDataFrame with the help of RVec. ;  ; file  df016_vecOps.py;   Process collections in RDataFrame with the help of RVec. ;  ; file  df017_vecOpsHEP.C;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df017_vecOpsHEP.py;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df018_customActions.C;   Implement a custom action to fill THns. ;  ; file  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
https://root.cern/doc/master/group__tutorial__eve.html:3068,Deployability,configurat,configuration,3068,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:4117,Deployability,configurat,configurations,4117,"s. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEveTrackPRopagator with different magnetic field configurations. ;  ; file  triangleset.C;  Demonstrates usage of class TEveTriangleSet. ;  ; file  view3ds.C;  Loading and display of basic 3DS models. ;  ; file  window_manager.C;  Demonstrates usage of EVE window-manager. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:3068,Modifiability,config,configuration,3068,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:4117,Modifiability,config,configurations,4117,"s. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEveTrackPRopagator with different magnetic field configurations. ;  ; file  triangleset.C;  Demonstrates usage of class TEveTriangleSet. ;  ; file  view3ds.C;  Loading and display of basic 3DS models. ;  ; file  window_manager.C;  Demonstrates usage of EVE window-manager. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:787,Safety,detect,detector,787,". ROOT: Event display tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Event display tutorialsTutorials. ; Examples showing the ""Event display classes"" usage. . Files; file  alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  alice_esd_html_summary.C;  Html table and event summary for alice_esd.C. ;  ; file  alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  alice_vsd.C;  Complex example showing ALICE VSD visualization. ;  ; file  annotation.C;  Demonstrates usage of TGLAnnotation class. ;  ; file  arrow.C;  Demonstrates usage of TEveArrow class. ;  ; file  arrow_standalone.C;  How to use EVE without the standard window. ;  ; file  assembly.C;  Geometry detector assembly example. ;  ; file  box.C;  Demonstrates usage of TEveBox class. ;  ; file  box.C;  Demonstrates usage of TEveBox class. ;  ; file  boxset.C;  Demonstrates usage of TEveBoxSet class. ;  ; file  boxset.C;  Demonstrates usage of REveBoxSet class. ;  ; file  boxset_cones.C;  Demonstrates usage of 'cone' mode in TEveBoxSet class. ;  ; file  boxset_cones.C;  Demonstrates usage of 'cone' mode in REveBoxSet class. ;  ; file  calo_detail.C;  Calorimeter detailed view by using TEveCaloDataVec as data-source. ;  ; file  calorimeters.C;  Demonstrates usage of EVE calorimetry classes. ;  ; file  camera_restore.C;  ; file  compound.C;  Demonstrates usage of EVE compound objects - class TEveCompound. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geom_alias.C;  Demonstrates usage of geometry aliases - merge ALICE ITS with ATLAS MUON. ;  ; file  geom_alice_its.C;  Shows geometry of ALICE ITS. ;  ; file  geom_alice_tpc.C;  Shows geometry of ALICE TPC. ;  ; file  geom_atlas.C;  Shows ATLAS geometry. ;  ; file  geom_atlas_playback.C;  Plays back event-recording of a root session running geom_atlas.C tutorial. ;  ; file  geom_cms.C;  Shows CMS geometry. ;  ; file  geom_cm",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:3061,Usability,simpl,simple,3061,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve.html:3848,Usability,simpl,simplified,3848,"s. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEveTrackPRopagator with different magnetic field configurations. ;  ; file  triangleset.C;  Demonstrates usage of class TEveTriangleSet. ;  ; file  view3ds.C;  Loading and display of basic 3DS models. ;  ; file  window_manager.C;  Demonstrates usage of EVE window-manager. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
https://root.cern/doc/master/group__tutorial__eve7.html:877,Usability,simpl,simplified,877,". ROOT: Event display ROOT7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Event display ROOT7 tutorialsTutorials. ; Examples showing the ""Event display classes"" usage with ROOT7. . Files; file  collection_proxies.C;  This is an example of visualization of containers with REveDataCollection and REveDataProxyBuilders. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  event_demo.C;  This example display geometry, tracks and hits in web browser. ;  ; file  jets.C;  This example display only points in web browser. ;  ; file  lego.C;  This example display only points in web browser. ;  ; file  points.C;  This example display only points in web browser. ;  ; file  projection_prescale.C;  This example display projection prescale. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  texts.C;  This example display only texts in web browser. ;  ; file  tracks.C;  This example display only points in web browser. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__eve7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve7.html
https://root.cern/doc/master/group__tutorial__fft.html:222,Integrability,interface,interface,222,. ROOT: Fast Fourier Transforms tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fast Fourier Transforms tutorialsTutorials. ; Example showing the Fast Fourier Transforms interface in ROOT. . Files; file  FFT.C;   This tutorial illustrates the Fast Fourier Transforms interface in ROOT. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__fft.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fft.html
https://root.cern/doc/master/group__tutorial__fft.html:319,Integrability,interface,interface,319,. ROOT: Fast Fourier Transforms tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fast Fourier Transforms tutorialsTutorials. ; Example showing the Fast Fourier Transforms interface in ROOT. . Files; file  FFT.C;   This tutorial illustrates the Fast Fourier Transforms interface in ROOT. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__fft.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fft.html
https://root.cern/doc/master/group__tutorial__fit.html:709,Availability,error,error,709,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:776,Availability,error,errors,776,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:1469,Availability,error,errors,1469,"parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parab",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:2568,Availability,error,errors,2568," the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  ; file  fitNormSum.C;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:4226,Availability,error,errors,4226,":FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ; file  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ; file  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function usin",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:4471,Availability,error,errors,4471,ttingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ; file  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ; file  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function using a formula expression and use it for fitting an histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:4926,Availability,error,errors,4926,ttingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ; file  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ; file  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function using a formula expression and use it for fitting an histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:3914,Deployability,configurat,configurations,3914,"e will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomia",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:954,Integrability,depend,depends,954,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:967,Modifiability,variab,variables,967,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:3914,Modifiability,config,configurations,3914,"e will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomia",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:3724,Performance,perform,performance,3724,"py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:944,Safety,predict,predictor,944,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:2930,Testability,test,test,2930,"e of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  ; file  fitNormSum.C;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametr",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__fit.html:3844,Testability,benchmark,benchmark,3844,"rystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
https://root.cern/doc/master/group__tutorial__FITS.html:19,Integrability,interface,interface,19,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
https://root.cern/doc/master/group__tutorial__FITS.html:140,Integrability,interface,interface,140,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
https://root.cern/doc/master/group__tutorial__FITS.html:203,Integrability,interface,interface,203,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
https://root.cern/doc/master/group__tutorial__FITS.html:1119,Modifiability,variab,variable-length,1119,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
https://root.cern/doc/master/group__tutorial__FOAM.html:2541,Availability,avail,available,2541,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:285,Deployability,integrat,integrator,285,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:446,Deployability,integrat,integration,446,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:285,Integrability,integrat,integrator,285,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:446,Integrability,integrat,integration,446,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1735,Integrability,interface,interface,1735," method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line a",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1672,Modifiability,inherit,inheriting,1672,"r. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_dem",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1992,Performance,load,load,1992,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:200,Usability,simpl,simplified,200,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:753,Usability,simpl,simply,753,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:814,Usability,simpl,simpler,814,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1135,Usability,simpl,simple,1135," how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM ob",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1225,Usability,simpl,simple,1225,"nsional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:1467,Usability,simpl,simply,1467,"ew dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__FOAM.html:2672,Usability,simpl,simple,2672,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
https://root.cern/doc/master/group__tutorial__geom.html:2248,Modifiability,plugin,plugin,2248,"utomatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:225,Safety,detect,detector,225,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:615,Safety,detect,detector,615,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:694,Safety,detect,detector,694,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:778,Safety,detect,detector,778,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:853,Safety,detect,detector,853,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:925,Safety,detect,detector,925,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:1624,Safety,detect,detector,1624," geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space sta",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:2926,Testability,test,testoptical,2926,"use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:2148,Usability,simpl,simple,2148,"er, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__geom.html:2232,Usability,simpl,simple,2232,"utomatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
https://root.cern/doc/master/group__tutorial__graphics.html:3018,Availability,avail,available,3018," ;  ; file  inside.C;   Test the IsInside methods of various graphics primitives. ;  ; file  latex.C;   This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex2.C;   This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ;",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
https://root.cern/doc/master/group__tutorial__graphics.html:1878,Performance,perform,perform,1878,"ces the flowchart of TFormula::Compile ;  ; file  crown.C;   Draw crowns. ;  ; file  diamond.C;   Draw a diamond. ;  ; file  earth.C;   This tutorial illustrates the special contour options. ;  ; file  ellipse.C;   Draw ellipses. ;  ; file  eval.C;   This macro produces the flowchart of TFormula::Eval. ;  ; file  event.C;   Illustrate some basic primitives. ;  ; file  feynman.C;   Draw Feynman diagrams. ;  ; file  first.C;   Show some basic primitives. ;  ; file  formula1.C;   Display interpreted functions. ;  ; file  framework.C;   An example with basic graphics illustrating the Object Oriented User Interface of ROOT. ;  ; file  gaxis.C;   Simple example illustrating how to draw TGaxis objects in various formats. ;  ; file  gaxis2.C;   Example illustrating how to draw TGaxis with labels defined by a function. ;  ; file  gaxis3.C;   Example illustrating how to modify individual labels of a TGaxis. ;  ; file  graph_edit_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ;  ; file  gtime.C;  Example of a graph of data moving in time. ;  ; file  inside.C;   Test the IsInside methods of various graphics primitives. ;  ; file  latex.C;   This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex2.C;   This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes us",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
https://root.cern/doc/master/group__tutorial__graphics.html:213,Security,access,accessiblecolorschemes,213,. ROOT: Graphics tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphics tutorialsTutorials. ; Various examples showing the basic ROOT graphics. . Files; file  accessiblecolorschemes.C;   Choosing an appropriate color scheme is essential for making results easy to understand and interpret. ;  ; file  analyze.C;   This macro produces the flowchart of TFormula::Analyze. ;  ; file  anim.C;  Macro illustrating how to animate a picture using a Timer. ;  ; file  archi.C;   This macro displays the ROOT architecture. ;  ; file  arrows.C;   Draw arrows. ;  ; file  AtlasExample.C;   Show how ATLAS Style looks like. ;  ; file  basic3d.C;   Show 3-D polylines and markers. ;  ; file  canvas.C;   Example of primitives in a canvas. ;  ; file  canvas2.C;   Example of canvas partitioning. ;  ; file  compile.C;   This macro produces the flowchart of TFormula::Compile ;  ; file  crown.C;   Draw crowns. ;  ; file  diamond.C;   Draw a diamond. ;  ; file  earth.C;   This tutorial illustrates the special contour options. ;  ; file  ellipse.C;   Draw ellipses. ;  ; file  eval.C;   This macro produces the flowchart of TFormula::Eval. ;  ; file  event.C;   Illustrate some basic primitives. ;  ; file  feynman.C;   Draw Feynman diagrams. ;  ; file  first.C;   Show some basic primitives. ;  ; file  formula1.C;   Display interpreted functions. ;  ; file  framework.C;   An example with basic graphics illustrating the Object Oriented User Interface of ROOT. ;  ; file  gaxis.C;   Simple example illustrating how to draw TGaxis objects in various formats. ;  ; file  gaxis2.C;   Example illustrating how to draw TGaxis with labels defined by a function. ;  ; file  gaxis3.C;   Example illustrating how to modify individual labels of a TGaxis. ;  ; file  graph_edit_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ;  ; file  gtime.C;  Example of a graph of data moving in time. ;,MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
https://root.cern/doc/master/group__tutorial__graphics.html:3271,Testability,test,testing,3271," canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ;",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
https://root.cern/doc/master/group__tutorial__graphics.html:3362,Testability,test,testing,3362,"Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ; file  triangles.C;   Create small triangles at random positions on the canvas. ;  . ROOT m",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
https://root.cern/doc/master/group__tutorial__graphs.html:393,Availability,error,error,393,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:431,Availability,error,error,431,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:635,Availability,error,error,635,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:692,Availability,error,error,692,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:761,Availability,error,errors,761,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:332,Testability,test,test,332,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:1404,Testability,test,test,1404,"ror bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs ",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:1462,Testability,log,logarithmic,1462,"ror bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs ",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:2233,Testability,test,test,2233,"I axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  multipalette.C;   Draw color plots using different color palettes. ;  ; file  scatter.C;   Draw a scatter plot. ;  ; file  seism.C;   Strip chart example. ;  ; file  splines_test.C;   Examples of use of the spline classes. ;  ; file  surfaces.C;   Draw 2-Dim functions. ;  ; file  timeonaxis.C;   This macro illustrates the use of the time mode on the axis with different time intervals and time formats. ;  ; file  timeonaxis2.C;   Define the time offset as 2003, January 1st. ;  ; file  timeonaxis3.C;   This example compares what the system time function gmtime and localtime give with what gives TGaxis. ;  ; file  timeSeriesFromCSV.C;   This macro illustrates the use of the time axis on a TGraph with dat",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:3822,Testability,log,log,3822,"others: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  multipalette.C;   Draw color plots using different color palettes. ;  ; file  scatter.C;   Draw a scatter plot. ;  ; file  seism.C;   Strip chart example. ;  ; file  splines_test.C;   Examples of use of the spline classes. ;  ; file  surfaces.C;   Draw 2-Dim functions. ;  ; file  timeonaxis.C;   This macro illustrates the use of the time mode on the axis with different time intervals and time formats. ;  ; file  timeonaxis2.C;   Define the time offset as 2003, January 1st. ;  ; file  timeonaxis3.C;   This example compares what the system time function gmtime and localtime give with what gives TGaxis. ;  ; file  timeSeriesFromCSV.C;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ; file  timeSeriesFromCSV.py;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ; file  timeSeriesFromCSV_TDF.C;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ; file  waves.C;   Hint: Spherical waves ;  ; file  zdemo.C;   This macro is an example of graphs in log scales with annotations. ;  ; file  zones.C;   Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads. ;  ; file  zones.py;   Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:797,Usability,simpl,simple,797,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__graphs.html:1588,Usability,simpl,simple,1588,";  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  multipalette.C;   Draw color plo",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
https://root.cern/doc/master/group__tutorial__gui.html:2769,Deployability,update,update,2769,"native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:1971,Performance,perform,perform,1971,"u.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own T",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:1806,Testability,test,test,1806,"PUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a l",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:373,Usability,simpl,simple,373,". ROOT: GUI tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; GUI tutorialsTutorials. ; Example code which illustrates how to use the ROOT GUI. . Files; file  buttonChangelabel.C;  This macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked. ;  ; file  buttongroupState.C;  A simple example that shows the enabled and disabled state of a button group with radio and check buttons. ;  ; file  buttonsLayout.C;  This macro gives an example of different buttons' layout. ;  ; file  buttonTest.C;  This macro gives an example of how to set/change text button attributes. ;  ; file  calendar.C;  This macro gives an example of how to use html widget to display tabular data. ;  ; file  CPUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GU",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:1204,Usability,feedback,feedback,1204,". . Files; file  buttonChangelabel.C;  This macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked. ;  ; file  buttongroupState.C;  A simple example that shows the enabled and disabled state of a button group with radio and check buttons. ;  ; file  buttonsLayout.C;  This macro gives an example of different buttons' layout. ;  ; file  buttonTest.C;  This macro gives an example of how to set/change text button attributes. ;  ; file  calendar.C;  This macro gives an example of how to use html widget to display tabular data. ;  ; file  CPUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:1537,Usability,simpl,simple,1537,"rent buttons' layout. ;  ; file  buttonTest.C;  This macro gives an example of how to set/change text button attributes. ;  ; file  calendar.C;  This macro gives an example of how to use html widget to display tabular data. ;  ; file  CPUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI feature",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:2160,Usability,simpl,simple,2160,"back about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gi",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:2295,Usability,simpl,simple,2295,"nt and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:2604,Usability,simpl,simple,2604," an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of t",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:2848,Usability,simpl,simpleTableTest,2848,"d slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:2894,Usability,simpl,simple,2894,"ays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro sh",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:3106,Usability,simpl,simple,3106,"al temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro shows how to use a TGImageMap class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__gui.html:3418,Usability,simpl,simple,3418,"al temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro shows how to use a TGImageMap class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
https://root.cern/doc/master/group__tutorial__hist.html:6604,Availability,fault,faulty,6604,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:6517,Energy Efficiency,charge,charges,6517,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:6525,Integrability,depend,depending,6525,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:5161,Modifiability,variab,variable,5161,"hich shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:5306,Performance,perform,performance,5306,"ified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' sta",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:6611,Safety,detect,detector,6611,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:6236,Security,access,accessible,6236,"ng an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:3297,Testability,log,logscales,3297,"  hksimple.C;   Illustrates the advantages of a TH1K histogram ;  ; file  hlabels1.C;   1-D histograms with alphanumeric labels ;  ; file  hlabels2.C;   2-D histograms with alphanumeric labels. ;  ; file  hlHisto1.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto2.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:3343,Testability,log,log,3343,"vantages of a TH1K histogram ;  ; file  hlabels1.C;   1-D histograms with alphanumeric labels ;  ; file  hlabels2.C;   2-D histograms with alphanumeric labels. ;  ; file  hlHisto1.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto2.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the l",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:5466,Testability,test,testSmooth,5466,"ified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color)",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:3706,Usability,simpl,simple,3706,";  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__hist.html:3821,Usability,simpl,simple,3821,"orial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ra",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
https://root.cern/doc/master/group__tutorial__http.html:478,Deployability,update,update,478,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:871,Energy Efficiency,monitor,monitoring,871,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:166,Integrability,interface,interface,166,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:1440,Integrability,message,messages,1440,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:854,Modifiability,config,configure,854,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:1413,Performance,load,loaded,1413,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:571,Security,access,access,571,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:1118,Security,access,access,1118,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__http.html:679,Usability,simpl,simple,679,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
https://root.cern/doc/master/group__tutorial__image.html:817,Security,access,access,817,". ROOT: Image tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Image tutorialsTutorials. ; Examples showing the TImage class usage. . Files; file  galaxy_image.C;   Importing an image and manipulating it. ;  ; file  hist2image.C;   Create an image from a 2-D histogram and manipulate it. ;  ; file  hsumanim.C;   This script is a slightly modified version of hsum.C. ;  ; file  image2hist.C;   Create a 2-D histogram from an image. ;  ; file  img2pad.C;   Display image in canvas and pad. ;  ; file  imgconv.C;   Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff. ;  ; file  pad2png.C;   Create a canvas and save as png. ;  ; file  rose_image.C;   Display image in a new canvas and pad. ;  ; file  trans_graph.C;   Demonstrates how to access and manipulate ARGB pixel values of an image +... ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__image.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__image.html
https://root.cern/doc/master/group__tutorial__io.html:1639,Testability,test,testMergeCont,1639,. ROOT: IO tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; IO tutorialsTutorials. ; These tutorials illustrate some of the capabilities of the ROOT IO subsystem. . Files; file  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ; file  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ; file  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ; file  fildir.C;   This macro displays the ROOT Directory data structure ;  ; file  file.C;   This macro displays the physical ROOT file structure ;  ; file  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ; file  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ; file  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ; file  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  mergeSelective.C;   Merge only part of the content of a set of files. ;  ; file  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ; file  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ; file  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__io.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__io.html
https://root.cern/doc/master/group__tutorial__io.html:1716,Testability,test,testTMPIFile,1716,. ROOT: IO tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; IO tutorialsTutorials. ; These tutorials illustrate some of the capabilities of the ROOT IO subsystem. . Files; file  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ; file  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ; file  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ; file  fildir.C;   This macro displays the ROOT Directory data structure ;  ; file  file.C;   This macro displays the physical ROOT file structure ;  ; file  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ; file  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ; file  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ; file  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  mergeSelective.C;   Merge only part of the content of a set of files. ;  ; file  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ; file  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ; file  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__io.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__io.html
https://root.cern/doc/master/group__tutorial__legacy.html:212,Integrability,interface,interfaces,212,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:660,Testability,benchmark,benchmarks,660,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:698,Testability,test,tests,698,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:720,Testability,benchmark,benchmark,720,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:1471,Testability,benchmark,benchmarks,1471,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:1071,Usability,simpl,simple,1071,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__legacy.html:1132,Usability,simpl,simple,1132,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
https://root.cern/doc/master/group__tutorial__math.html:247,Availability,avail,available,247,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:364,Availability,avail,available,364,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:2487,Availability,avail,available,2487," in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendre Polynomials. ;  ; file  LegendreAssoc.C;   Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  ; file  limit.C;   This program demonstrates the computation of 95 % C.L. ;  ; file  mathBeta.C;   Test the TMath::BetaDist and TMath::BetaDistI functions ;  ; file  mathcoreCDF.C;   Example describing how to use the different cumulative distribution functions in ROOT. ;  ; file  mathcoreGenVector.C;   Example macro testing available methods and operation of the GenVector classes. ;  ; file  mathcoreSpecFunc.C;   Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments. ;  ; file  mathcoreStatFunc.C;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDi",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3692,Deployability,integrat,integration,3692,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3981,Deployability,integrat,integration,3981,"rite and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo f",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:4115,Deployability,integrat,integration,4115,"O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of ",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3680,Energy Efficiency,adapt,adaptive,3680,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3692,Integrability,integrat,integration,3692,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3981,Integrability,integrat,integration,3981,"rite and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo f",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:4115,Integrability,integrat,integration,4115,"O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of ",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:3680,Modifiability,adapt,adaptive,3680,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:805,Testability,test,test,805,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:2479,Testability,test,testing,2479," in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendre Polynomials. ;  ; file  LegendreAssoc.C;   Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  ; file  limit.C;   This program demonstrates the computation of 95 % C.L. ;  ; file  mathBeta.C;   Test the TMath::BetaDist and TMath::BetaDistI functions ;  ; file  mathcoreCDF.C;   Example describing how to use the different cumulative distribution functions in ROOT. ;  ; file  mathcoreGenVector.C;   Example macro testing available methods and operation of the GenVector classes. ;  ; file  mathcoreSpecFunc.C;   Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments. ;  ; file  mathcoreStatFunc.C;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDi",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:5308,Testability,test,testrandom,5308,"e usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  ; file  testrandom.C;   Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ;  ; file  tStudent.C;   Example macro describing the student t distribution ;  ; file  tStudent.py;   Example macro describing the student t distribution ;  ; file  TSVDUnfoldExample.C;   Data unfolding using Singular Value Decomposition ;  ; file  vavilov.C;   Test of the TMath::Vavilov distribution ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__math.html:5336,Testability,test,test,5336,"e usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  ; file  testrandom.C;   Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ;  ; file  tStudent.C;   Example macro describing the student t distribution ;  ; file  tStudent.py;   Example macro describing the student t distribution ;  ; file  TSVDUnfoldExample.C;   Data unfolding using Singular Value Decomposition ;  ; file  vavilov.C;   Test of the TMath::Vavilov distribution ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
https://root.cern/doc/master/group__tutorial__matrix.html:523,Performance,perform,perform,523,. ROOT: Matrix tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Matrix tutorialsTutorials. ; Examples showing how to use TMatrix. . Files; file  decomposeQR.C;   This tutorial shows how to decompose a matrix A in an orthogonal matrix Q and an upper triangular matrix R using QR Householder decomposition with the TDecompQRH class. ;  ; file  invertMatrix.C;   This macro shows several ways to invert a matrix . ;  ; file  solveLinear.C;   This macro shows several ways to perform a linear least-squares analysis . ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__matrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__matrix.html
https://root.cern/doc/master/group__tutorial__multicore.html:885,Integrability,interface,interfaces,885,". ROOT: Multicore tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Multicore tutorialsTutorials. ; These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. . Files; file  imt001_parBranchProcessing.C;   Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry. ;  ; file  imt101_parTreeProcessing.C;   Illustrate the usage of the TTreeProcessorMT::Process method. ;  ; file  mp001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mp101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mp102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mp103_processSelector.C;   Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example. ;  ; file  mp104_processH1.C;   Illustrate the usage of the multiproc to process the H1 analysis example. ;  ; file  mp105_processEntryList.C;   Illustrate the usage of the multiproc to process TEntryList with the H1 analysis example. ;  ; file  mp201_parallelHistoFill.C;   Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach. ;  ; file  mp_H1_lambdas.C;   Lambdas used to check and fit the result of the H1 analysis. ;  ; file  mt001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mt101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mt102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mt103_fillNtupleFromMultipleThreads.C;   Fill the same TNtuple from different threads. ;  ; file  mt201_parallelHistoFill.C;   Parallel fill of a histogram. ;  ; file  mt301_TTaskGroupSimple.C;   Shows how to run items of work asynchronously with a TTaskGroup. ;  ; file  mt304_fillHistos.C;   Fill hi",MatchSource.WIKI,doc/master/group__tutorial__multicore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__multicore.html
https://root.cern/doc/master/group__tutorial__multicore.html:244,Safety,safe,safety,244,". ROOT: Multicore tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Multicore tutorialsTutorials. ; These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. . Files; file  imt001_parBranchProcessing.C;   Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry. ;  ; file  imt101_parTreeProcessing.C;   Illustrate the usage of the TTreeProcessorMT::Process method. ;  ; file  mp001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mp101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mp102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mp103_processSelector.C;   Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example. ;  ; file  mp104_processH1.C;   Illustrate the usage of the multiproc to process the H1 analysis example. ;  ; file  mp105_processEntryList.C;   Illustrate the usage of the multiproc to process TEntryList with the H1 analysis example. ;  ; file  mp201_parallelHistoFill.C;   Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach. ;  ; file  mp_H1_lambdas.C;   Lambdas used to check and fit the result of the H1 analysis. ;  ; file  mt001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mt101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mt102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mt103_fillNtupleFromMultipleThreads.C;   Fill the same TNtuple from different threads. ;  ; file  mt201_parallelHistoFill.C;   Parallel fill of a histogram. ;  ; file  mt301_TTaskGroupSimple.C;   Shows how to run items of work asynchronously with a TTaskGroup. ;  ; file  mt304_fillHistos.C;   Fill hi",MatchSource.WIKI,doc/master/group__tutorial__multicore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__multicore.html
https://root.cern/doc/master/group__tutorial__net.html:1743,Availability,echo,echo,1743,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:260,Security,authenticat,authentication,260,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:393,Security,authenticat,authentication,393,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1669,Security,authenticat,authentication,1669,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:255,Testability,test,test,255,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:388,Testability,test,test,388,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1355,Testability,test,test,1355,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1417,Testability,test,test,1417,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1664,Testability,test,test,1664,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1716,Testability,test,testTUDPSocket,1716,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1738,Testability,test,test,1738,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1926,Testability,test,test,1926,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:505,Usability,simpl,simple,505,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:927,Usability,simpl,simple,927,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__net.html:1189,Usability,simpl,simple,1189,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
https://root.cern/doc/master/group__tutorial__ntuple.html:773,Performance,multi-thread,multi-threaded,773,. ROOT: ROOT 7 ntuple tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; ROOT 7 ntuple tutorialsTutorials » ROOT 7 tutorials. ; Various examples showing the ROOT 7 ntuples. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Files; file  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ; file  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ; file  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ; file  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ; file  ntpl006_friends.C;   Work with befriended RNTuples. ;  ; file  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ; file  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ; file  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ; file  ntpl010_skim.C;   Example creating a derived RNTuple ;  ; file  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ; file  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ; file  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ; file  ntpl014_framework.C;   ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__ntuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__ntuple.html
https://root.cern/doc/master/group__tutorial__ntuple.html:967,Performance,multi-thread,multi-threaded,967,. ROOT: ROOT 7 ntuple tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; ROOT 7 ntuple tutorialsTutorials » ROOT 7 tutorials. ; Various examples showing the ROOT 7 ntuples. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Files; file  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ; file  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ; file  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ; file  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ; file  ntpl006_friends.C;   Work with befriended RNTuples. ;  ; file  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ; file  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ; file  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ; file  ntpl010_skim.C;   Example creating a derived RNTuple ;  ; file  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ; file  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ; file  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ; file  ntpl014_framework.C;   ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__ntuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__ntuple.html
https://root.cern/doc/master/group__tutorial__ntuple.html:1412,Performance,multi-thread,multi-threaded,1412,. ROOT: ROOT 7 ntuple tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; ROOT 7 ntuple tutorialsTutorials » ROOT 7 tutorials. ; Various examples showing the ROOT 7 ntuples. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Files; file  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ; file  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ; file  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ; file  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ; file  ntpl006_friends.C;   Work with befriended RNTuples. ;  ; file  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ; file  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ; file  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ; file  ntpl010_skim.C;   Example creating a derived RNTuple ;  ; file  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ; file  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ; file  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ; file  ntpl014_framework.C;   ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__ntuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__ntuple.html
https://root.cern/doc/master/group__tutorial__proof.html:969,Testability,test,test,969,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html
https://root.cern/doc/master/group__tutorial__proof.html:1044,Testability,test,test,1044,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html
https://root.cern/doc/master/group__tutorial__proof.html:615,Usability,simpl,simple,615,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html
https://root.cern/doc/master/group__tutorial__pyroot.html:576,Availability,error,error,576,". ROOT: PyRoot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__pyroot.html:1395,Deployability,update,updated,1395,"ce.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  py",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__pyroot.html:200,Integrability,interface,interface,200,". ROOT: PyRoot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__pyroot.html:1106,Safety,detect,detector,1106,"hing...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a st",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__pyroot.html:2997,Testability,log,log,2997,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__pyroot.html:2314,Usability,usab,usable,2314,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
https://root.cern/doc/master/group__tutorial__r.html:468,Deployability,install,install,468,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__r.html:561,Deployability,integrat,integration,561,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__r.html:713,Deployability,patch,patched,713,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__r.html:157,Integrability,interface,interface,157,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__r.html:258,Integrability,interface,interface,258,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__r.html:561,Integrability,integrat,integration,561,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
https://root.cern/doc/master/group__tutorial__roofit.html:6456,Availability,avail,available,6456,"convolution: convolution in cyclical angular observables theta ;  ; file  rf210_angularconv.py;   Convolution in cyclical angular observables theta, and construction of p.d.f in terms of transformed angular coordinates, e.g. ;  ; file  rf211_paramconv.C;   Addition and convolution: working with a pdf with a convolution operator in terms of a parameter ;  ; file  rf211_paramconv.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 Working a with a p.d.f. ;  ; file  rf212_plottingInRanges_blinding.C;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpere",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:6608,Availability,avail,available,6608,"construction of p.d.f in terms of transformed angular coordinates, e.g. ;  ; file  rf211_paramconv.C;   Addition and convolution: working with a pdf with a convolution operator in terms of a parameter ;  ; file  rf211_paramconv.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 Working a with a p.d.f. ;  ; file  rf212_plottingInRanges_blinding.C;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Mu",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7444,Availability,error,errors,7444,"ty functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7578,Availability,error,errors,7578,"   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf an",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7675,Availability,error,errors,7675,") pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and da",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7782,Availability,error,errors,7782,"dfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: project",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:16814,Availability,error,error,16814,"_intminuit.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #601 ;  ; file  rf602_chi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to a binned dataset ;  ; file  rf602_chi2fit.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #602 ;  ; file  rf603_multicpu.C;   Likelihood and minimization: setting up a multi-core parallelized unbinned maximum likelihood fit ;  ; file  rf603_multicpu.py;   Likelihood and minimization: setting up a multi-core parallelized unbinned maximum likelihood fit ;  ; file  rf604_constraints.C;   Likelihood and minimization: fitting with constraints ;  ; file  rf604_constraints.py;   Likelihood and minimization: fitting with constraints ;  ; file  rf605_profilell.C;   Likelihood and minimization: working with the profile likelihood estimator ;  ; file  rf605_profilell.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #605 ;  ; file  rf606_nllerrorhandling.C;   Likelihood and minimization: understanding and customizing error handling in likelihood evaluations ;  ; file  rf606_nllerrorhandling.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #606 ;  ; file  rf607_fitresult.C;   Likelihood and minimization: demonstration of options of the RooFitResult class ;  ; file  rf607_fitresult.py;   Likelihood and minimization: demonstration of options of the RooFitResult class ;  ; file  rf608_fitresultaspdf.C;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf608_fitresultaspdf.py;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf609_xychi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) ;  ; file  rf609_xychi2fit.py;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:17945,Availability,error,errors,17945,"6 ;  ; file  rf607_fitresult.C;   Likelihood and minimization: demonstration of options of the RooFitResult class ;  ; file  rf607_fitresult.py;   Likelihood and minimization: demonstration of options of the RooFitResult class ;  ; file  rf608_fitresultaspdf.C;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf608_fitresultaspdf.py;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf609_xychi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) ;  ; file  rf609_xychi2fit.py;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) ;  ; file  rf610_visualerror.C;   Likelihood and minimization: visualization of errors from a covariance matrix ;  ; file  rf610_visualerror.py;   Likelihood and minimization: visualization of errors from a covariance matrix ;  ; file  rf611_weightedfits.C;   Likelihood and minimization: Parameter uncertainties for weighted unbinned ML fits ;  ; file  rf612_recoverFromInvalidParameters.C;   Likelihood and minimization: Recover from regions where the function is not defined. ;  ; file  rf612_recoverFromInvalidParameters.py;   Likelihood and minimization: Recover from regions where the function is not defined. ;  ; file  rf613_global_observables.C;   This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. ;  ; file  rf613_global_observables.py;   This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. ;  ; file  rf614_binned_fit_problems.C;   A tutorial that explains you how to solv",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:18058,Availability,error,errors,18058," ;  ; file  rf607_fitresult.py;   Likelihood and minimization: demonstration of options of the RooFitResult class ;  ; file  rf608_fitresultaspdf.C;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf608_fitresultaspdf.py;   Likelihood and minimization: representing the parabolic approximation of the fit as a multi-variate Gaussian on the parameters of the fitted pdf ;  ; file  rf609_xychi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) ;  ; file  rf609_xychi2fit.py;   Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) ;  ; file  rf610_visualerror.C;   Likelihood and minimization: visualization of errors from a covariance matrix ;  ; file  rf610_visualerror.py;   Likelihood and minimization: visualization of errors from a covariance matrix ;  ; file  rf611_weightedfits.C;   Likelihood and minimization: Parameter uncertainties for weighted unbinned ML fits ;  ; file  rf612_recoverFromInvalidParameters.C;   Likelihood and minimization: Recover from regions where the function is not defined. ;  ; file  rf612_recoverFromInvalidParameters.py;   Likelihood and minimization: Recover from regions where the function is not defined. ;  ; file  rf613_global_observables.C;   This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. ;  ; file  rf613_global_observables.py;   This tutorial explains the concept of global observables in RooFit, and showcases how their values can be stored either in the model or in the dataset. ;  ; file  rf614_binned_fit_problems.C;   A tutorial that explains you how to solve problems with binning effects and numerical stability in binned fits. ;  ; file  rf614_binned_fit_problems.py; ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:2573,Deployability,integrat,integration,2573," to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting i",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:2750,Deployability,integrat,integration,2750,"7_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelih",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7872,Deployability,integrat,integration,7872," file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disj",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:8055,Deployability,integrat,integration,8055,"lti-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:8683,Deployability,continuous,continuous,8683,"rrors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizal",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:8798,Deployability,continuous,continuous,8798,"; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marg",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9230,Deployability,integrat,integration,9230,nsional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9386,Deployability,integrat,integration,9386,dfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9718,Deployability,integrat,integration,9718,ervables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: usin,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9841,Deployability,integrat,integration,9841, ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; fi,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13112,Deployability,configurat,configuration,13112,multaneous fits to multiple datasets ;  ; file  rf501_simultaneouspdf.py;   Organization and simultaneous fits: using simultaneous pdfs to describe simultaneous fits to multiple datasets ;  ; file  rf502_wspacewrite.C;   Organisation and simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13226,Deployability,configurat,configuration,13226,ng simultaneous pdfs to describe simultaneous fits to multiple datasets ;  ; file  rf502_wspacewrite.C;   Organisation and simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND S,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23576,Deployability,configurat,configuration,23576,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23718,Deployability,configurat,configuration,23718,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23859,Deployability,configurat,configuration,23859,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:24013,Deployability,configurat,configuration,24013,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:2573,Integrability,integrat,integration,2573," to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting i",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:2750,Integrability,integrat,integration,2750,"7_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelih",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7872,Integrability,integrat,integration,7872," file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disj",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:8055,Integrability,integrat,integration,8055,"lti-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9230,Integrability,integrat,integration,9230,nsional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9386,Integrability,integrat,integration,9386,dfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9718,Integrability,integrat,integration,9718,ervables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: usin,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9841,Integrability,integrat,integration,9841, ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; fi,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13349,Integrability,message,message,13349, simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: bas,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13483,Integrability,message,message,13483,f503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organiza,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:15025,Integrability,interface,interface,15025,"sets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf512_wsfactory_oper.C;   Organization and simultaneous fits: operator expressions and expression-based basic pdfs in the workspace factory syntax ;  ; file  rf512_wsfactory_oper.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #512 ;  ; file  rf513_wsfactory_tools.C;   Organization and simultaneous fits: RooCustomizer and RooSimWSTool interface in factory workspace tool in a complex standalone B physics example ;  ; file  rf513_wsfactory_tools.py;   Organization and simultaneous fits: illustration use of ROOT.RooCustomizer and ROOT.RooSimWSTool interface in factory workspace tool in a complex standalone B physics example ;  ; file  rf514_RooCustomizer.C;   Using the RooCustomizer to create multiple PDFs that share a lot of properties, but have unique parameters for each category. ;  ; file  rf514_RooCustomizer.py;   Using the RooCustomizer to create multiple PDFs that share a lot of properties, but have unique parameters for each category. ;  ; file  rf515_hfJSON.py;   Code HistFactory Models in JSON. ;  ; file  rf601_intminuit.C;   Likelihood and minimization: interactive minimization with MINUIT ;  ; file  rf601_intminuit.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #601 ;  ; file  rf602_chi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to a binned dataset ;  ; file  rf602_chi2fit.py;   'LIKELIHOOD AND MIN",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:15239,Integrability,interface,interface,15239,"_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf512_wsfactory_oper.C;   Organization and simultaneous fits: operator expressions and expression-based basic pdfs in the workspace factory syntax ;  ; file  rf512_wsfactory_oper.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #512 ;  ; file  rf513_wsfactory_tools.C;   Organization and simultaneous fits: RooCustomizer and RooSimWSTool interface in factory workspace tool in a complex standalone B physics example ;  ; file  rf513_wsfactory_tools.py;   Organization and simultaneous fits: illustration use of ROOT.RooCustomizer and ROOT.RooSimWSTool interface in factory workspace tool in a complex standalone B physics example ;  ; file  rf514_RooCustomizer.C;   Using the RooCustomizer to create multiple PDFs that share a lot of properties, but have unique parameters for each category. ;  ; file  rf514_RooCustomizer.py;   Using the RooCustomizer to create multiple PDFs that share a lot of properties, but have unique parameters for each category. ;  ; file  rf515_hfJSON.py;   Code HistFactory Models in JSON. ;  ; file  rf601_intminuit.C;   Likelihood and minimization: interactive minimization with MINUIT ;  ; file  rf601_intminuit.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #601 ;  ; file  rf602_chi2fit.C;   Likelihood and minimization: setting up a chi^2 fit to a binned dataset ;  ; file  rf602_chi2fit.py;   'LIKELIHOOD AND MINIMIZATION' RooFit tutorial macro #602 ;  ; file  rf603_multicpu.C;   Likelihood and minimization: setting up a multi-core parallelized unbinned maximum likelihood fit ;  ; file  rf603_multicpu.py;   Likelihood and minimization: setting up a m",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:1994,Modifiability,variab,variable,1994,"y for functions and pdfs ;  ; file  rf104_classfactory.py;   Basic functionality: the class factory for functions and pdfs ;  ; file  rf105_funcbinding.C;   Basic functionality: binding ROOT math functions as RooFit functions and pdfs ;  ; file  rf105_funcbinding.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs ;  ; file  rf106_plotdecoration.C;   Basic functionality: adding boxes with parameters, statistics to RooPlots, decorating with arrows, text etc... ;  ; file  rf106_plotdecoration.py;   Basic functionality: adding boxes with parameters to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:2110,Modifiability,variab,variable,2110," pdfs ;  ; file  rf105_funcbinding.C;   Basic functionality: binding ROOT math functions as RooFit functions and pdfs ;  ; file  rf105_funcbinding.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs ;  ; file  rf106_plotdecoration.C;   Basic functionality: adding boxes with parameters, statistics to RooPlots, decorating with arrows, text etc... ;  ; file  rf106_plotdecoration.py;   Basic functionality: adding boxes with parameters to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition an",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:3326,Modifiability,extend,extended,3326,"'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204b_extendedLikelihood_rangedFit.C;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf204b_extendedLikelihood_rangedFit.py;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf205_compplot.C;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf205_compplot.py;   Addition and convolution: options for plotting components of co",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:3436,Modifiability,extend,extended,3436,"s, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204b_extendedLikelihood_rangedFit.C;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf204b_extendedLikelihood_rangedFit.py;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf205_compplot.C;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf205_compplot.py;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf206_treevistools.C;   Addition and convolution: tools for visualization of RooAbs",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:3949,Modifiability,extend,extended,3949,",2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204b_extendedLikelihood_rangedFit.C;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf204b_extendedLikelihood_rangedFit.py;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf205_compplot.C;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf205_compplot.py;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf206_treevistools.C;   Addition and convolution: tools for visualization of RooAbsArg expression trees ;  ; file  rf206_treevistools.py;   Addition and convolution: tools for visualization of ROOT.RooAbsArg expression trees ;  ; file  rf207_comptools.C;   Addition and convolution: tools and utilities for manipulation of composite objects ;  ; file  rf207_comptools.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #207 Tools and utilities for manipulation of composite objects ;  ; file  rf208_convolution.C;   Addition and convolution: one-dimensi",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:4108,Modifiability,extend,extended,4108,_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting in sub ranges ;  ; file  rf204a_extendedLikelihood.C;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204a_extendedLikelihood.py;   Extended maximum likelihood fit in multiple ranges. ;  ; file  rf204b_extendedLikelihood_rangedFit.C;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf204b_extendedLikelihood_rangedFit.py;   This macro demonstrates how to set up a fit in two ranges for plain likelihoods and extended likelihoods. ;  ; file  rf205_compplot.C;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf205_compplot.py;   Addition and convolution: options for plotting components of composite pdfs. ;  ; file  rf206_treevistools.C;   Addition and convolution: tools for visualization of RooAbsArg expression trees ;  ; file  rf206_treevistools.py;   Addition and convolution: tools for visualization of ROOT.RooAbsArg expression trees ;  ; file  rf207_comptools.C;   Addition and convolution: tools and utilities for manipulation of composite objects ;  ; file  rf207_comptools.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #207 Tools and utilities for manipulation of composite objects ;  ; file  rf208_convolution.C;   Addition and convolution: one-dimensional numeric convolution ;  ; file  rf208_convolution.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #208 One-dimensional numeric convolution (require ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9315,Modifiability,parameteriz,parameterized,9315,dfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9577,Modifiability,parameteriz,parameterized,9577, discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9971,Modifiability,enhance,enhanced,9971,ultirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; file  rf404_categories.C;   Data and categories: working with RooCategory objects to describe discrete variables ;  ; file  rf404_categories.py;   Data and,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:10153,Modifiability,enhance,enhanced,10153,with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; file  rf404_categories.C;   Data and categories: working with RooCategory objects to describe discrete variables ;  ; file  rf404_categories.py;   Data and categories: working with ROOT.RooCategory objects to describe discrete variables ;  ; file  rf405_realtocatfuncs.C;   Data and categories: demonstration of real-->discrete mapping fu,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:10921,Modifiability,variab,variables,10921,nal models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; file  rf404_categories.C;   Data and categories: working with RooCategory objects to describe discrete variables ;  ; file  rf404_categories.py;   Data and categories: working with ROOT.RooCategory objects to describe discrete variables ;  ; file  rf405_realtocatfuncs.C;   Data and categories: demonstration of real-->discrete mapping functions ;  ; file  rf405_realtocatfuncs.py;   Data and categories: demonstration of real-discrete mapping functions ;  ; file  rf406_cattocatfuncs.C;   Data and categories: demonstration of discrete-->discrete (invertible) functions ;  ; file  rf406_cattocatfuncs.py;   Data and categories: demonstration of discrete-discrete (invertable) functions ;  ; file  rf407_latextables.C;   Data and categories: latex printing of lists and sets of RooArgSets ;  ; file  rf407_latextables.py;   Data and categories: latex printing of lists and sets of RooArgSets ;  ; file  rf408_RDataFrameToRooFit.C;   Fill RooDataSet/RooDataHist in RDataFrame. ;  ; file  rf408_RDataFrameToRooFit.py;   Fill RooDataSet/RooDataHist in RDataFrame. ;  ; file  rf409_NumP,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:11045,Modifiability,variab,variables,11045,rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; file  rf401_importttreethx.py;   'DATA AND CATEGORIES' RooFit tutorial macro #401 ;  ; file  rf402_datahandling.C;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf402_datahandling.py;   Data and categories: tools for manipulation of (un)binned datasets ;  ; file  rf403_weightedevts.C;   Data and categories: using weights in unbinned datasets ;  ; file  rf403_weightedevts.py;   'DATA AND CATEGORIES' RooFit tutorial macro #403 ;  ; file  rf404_categories.C;   Data and categories: working with RooCategory objects to describe discrete variables ;  ; file  rf404_categories.py;   Data and categories: working with ROOT.RooCategory objects to describe discrete variables ;  ; file  rf405_realtocatfuncs.C;   Data and categories: demonstration of real-->discrete mapping functions ;  ; file  rf405_realtocatfuncs.py;   Data and categories: demonstration of real-discrete mapping functions ;  ; file  rf406_cattocatfuncs.C;   Data and categories: demonstration of discrete-->discrete (invertible) functions ;  ; file  rf406_cattocatfuncs.py;   Data and categories: demonstration of discrete-discrete (invertable) functions ;  ; file  rf407_latextables.C;   Data and categories: latex printing of lists and sets of RooArgSets ;  ; file  rf407_latextables.py;   Data and categories: latex printing of lists and sets of RooArgSets ;  ; file  rf408_RDataFrameToRooFit.C;   Fill RooDataSet/RooDataHist in RDataFrame. ;  ; file  rf408_RDataFrameToRooFit.py;   Fill RooDataSet/RooDataHist in RDataFrame. ;  ; file  rf409_NumPyPandasToRooFit.py;   Convert between NumPy arrays or Pandas DataFrames and RooDataSets. ;  ; file  rf501_simultaneouspdf.C;   Organisation and si,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13112,Modifiability,config,configuration,13112,multaneous fits to multiple datasets ;  ; file  rf501_simultaneouspdf.py;   Organization and simultaneous fits: using simultaneous pdfs to describe simultaneous fits to multiple datasets ;  ; file  rf502_wspacewrite.C;   Organisation and simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13226,Modifiability,config,configuration,13226,ng simultaneous pdfs to describe simultaneous fits to multiple datasets ;  ; file  rf502_wspacewrite.C;   Organisation and simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND S,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23576,Modifiability,config,configuration,23576,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23718,Modifiability,config,configuration,23718,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23859,Modifiability,config,configuration,23859,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:24013,Modifiability,config,configuration,24013,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:24203,Modifiability,parameteriz,parameterization,24203,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:24345,Modifiability,parameteriz,parameterizations,24345,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:8882,Performance,perform,performing,8882,"e distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using t",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:9016,Performance,perform,performing,9016,"and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:22891,Performance,perform,perform,22891,"arlowBeeston.py;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:23023,Performance,perform,perform,23023,"late. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and cu",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13810,Security,access,access,13810,f variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf512_wsfactory_oper.C;   Organization and simultaneous fits: operator expressions and expression-based basic pdfs in the workspace factory syntax ;  ; file,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13960,Security,access,access,13960,that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf512_wsfactory_oper.C;   Organization and simultaneous fits: operator expressions and expression-based basic pdfs in the workspace factory syntax ;  ; file  rf512_wsfactory_oper.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #512 ;  ; file  rf513_wsfactory_tools.C;   Organization and ,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13357,Testability,log,logging,13357, simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: bas,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:13491,Testability,log,logging,13491,f503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organiza,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:6969,Usability,simpl,simple,6969,"lot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_no",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:7071,Usability,simpl,simple,7071,"y;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of ",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:22673,Usability,simpl,simple,22673,"ysics with mixing and/or CP violation ;  ; file  rf709_BarlowBeeston.C;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf709_BarlowBeeston.py;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfi",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roofit.html:22768,Usability,simpl,simple,22768,"ethod for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf709_BarlowBeeston.py;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are ex",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
https://root.cern/doc/master/group__tutorial__roostats.html:3828,Performance,perform,performing,3828,umberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_Gamma ;  ; file  Zbi_Zgamma.py;   Demonstrate Z_Bi = Z_Gamma ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:1649,Security,validat,validates,1649,with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCo,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:528,Testability,test,testing,528,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:3643,Testability,test,test,3643,   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:3721,Testability,test,tests,3721,   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:3743,Testability,test,test,3743,   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:3862,Testability,test,test,3862,umberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_Gamma ;  ; file  Zbi_Zgamma.py;   Demonstrate Z_Bi = Z_Gamma ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:2188,Usability,simpl,simple,2188,counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCorrection.C;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; fil,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__roostats.html:2275,Usability,simpl,simple,2275, file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCorrection.C;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
https://root.cern/doc/master/group__tutorial__sql.html:315,Testability,test,test,315,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__sql.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html
https://root.cern/doc/master/group__tutorial__sql.html:396,Testability,test,test,396,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__sql.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html
https://root.cern/doc/master/group__tutorial__sql.html:1147,Testability,test,test,1147,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__sql.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html
https://root.cern/doc/master/group__tutorial__sql.html:1211,Testability,test,test,1211,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__sql.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html
https://root.cern/doc/master/group__tutorial__tmva.html:334,Integrability,interface,interface,334,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:450,Integrability,interface,interface,450,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:1310,Integrability,interface,interfaces,1310," to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classifica",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:511,Modifiability,variab,variables,511,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:1865,Testability,test,test,1865,"sorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:5168,Testability,test,testing,5168,"u need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ; file  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algo",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:5441,Testability,test,testing,5441,ined with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ; file  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;  ,MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:6500,Testability,test,testing,6500," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:7159,Testability,test,testing,7159," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:1611,Usability,learn,learning,1611,"f getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:1710,Usability,learn,learning,1710,"f events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classific",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:1977,Usability,learn,learn,1977,"sorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:3122,Usability,simpl,simple,3122,ered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_C,MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:3597,Usability,simpl,simple,3597,"Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses a",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:3778,Usability,simpl,simple,3778,"A_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:5269,Usability,simpl,simple,5269," header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ; file  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalCl",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:5573,Usability,simpl,simple,5573, uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ; file  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example,MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:6127,Usability,simpl,simple,6127,"examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:6245,Usability,simpl,simple,6245,";   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macr",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:6464,Usability,simpl,simple,6464," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:6610,Usability,simpl,simple,6610," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva.html:7256,Usability,simpl,simple,7256," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
https://root.cern/doc/master/group__tutorial__tmva__keras.html:233,Integrability,interface,interface,233,. ROOT: TMVA Keras tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA Keras tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use keras with the python interface of TMVA. . Files; file  ApplicationClassificationKeras.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionKeras.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationKeras.py;   This tutorial shows how to do classification in TMVA with neural networks trained with keras. ;  ; file  GenerateModel.py;   This tutorial shows how to define and generate a keras model for use with TMVA. ;  ; file  MulticlassKeras.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with keras. ;  ; file  RegressionKeras.py;   This tutorial shows how to do regression in TMVA with neural networks trained with keras. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__tmva__keras.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__keras.html
https://root.cern/doc/master/group__tutorial__tmva__pytorch.html:239,Integrability,interface,interface,239,. ROOT: TMVA PyTorch tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA PyTorch tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use pytorch with the python interface of TMVA. . Files; file  ApplicationClassificationPyTorch.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionPyTorch.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationPyTorch.py;   This tutorial shows how to do classification in TMVA with neural networks trained with PyTorch. ;  ; file  MulticlassPyTorch.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with PyTorch. ;  ; file  RegressionPyTorch.py;   This tutorial shows how to do regression in TMVA with neural networks trained with PyTorch. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__tmva__pytorch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__pytorch.html
https://root.cern/doc/master/group__tutorial__tree.html:1679,Deployability,install,installed,1679,"bles of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.roo",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:1155,Energy Efficiency,efficient,efficient,1155,"o use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use o",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:638,Modifiability,variab,variables,638,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:805,Modifiability,inherit,inheritance,805,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:3129,Modifiability,variab,variables,3129," hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ;  ; file  tree2a.C;   This example is the same as tree2.C, but uses a class instead of a C-struct. ;  ; file  tree3.C;   Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ;  ; file  tree4.C;   This example writes a tree with objects of the class Event. ;  ; file  treefriend.C;   Illustrates how to use Tree friends: ;  ; file  treegetval.C;   Illustrates how to retrieve TTree variables in arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:3433,Modifiability,variab,variable,3433," hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ;  ; file  tree2a.C;   This example is the same as tree2.C, but uses a class instead of a C-struct. ;  ; file  tree3.C;   Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ;  ; file  tree4.C;   This example writes a tree with objects of the class Event. ;  ; file  treefriend.C;   Illustrates how to use Tree friends: ;  ; file  treegetval.C;   Illustrates how to retrieve TTree variables in arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:3712,Modifiability,variab,variables,3712," hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ;  ; file  tree2a.C;   This example is the same as tree2.C, but uses a class instead of a C-struct. ;  ; file  tree3.C;   Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ;  ; file  tree4.C;   This example writes a tree with objects of the class Event. ;  ; file  treefriend.C;   Illustrates how to use Tree friends: ;  ; file  treegetval.C;   Illustrates how to retrieve TTree variables in arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:465,Performance,perform,performance,465,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__tree.html:1874,Usability,simpl,simplest,1874," a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;  ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
https://root.cern/doc/master/group__tutorial__v7.html:191,Integrability,interface,interface,191,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
https://root.cern/doc/master/group__tutorial__v7.html:510,Performance,concurren,concurrentfill,510,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
https://root.cern/doc/master/group__tutorial__v7.html:675,Usability,simpl,simple,675,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
https://root.cern/doc/master/group__tutorial__vecops.html:427,Energy Efficiency,allocate,allocate,427,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:567,Energy Efficiency,allocate,allocate,567,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:860,Testability,log,logical,860,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:292,Usability,guid,guide,292,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:362,Usability,learn,learn,362,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:502,Usability,learn,learn,502,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:643,Usability,learn,learn,643,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:812,Usability,learn,learn,812,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:936,Usability,learn,learn,936,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:1058,Usability,learn,learn,1058,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:1178,Usability,learn,learn,1178,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__vecops.html:1280,Usability,learn,learn,1280,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
https://root.cern/doc/master/group__tutorial__webcanv.html:527,Testability,log,logN,527,. ROOT: TWebCanvas tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TWebCanvas tutorialsTutorials. ; Examples showing the special features of web-based canvas. . Files; file  fonts_ttf.cxx;   Usage of TTF fonts in web canvas. ;  ; file  haxis.cxx;   Swap X/Y axes drawing and use to draw TH1 as bar and as markers. ;  ; file  inframe.cxx;   Drawing primitives inside and outside of the frame. ;  ; file  latex_url.cxx;   Use of interactive URL links inside TLatex. ;  ; file  logN.cxx;   Logarithmic scales support in web canvas. ;  ; file  triangle.cxx;  User class with custom JavaScript painter in the web canvas. ;  ; file  twoscales.cxx;   Two fully interactive scales in web canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__webcanv.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webcanv.html
https://root.cern/doc/master/group__tutorial__webgui.html:294,Availability,ping,ping,294,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
https://root.cern/doc/master/group__tutorial__webgui.html:345,Performance,perform,performance,345,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
https://root.cern/doc/master/group__tutorial__webgui.html:477,Usability,simpl,simple,477,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
https://root.cern/doc/master/group__tutorial__xml.html:347,Usability,simpl,simple,347,". ROOT: XML tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; XML tutorialsTutorials. ; XML examples. . Files; file  DOMParsePerson.C;  ROOT implementation of a XML DOM Parser. ;  ; file  DOMRecursive.C;  ROOT implementation of a XML DOM Parser. ;  ; file  SAXHandler.C;  ROOT implementation of a simple SAX Handler. ;  ; file  xmlmodifyfile.C;  Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  ; file  xmlnewfile.C;  Example to create a new xml file with the TXMLEngine class. ;  ; file  xmlreadfile.C;  Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__xml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__xml.html
https://root.cern/doc/master/group__Unfold.html:194,Safety,detect,detector,194,". ROOT: TUnfold classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TUnfold classesHistogram Library. ; An algorithm to unfold distributions from detector to truth level.; AuthorStefan Schmitt DESY . Classes; class  TUnfoldSys;  An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Unfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Unfold.html
https://root.cern/doc/master/group__Unfold.html:319,Safety,detect,detector,319,". ROOT: TUnfold classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TUnfold classesHistogram Library. ; An algorithm to unfold distributions from detector to truth level.; AuthorStefan Schmitt DESY . Classes; class  TUnfoldSys;  An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Unfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Unfold.html
https://root.cern/doc/master/group__vecops.html:52921,Deployability,toggle,toggle,52921,"template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const RVec< T0 > & ; v, . const T1 & ; y . ). Definition at line 1849 of file RVec.hxx. ◆ hypot() [2/3]. template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const RVec< T0 > & ; v0, . const RVec< T1 > & ; v1 . ). Definition at line 1849 of file RVec.hxx. ◆ hypot() [3/3]. template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const T0 & ; x, . const RVec< T1 > & ; v . ). Definition at line 1849 of file RVec.hxx. ◆ Intersect(). template<typename T > . RVec< T > ROOT::VecOps::Intersect ; (; const RVec< T > & ; v1, . const RVec< T > & ; v2, . bool ; v2_is_sorted = false . ). Return the intersection of elements of two RVecs. ; Each element of v1 is looked up in v2 and added to the returned vector if found. Following, the order of v1 is preserved. If v2 is already sorted, the optional argument v2_is_sorted can be used to toggle of the internal sorting step, therewith optimising runtime.; Example code, at the ROOT prompt: using namespace ROOT::VecOps;; RVecD v1 {1., 2., 3.};; RVecD v2 {-4., -5., 2., 1.};; auto v1_intersect_v2 = Intersect(v1, v2);; v1_intersect_v2; // (ROOT::VecOps::RVec<double> &) { 1.0000000, 2.0000000 }; ROOT::VecOps::IntersectRVec< T > Intersect(const RVec< T > &v1, const RVec< T > &v2, bool v2_is_sorted=false)Return the intersection of elements of two RVecs.Definition RVec.hxx:2758. Definition at line 2758 of file RVec.hxx. ◆ InvariantMass(). template<typename T0 , typename T1 = T0, typename T2 = T0, typename T3 = T0, typename Common_t = std::common_type_t<T0, T1, T2, T3>> . Common_t ROOT::VecOps::InvariantMass ; (; const RVec< T0 > & ; pt, . const RVec< T1 > & ; eta, . const RVec< T2 > & ; phi, . const RVec< T3 > & ; mass . ). Return the invariant mass of multiple particles given the collections of the quantities transverse momentum (pt), rapidity (eta), azimuth (phi) and mass",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
https://root.cern/doc/master/group__vecops.html:24896,Testability,log,log,24896,"0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot (const T0 &x, const RVec<",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
https://root.cern/doc/master/group__vecops.html:56873,Testability,log,log,56873," = T0, typename T2 = T0, typename T3 = T0, typename T4 = T0, typename T5 = T0, typename T6 = T0, typename T7 = T0, typename Common_t = std::common_type_t<T0, T1, T2, T3, T4, T5, T6, T7>> . Common_t ROOT::VecOps::InvariantMasses_PxPyPzM ; (; const T0 & ; x1, . const T1 & ; y1, . const T2 & ; z1, . const T3 & ; mass1, . const T4 & ; x2, . const T5 & ; y2, . const T6 & ; z2, . const T7 & ; mass2 . ). Return the invariant mass of two particles given x coordinate (px), y coordinate (py), z coordinate (pz) and mass. ; The function computes the invariant mass of two particles with the four-vectors (x1, y2, z1, mass1) and (x2, py2, pz2, mass2). ; Definition at line 3051 of file RVec.hxx. ◆ lgamma(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::lgamma ; (; const RVec< T > & ; v). Definition at line 1875 of file RVec.hxx. ◆ llround(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::llround ; (; const RVec< T > & ; v). Definition at line 1871 of file RVec.hxx. ◆ log(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log ; (; const RVec< T > & ; v). Definition at line 1841 of file RVec.hxx. ◆ log10(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log10 ; (; const RVec< T > & ; v). Definition at line 1842 of file RVec.hxx. ◆ log1p(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log1p ; (; const RVec< T > & ; v). Definition at line 1844 of file RVec.hxx. ◆ log2(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log2 ; (; const RVec< T > & ; v). Definition at line 1843 of file RVec.hxx. ◆ lround(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::lround ; (; const RVec< T > & ; v). Definition at line 1870 of file RVec.hxx. ◆ Map(). template<typename... Args> . auto ROOT::VecOps::Map ; (; Args &&... ; args). Create new collection applying a callable to the elements of the input collection. ; Example code, at the ROOT prompt: using namespace ROOT::VecOps;; RVecF v {1.f, 2.f",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
https://root.cern/doc/master/group__vecops.html:56943,Testability,log,log,56943,"name T5 = T0, typename T6 = T0, typename T7 = T0, typename Common_t = std::common_type_t<T0, T1, T2, T3, T4, T5, T6, T7>> . Common_t ROOT::VecOps::InvariantMasses_PxPyPzM ; (; const T0 & ; x1, . const T1 & ; y1, . const T2 & ; z1, . const T3 & ; mass1, . const T4 & ; x2, . const T5 & ; y2, . const T6 & ; z2, . const T7 & ; mass2 . ). Return the invariant mass of two particles given x coordinate (px), y coordinate (py), z coordinate (pz) and mass. ; The function computes the invariant mass of two particles with the four-vectors (x1, y2, z1, mass1) and (x2, py2, pz2, mass2). ; Definition at line 3051 of file RVec.hxx. ◆ lgamma(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::lgamma ; (; const RVec< T > & ; v). Definition at line 1875 of file RVec.hxx. ◆ llround(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::llround ; (; const RVec< T > & ; v). Definition at line 1871 of file RVec.hxx. ◆ log(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log ; (; const RVec< T > & ; v). Definition at line 1841 of file RVec.hxx. ◆ log10(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log10 ; (; const RVec< T > & ; v). Definition at line 1842 of file RVec.hxx. ◆ log1p(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log1p ; (; const RVec< T > & ; v). Definition at line 1844 of file RVec.hxx. ◆ log2(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::log2 ; (; const RVec< T > & ; v). Definition at line 1843 of file RVec.hxx. ◆ lround(). template<typename T > . RVec< PromoteType< T > > ROOT::VecOps::lround ; (; const RVec< T > & ; v). Definition at line 1870 of file RVec.hxx. ◆ Map(). template<typename... Args> . auto ROOT::VecOps::Map ; (; Args &&... ; args). Create new collection applying a callable to the elements of the input collection. ; Example code, at the ROOT prompt: using namespace ROOT::VecOps;; RVecF v {1.f, 2.f, 4.f};; auto v_square = Map(v, [](float f){return f* 2.f;});; v",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1580,Deployability,update,update,1580," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1404,Energy Efficiency,adapt,adapter,1404," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1926,Energy Efficiency,adapt,adapting,1926," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:3412,Energy Efficiency,adapt,adapting,3412,"anual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F( double x, void * p) {; 71 ; 72 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 73 return (*function)( x );; 74 }; 75 ; 76 ; 77 static double Df( double x, void * p) {; 78 ; 79 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 80 return (*function).Derivative( x );; 81 }; 82 ; 83 static void Fdf( double x, void * p, double *f, double *df ) {; 84 ; 85 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 86 *f = (*function) ( x );; 87 *df = (*function).Derivative( x );; 88 }; 89 ; 90 };; 91 ; 92 ; 93} // namespace Math; 94} // namespace ROOT; 95 ; 96 ; 97#endif /* ROOT_Math_GSLFunctionAdapter */; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL.Definition GSLFunctionAdapter.h:63; ROOT::Math::GSLFunctionAdapter::Fdfstatic void Fdf(double x, void *p, double *f, double *df)Definition GSLFunctionAdapter.h:83; ROOT::Math::GSLFunctionAdapter::GSLFunctionAdapterGSLFunctionAdapter()Definition GSLFunctionAdapter.h:67; ROOT::Math::GSLFunctionAdapter::Fstatic double F(double x, void *p)Definition GSLFunctionAdapter.h:70; ROOT::Math::GSLFunctionAdapter::~GSLFunctionAdaptervirtual ~GSLFunctionAdapter()Definition GSLFunctionAdapter.h:68; ROOT::Math::GSLFunctionAdapter::Dfstatic double Df(double x, void *p)Definition GSLFunctionAdapter.h:77; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GSLFuncPointerdouble(* GSLFuncPointer)(double, void *)Function pointer corresponding to gsl_function signature.Definition GSLFunctionAdapter.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forwa",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1404,Integrability,adapter,adapter,1404," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1404,Modifiability,adapt,adapter,1404," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1926,Modifiability,adapt,adapting,1926," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:3412,Modifiability,adapt,adapting,3412,"anual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F( double x, void * p) {; 71 ; 72 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 73 return (*function)( x );; 74 }; 75 ; 76 ; 77 static double Df( double x, void * p) {; 78 ; 79 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 80 return (*function).Derivative( x );; 81 }; 82 ; 83 static void Fdf( double x, void * p, double *f, double *df ) {; 84 ; 85 UserFunc * function = reinterpret_cast< UserFunc *> (p);; 86 *f = (*function) ( x );; 87 *df = (*function).Derivative( x );; 88 }; 89 ; 90 };; 91 ; 92 ; 93} // namespace Math; 94} // namespace ROOT; 95 ; 96 ; 97#endif /* ROOT_Math_GSLFunctionAdapter */; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL.Definition GSLFunctionAdapter.h:63; ROOT::Math::GSLFunctionAdapter::Fdfstatic void Fdf(double x, void *p, double *f, double *df)Definition GSLFunctionAdapter.h:83; ROOT::Math::GSLFunctionAdapter::GSLFunctionAdapterGSLFunctionAdapter()Definition GSLFunctionAdapter.h:67; ROOT::Math::GSLFunctionAdapter::Fstatic double F(double x, void *p)Definition GSLFunctionAdapter.h:70; ROOT::Math::GSLFunctionAdapter::~GSLFunctionAdaptervirtual ~GSLFunctionAdapter()Definition GSLFunctionAdapter.h:68; ROOT::Math::GSLFunctionAdapter::Dfstatic double Df(double x, void *p)Definition GSLFunctionAdapter.h:77; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GSLFuncPointerdouble(* GSLFuncPointer)(double, void *)Function pointer corresponding to gsl_function signature.Definition GSLFunctionAdapter.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forwa",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html:1445,Usability,usab,usable,1445," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:1455,Deployability,update,update,1455,"* This library is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void S",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:2083,Energy Efficiency,adapt,adapt,2083,"9 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:4871,Energy Efficiency,adapt,adapting,4871,"; 122 ; 123 ; 124 gsl_function_fdf * GetFunc() { return &fFunc; }; 125 ; 126 // evaluate the function and derivatives; 127 double operator() (double x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullptr ) ? true : false;; 138 }; 139 ; 140 private:; 141 gsl_function_fdf fFunc;; 142 ; 143 };; 144 ; 145 ; 146 ; 147} // namespace Math; 148} // namespace ROOT; 149 ; 150#endif /* ROOT_Math_GSLFunctionWrapper */; GSLFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; GSL_FN_EVAL#define GSL_FN_EVAL(F, x)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:68; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL.Definition GSLFunctionAdapter.h:63; ROOT::Math::GSLFunctionDerivWrapperclass to wrap a gsl_function_fdf (with derivatives)Definition GSLFunctionWrapper.h:105; ROOT::Math::GSLFunctionDerivWrapper::SetDerivPointervoid SetDerivPointer(GSLFuncPointer f)Definition GSLFunctionWrapper.h:119; ROOT::Math::GSLFunctionDerivWrapper::fFuncgsl_function_fdf fFuncDefinition GSLFunctionWrapper.h:141; ROOT::Math::GSLFunctionDerivWrapper::IsValidbool IsValid()check if function is valid (has been set)Definition GSLFunctionWrapper.h:136; ROOT::Math::GSLFunctionDerivWrapper::operator()double operator()(double x)Definition GSLFunctionWrapper.h:127; ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapperGSLFunctionDerivWrapper()Definition GSLFunctionWrapper.h:109; ROOT::Math::GSLFunctionDerivWrapper::SetFdfPointervoid SetFdfPointer(GSLFdfPointer f)Definition GSLFunctionWrapper.h:120; ROOT::Math::GSLFunctionDerivWrapper::SetParamsvoid SetParams(void",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:3368,Integrability,wrap,wrap,3368,"nter to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check if function is valid (has been set); 91 bool IsValid() {; 92 return (fFunc.function != nullptr) ? true : false;; 93 }; 94 ; 95private:; 96 gsl_function fFunc;; 97 ; 98 ; 99};; 100 ; 101 ; 102 /**; 103 class to wrap a gsl_function_fdf (with derivatives); 104 */; 105 class GSLFunctionDerivWrapper {; 106 ; 107 public:; 108 ; 109 GSLFunctionDerivWrapper(); 110 {; 111 fFunc.f = nullptr;; 112 fFunc.df = nullptr;; 113 fFunc.fdf = nullptr;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLFuncPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLFdfPointer f) { fFunc.fdf = f; }; 121 void SetParams ( void * p) { fFunc.params = p; }; 122 ; 123 ; 124 gsl_function_fdf * GetFunc() { return &fFunc; }; 125 ; 126 // evaluate the function and derivatives; 127 double operator() (double x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullpt",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:5017,Integrability,wrap,wrap,5017," x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullptr ) ? true : false;; 138 }; 139 ; 140 private:; 141 gsl_function_fdf fFunc;; 142 ; 143 };; 144 ; 145 ; 146 ; 147} // namespace Math; 148} // namespace ROOT; 149 ; 150#endif /* ROOT_Math_GSLFunctionWrapper */; GSLFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; GSL_FN_EVAL#define GSL_FN_EVAL(F, x)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:68; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL.Definition GSLFunctionAdapter.h:63; ROOT::Math::GSLFunctionDerivWrapperclass to wrap a gsl_function_fdf (with derivatives)Definition GSLFunctionWrapper.h:105; ROOT::Math::GSLFunctionDerivWrapper::SetDerivPointervoid SetDerivPointer(GSLFuncPointer f)Definition GSLFunctionWrapper.h:119; ROOT::Math::GSLFunctionDerivWrapper::fFuncgsl_function_fdf fFuncDefinition GSLFunctionWrapper.h:141; ROOT::Math::GSLFunctionDerivWrapper::IsValidbool IsValid()check if function is valid (has been set)Definition GSLFunctionWrapper.h:136; ROOT::Math::GSLFunctionDerivWrapper::operator()double operator()(double x)Definition GSLFunctionWrapper.h:127; ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapperGSLFunctionDerivWrapper()Definition GSLFunctionWrapper.h:109; ROOT::Math::GSLFunctionDerivWrapper::SetFdfPointervoid SetFdfPointer(GSLFdfPointer f)Definition GSLFunctionWrapper.h:120; ROOT::Math::GSLFunctionDerivWrapper::SetParamsvoid SetParams(void *p)Definition GSLFunctionWrapper.h:121; ROOT::Math::GSLFunctionDerivWrapper::SetFuncPointervoid SetFuncPointer(GSLFuncPointer f)Definition GSLFunct",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:2083,Modifiability,adapt,adapt,2083,"9 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:4871,Modifiability,adapt,adapting,4871,"; 122 ; 123 ; 124 gsl_function_fdf * GetFunc() { return &fFunc; }; 125 ; 126 // evaluate the function and derivatives; 127 double operator() (double x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullptr ) ? true : false;; 138 }; 139 ; 140 private:; 141 gsl_function_fdf fFunc;; 142 ; 143 };; 144 ; 145 ; 146 ; 147} // namespace Math; 148} // namespace ROOT; 149 ; 150#endif /* ROOT_Math_GSLFunctionWrapper */; GSLFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; GSL_FN_EVAL#define GSL_FN_EVAL(F, x)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:68; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL.Definition GSLFunctionAdapter.h:63; ROOT::Math::GSLFunctionDerivWrapperclass to wrap a gsl_function_fdf (with derivatives)Definition GSLFunctionWrapper.h:105; ROOT::Math::GSLFunctionDerivWrapper::SetDerivPointervoid SetDerivPointer(GSLFuncPointer f)Definition GSLFunctionWrapper.h:119; ROOT::Math::GSLFunctionDerivWrapper::fFuncgsl_function_fdf fFuncDefinition GSLFunctionWrapper.h:141; ROOT::Math::GSLFunctionDerivWrapper::IsValidbool IsValid()check if function is valid (has been set)Definition GSLFunctionWrapper.h:136; ROOT::Math::GSLFunctionDerivWrapper::operator()double operator()(double x)Definition GSLFunctionWrapper.h:127; ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapperGSLFunctionDerivWrapper()Definition GSLFunctionWrapper.h:109; ROOT::Math::GSLFunctionDerivWrapper::SetFdfPointervoid SetFdfPointer(GSLFdfPointer f)Definition GSLFunctionWrapper.h:120; ROOT::Math::GSLFunctionDerivWrapper::SetParamsvoid SetParams(void",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:2797,Testability,assert,assert,2797,"pedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check if function is valid (has been set); 91 bool IsValid() {; 92 return (fFunc.function != nullptr) ? true : false;; 93 }; 94 ; 95private:; 96 gsl_function fFunc;; 97 ; 98 ; 99};; 100 ; 101 ; 102 /**; 103 class to wrap a gsl_function_fdf (with derivatives); 104 */; 105 class GSLFunctionDerivWrapper {; 106 ; 107 public:; 108 ; 109 GSLFunctionDerivWrapper(); 110 {; 111 fFunc.f = nullptr;; 112 fFunc.df = nullptr;; 113 fFunc.fdf = nullptr;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLFuncPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLFdfPointe",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMCIntegrationWorkspace_8h.html:454,Integrability,depend,dependency,454,". ROOT: math/mathmore/src/GSLMCIntegrationWorkspace.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; GSLMCIntegrationWorkspace.h File Reference. #include ""gsl/gsl_math.h""; #include ""gsl/gsl_monte.h""; #include ""gsl/gsl_monte_vegas.h""; #include ""gsl/gsl_monte_miser.h""; #include ""gsl/gsl_monte_plain.h""; #include ""Math/MCParameters.h""; #include ""Math/MCIntegrationTypes.h"". Include dependency graph for GSLMCIntegrationWorkspace.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Math::GSLMCIntegrationWorkspace;  ; class  ROOT::Math::GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; class  ROOT::Math::GSLPlainIntegrationWorkspace;  ; class  ROOT::Math::GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Math;  . mathmathmoresrcGSLMCIntegrationWorkspace.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMCIntegrationWorkspace_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMCIntegrationWorkspace_8h.html
https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:1469,Deployability,update,update,1469," is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiFitFunctionWrapper; 32#define ROOT_Math_GSLMultiFitFunctionWrapper; 33 ; 34#include ""gsl/gsl_multifit.h""; 35 ; 36#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GS",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:3536,Energy Efficiency,adapt,adapting,3536,"ction structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMultiFitFunctionAdapter.h:69; ROOT::Math::GSLMultiFitFunctionWrapperwrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithmDefinition GSLMultiFitFunctionWrapper.h:58; ROOT::Math::GSLMultiFitFunctionWrapper::SetFunctionvoid SetFunction(const FuncVector &f, unsigned int nres, unsigned int npar)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiFitFunctionWrapper.h:79; ROOT::Math::GSLMultiFitFunctionWrapper::GetFuncgsl_multifit_function_fdf * GetFunc()Definition GSLMultiFitFunctionWrapper.h:90; ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapperGSLMultiFitFunctionWrapper()Definition GSLMultiFitFunctionWrapper.h:62; ROOT::Math::GSLMultiFitFunctionWrapper::fFuncgsl_multifit_function_fdf fFuncDefinition GSLMultiFitFunctionWrapper.h:95; double; MathNamespace for new Math classes and function",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:2086,Integrability,wrap,wrapper,2086,"opy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiFitFunctionWrapper; 32#define ROOT_Math_GSLMultiFitFunctionWrapper; 33 ; 34#include ""gsl/gsl_multifit.h""; 35 ; 36#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GSL_MAJOR_VERSION > 1; 71 fFunc.nevalf = 0;; 72 fFunc.nevaldf = 0;; 73#endif; 74 }; 75 ; 76 ; 77 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = n",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:3536,Modifiability,adapt,adapting,3536,"ction structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMultiFitFunctionAdapter.h:69; ROOT::Math::GSLMultiFitFunctionWrapperwrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithmDefinition GSLMultiFitFunctionWrapper.h:58; ROOT::Math::GSLMultiFitFunctionWrapper::SetFunctionvoid SetFunction(const FuncVector &f, unsigned int nres, unsigned int npar)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiFitFunctionWrapper.h:79; ROOT::Math::GSLMultiFitFunctionWrapper::GetFuncgsl_multifit_function_fdf * GetFunc()Definition GSLMultiFitFunctionWrapper.h:90; ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapperGSLMultiFitFunctionWrapper()Definition GSLMultiFitFunctionWrapper.h:62; ROOT::Math::GSLMultiFitFunctionWrapper::fFuncgsl_multifit_function_fdf fFuncDefinition GSLMultiFitFunctionWrapper.h:95; double; MathNamespace for new Math classes and function",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:2776,Testability,assert,assert,2776,"6#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GSL_MAJOR_VERSION > 1; 71 fFunc.nevalf = 0;; 72 fFunc.nevaldf = 0;; 73#endif; 74 }; 75 ; 76 ; 77 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMulti",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:1469,Deployability,update,update,1469," is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiMinFunctionWrapper; 32#define ROOT_Math_GSLMultiMinFunctionWrapper; 33 ; 34#include ""gsl/gsl_multimin.h""; 35 ; 36#include ""GSLMultiMinFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fF",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:8790,Energy Efficiency,adapt,adapting,8790,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:2071,Integrability,wrap,wrapper,2071,"ved a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiMinFunctionWrapper; 32#define ROOT_Math_GSLMultiMinFunctionWrapper; 33 ; 34#include ""gsl/gsl_multimin.h""; 35 ; 36#include ""GSLMultiMinFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 70 void SetDim ( unsigned int n ) { fFunc.n = n; }; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// Fill gsl function structure from a C++ Function class; 74 template<class FuncType>; 75 void SetFunction(const FuncType &f) {; 76 const void * p = &f;; 77 assert (p != nullptr);; 78 SetFuncPointer(&GSLMultiMinFunctionAdapter<FuncType >::F);; 79 SetDim( f.NDim() );; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_multimin_function * GetFunc() { return &fFunc; }; 84 ; 85 bool IsValid() {; 86 return (fFunc.f != nullptr) ?",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:8790,Modifiability,adapt,adapting,8790,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:2728,Testability,assert,assert,2728,"h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 70 void SetDim ( unsigned int n ) { fFunc.n = n; }; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// Fill gsl function structure from a C++ Function class; 74 template<class FuncType>; 75 void SetFunction(const FuncType &f) {; 76 const void * p = &f;; 77 assert (p != nullptr);; 78 SetFuncPointer(&GSLMultiMinFunctionAdapter<FuncType >::F);; 79 SetDim( f.NDim() );; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_multimin_function * GetFunc() { return &fFunc; }; 84 ; 85 bool IsValid() {; 86 return (fFunc.f != nullptr) ? true : false;; 87 }; 88 ; 89 ; 90 private:; 91 ; 92 gsl_multimin_function fFunc;; 93 ; 94 };; 95 ; 96 ; 97/**; 98 Wrapper for a multi-dimensional function with derivatives used in GSL multidim; 99 minimization algorithm; 100 ; 101 @ingroup MultiMin; 102 ; 103 */; 104 class GSLMultiMinDerivFunctionWrapper {; 105 ; 106 public:; 107 ; 108 GSLMultiMinDerivFunctionWrapper(); 109 {; 110 fFunc.f = nullptr;; 111 fFunc.df = nullptr;; 112 fFunc.fdf = nullptr;; 113 fFunc.n = 0;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLMultiMinDfPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( G",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:4011,Testability,assert,assert,4011," 90 private:; 91 ; 92 gsl_multimin_function fFunc;; 93 ; 94 };; 95 ; 96 ; 97/**; 98 Wrapper for a multi-dimensional function with derivatives used in GSL multidim; 99 minimization algorithm; 100 ; 101 @ingroup MultiMin; 102 ; 103 */; 104 class GSLMultiMinDerivFunctionWrapper {; 105 ; 106 public:; 107 ; 108 GSLMultiMinDerivFunctionWrapper(); 109 {; 110 fFunc.f = nullptr;; 111 fFunc.df = nullptr;; 112 fFunc.fdf = nullptr;; 113 fFunc.n = 0;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLMultiMinDfPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLMultiMinFdfPointer f) { fFunc.fdf = f; }; 121 void SetDim ( unsigned int n ) { fFunc.n = n; }; 122 void SetParams ( void * p) { fFunc.params = p; }; 123 ; 124 /// Fill gsl function structure from a C++ Function class; 125 template<class FuncType>; 126 void SetFunction(const FuncType &f) {; 127 const void * p = &f;; 128 assert (p != nullptr);; 129 SetFuncPointer(&GSLMultiMinFunctionAdapter<FuncType >::F);; 130 SetDerivPointer(&GSLMultiMinFunctionAdapter<FuncType >::Df);; 131 SetFdfPointer(&GSLMultiMinFunctionAdapter<FuncType >::Fdf);; 132 SetDim( f.NDim() );; 133 SetParams(const_cast<void *>(p));; 134 }; 135 ; 136 gsl_multimin_function_fdf * GetFunc() { return &fFunc; }; 137 ; 138#ifdef NEEDED_LATER; 139 // evaluate the function; 140 double operator() (const double * x) {; 141 // vx must be a gsl_vector; 142 return GSL_MULTIMIN_FN_EVAL(&fFunc, vx);; 143 }; 144#endif; 145 ; 146 /// check if function is valid (has been set); 147 bool IsValid() {; 148 return (fFunc.f != nullptr) ? true : false;; 149 }; 150 ; 151 private:; 152 ; 153 gsl_multimin_function_fdf fFunc;; 154 ; 155 };; 156 ; 157 ; 158 ; 159 ; 160} // namespace Math; 161} // namespace ROOT; 162 ; 163#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiMinFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefi",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:2220,Availability,toler,tolerance,2220,"LMultiRootFinder; 26//; 27// Created by: moneta at Sun Nov 14 11:27:11 2004; 28//; 29// Last update: Sun Nov 14 11:27:11 2004; 30//; 31 ; 32#include ""Math/IFunction.h""; 33#include ""Math/GSLMultiRootFinder.h""; 34#include ""GSLMultiRootSolver.h""; 35#include ""Math/Error.h""; 36 ; 37#include ""gsl/gsl_multiroots.h""; 38#include ""gsl/gsl_errno.h""; 39#include <cmath>; 40#include <iomanip>; 41 ; 42#include <algorithm>; 43#include <functional>; 44#include <cctype> // need to use c version of tolower defined here; 45 ; 46 ; 47namespace ROOT {; 48namespace Math {; 49 ; 50 // default values; 51 ; 52 int gDefaultMaxIter = 100;; 53 double gDefaultAbsTolerance = 1.E-6;; 54 double gDefaultRelTolerance = 1.E-10;; 55 ; 56// implementation of static methods; 57void GSLMultiRootFinder::SetDefaultTolerance(double abstol, double reltol ) {; 58 // set default tolerance; 59 gDefaultAbsTolerance = abstol;; 60 if (reltol > 0) gDefaultRelTolerance = reltol;; 61}; 62void GSLMultiRootFinder::SetDefaultMaxIterations(int maxiter) {; 63 // set default max iter; 64 gDefaultMaxIter = maxiter;; 65}; 66 ; 67GSLMultiRootFinder::GSLMultiRootFinder(EType type) :; 68 fIter(0), fStatus(-1), fPrintLevel(0),; 69 fType(type), fUseDerivAlgo(false),; 70 fSolver(nullptr); 71{; 72 // constructor for non derivative type; 73 fFunctions.reserve(2);; 74}; 75 ; 76GSLMultiRootFinder::GSLMultiRootFinder(EDerivType type) :; 77 fIter(0), fStatus(-1), fPrintLevel(0),; 78 fType(type), fUseDerivAlgo(true),; 79 fSolver(nullptr); 80{; 81 // constructor for non derivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootF",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:9440,Availability,toler,tolerance,9440,"RROR_MSG(""GSLMultiRootFinder::Solve"",""Function list is empty"");; 233 fStatus = -1;; 234 return false;; 235 }; 236 ; 237 if (fUseDerivAlgo) {; 238 EDerivType type = (EDerivType) fType;; 239 if (!fSolver) fSolver = new GSLMultiRootDerivSolver( GetGSLDerivType(type), Dim() );; 240 }; 241 else {; 242 EType type = (EType) fType;; 243 if (!fSolver) fSolver = new GSLMultiRootSolver( GetGSLType(type), Dim() );; 244 }; 245 ; 246 ; 247 // first set initial values and function; 248 assert(fSolver != nullptr);; 249 bool ret = fSolver->InitSolver( fFunctions, x);; 250 if (!ret) {; 251 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Error initializing the solver"");; 252 fStatus = -2;; 253 return false;; 254 }; 255 ; 256 if (maxIter == 0) maxIter = gDefaultMaxIter;; 257 if (absTol <= 0) absTol = gDefaultAbsTolerance;; 258 if (relTol <= 0) relTol = gDefaultRelTolerance;; 259 ; 260 if (fPrintLevel >= 1); 261 std::cout << ""GSLMultiRootFinder::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:9826,Availability,error,error,9826,"LType(type), Dim() );; 244 }; 245 ; 246 ; 247 // first set initial values and function; 248 assert(fSolver != nullptr);; 249 bool ret = fSolver->InitSolver( fFunctions, x);; 250 if (!ret) {; 251 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Error initializing the solver"");; 252 fStatus = -2;; 253 return false;; 254 }; 255 ; 256 if (maxIter == 0) maxIter = gDefaultMaxIter;; 257 if (absTol <= 0) absTol = gDefaultAbsTolerance;; 258 if (relTol <= 0) relTol = gDefaultRelTolerance;; 259 ; 260 if (fPrintLevel >= 1); 261 std::cout << ""GSLMultiRootFinder::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iteratio",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10302,Availability,error,error,10302,"e;; 259 ; 260 if (fPrintLevel >= 1); 261 std::cout << ""GSLMultiRootFinder::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10841,Availability,toler,tolerance,10841,"s == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:12171,Availability,error,error,12171,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:13526,Availability,toler,tolerance,13526,"inition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; ROOT::Math::GSLMultiRootBaseSolver::TestResidualint TestResidual(double absTol) consttest using abs tolerance Sum |f|_i < absTolDefinition GSLMultiRootSolver.h:126; ROOT::Math::GSLMultiRootBaseSolver::FValconst double * FVal() constreturn function valuesDefinition GSLMultiRootSolver.h:104; ROOT::Math::GSLMultiRootBaseSolver::Xconst double * X() constsolution values at the current iterationDefinition GSLMultiRootSolver.h:98; ROOT::Math::GSLMultiRootBaseSolver::Namevirtual const std::string & Name() const =0return name; ROOT::Math::GSLMultiRootBaseSolver::Dxconst double * Dx() constreturn function stepsDefinition GSLMultiRootSolver.h:110; ROOT::Math::GSLMultiRootBaseSolver::InitSolverbool InitSolver(const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)init the solver with function list and initial valuesDefinition GSLMultiRootSolver.h:71; ROOT::Math::GSLMultiRootBaseSolver::Iteratevirtual int Iterate()=0perform an iteration; ROOT::Math::GSLMultiRootBaseSolver::TestDeltaint TestDelta(double absTol, double relTol) consttest using abs and",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:14511,Availability,toler,tolerance,14511,"RootBaseSolver::TestResidualint TestResidual(double absTol) consttest using abs tolerance Sum |f|_i < absTolDefinition GSLMultiRootSolver.h:126; ROOT::Math::GSLMultiRootBaseSolver::FValconst double * FVal() constreturn function valuesDefinition GSLMultiRootSolver.h:104; ROOT::Math::GSLMultiRootBaseSolver::Xconst double * X() constsolution values at the current iterationDefinition GSLMultiRootSolver.h:98; ROOT::Math::GSLMultiRootBaseSolver::Namevirtual const std::string & Name() const =0return name; ROOT::Math::GSLMultiRootBaseSolver::Dxconst double * Dx() constreturn function stepsDefinition GSLMultiRootSolver.h:110; ROOT::Math::GSLMultiRootBaseSolver::InitSolverbool InitSolver(const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)init the solver with function list and initial valuesDefinition GSLMultiRootSolver.h:71; ROOT::Math::GSLMultiRootBaseSolver::Iteratevirtual int Iterate()=0perform an iteration; ROOT::Math::GSLMultiRootBaseSolver::TestDeltaint TestDelta(double absTol, double relTol) consttest using abs and relative tolerance |dx| < absTol + relTol*|x| for every componentDefinition GSLMultiRootSolver.h:117; ROOT::Math::GSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives.Definition GSLMultiRootSolver.h:255; ROOT::Math::GSLMultiRootFinder::fTypeint fTypeDefinition GSLMultiRootFinder.h:283; ROOT::Math::GSLMultiRootFinder::Dimunsigned int Dim() constreturn the number of sunctions set in the class.Definition GSLMultiRootFinder.h:203; ROOT::Math::GSLMultiRootFinder::Dxconst double * Dx() constreturn the last step sizeDefinition GSLMultiRootFinder.cxx:139; ROOT::Math::GSLMultiRootFinder::fPrintLevelint fPrintLevelDefinition GSLMultiRootFinder.h:278; ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFindervirtual ~GSLMultiRootFinder()destructorDefinition GSLMultiRootFinder.cxx:95; ROOT::Math::GSLMultiRootFinder::FValconst double * FVal() constreturn the function values f(X) solv",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:15975,Availability,toler,tolerance,15975,"nsigned int Dim() constreturn the number of sunctions set in the class.Definition GSLMultiRootFinder.h:203; ROOT::Math::GSLMultiRootFinder::Dxconst double * Dx() constreturn the last step sizeDefinition GSLMultiRootFinder.cxx:139; ROOT::Math::GSLMultiRootFinder::fPrintLevelint fPrintLevelDefinition GSLMultiRootFinder.h:278; ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFindervirtual ~GSLMultiRootFinder()destructorDefinition GSLMultiRootFinder.cxx:95; ROOT::Math::GSLMultiRootFinder::FValconst double * FVal() constreturn the function values f(X) solving the system i.e.Definition GSLMultiRootFinder.cxx:143; ROOT::Math::GSLMultiRootFinder::SetTypevoid SetType(EType type)set the type for an algorithm without derivativesDefinition GSLMultiRootFinder.h:148; ROOT::Math::GSLMultiRootFinder::fFunctionsstd::vector< ROOT::Math::IMultiGenFunction * > fFunctionsDefinition GSLMultiRootFinder.h:287; ROOT::Math::GSLMultiRootFinder::Solvebool Solve(const double *x, int maxIter=0, double absTol=0, double relTol=0)Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise...Definition GSLMultiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:16812,Availability,avail,available,16812,"ltiRootFinder.h:287; ROOT::Math::GSLMultiRootFinder::Solvebool Solve(const double *x, int maxIter=0, double absTol=0, double relTol=0)Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise...Definition GSLMultiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147; ROOT::Math::GSLMultiRootFinder::fStatusint fStatusDefinition GSLMultiRootFinder.h:277; ROOT::Math::GSLMultiRootFinder::PrintStatevoid PrintState(std::ostream &os=std::cout)print iteration stateDefinition GSLMultiRootFinder.cxx:321; ROOT::Math::GSLMultiRootFinder::ClearFunctionsvoid ClearFunctions()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:18374,Availability,toler,tolerance,18374,"tiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(EType type)create a multi-root finder based on an algorithm not requiring function derivativeDefinition GSLMultiRootFinder.cxx:67; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives.Definition GSLMultiRootSolver.h:155; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Ma",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:18417,Availability,toler,tolerance,18417,"tiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(EType type)create a multi-root finder based on an algorithm not requiring function derivativeDefinition GSLMultiRootFinder.cxx:67; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives.Definition GSLMultiRootSolver.h:155; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Ma",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:1467,Deployability,update,update,1467,"oundation, CERN/PH-SFT *; 7 * *; 8 * This library is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Implementation file for class GSLMultiRootFinder; 26//; 27// Created by: moneta at Sun Nov 14 11:27:11 2004; 28//; 29// Last update: Sun Nov 14 11:27:11 2004; 30//; 31 ; 32#include ""Math/IFunction.h""; 33#include ""Math/GSLMultiRootFinder.h""; 34#include ""GSLMultiRootSolver.h""; 35#include ""Math/Error.h""; 36 ; 37#include ""gsl/gsl_multiroots.h""; 38#include ""gsl/gsl_errno.h""; 39#include <cmath>; 40#include <iomanip>; 41 ; 42#include <algorithm>; 43#include <functional>; 44#include <cctype> // need to use c version of tolower defined here; 45 ; 46 ; 47namespace ROOT {; 48namespace Math {; 49 ; 50 // default values; 51 ; 52 int gDefaultMaxIter = 100;; 53 double gDefaultAbsTolerance = 1.E-6;; 54 double gDefaultRelTolerance = 1.E-10;; 55 ; 56// implementation of static methods; 57void GSLMultiRootFinder::SetDefaultTolerance(double abstol, double reltol ) {; 58 // set default tolerance; 59 gDefaultAbsTolerance = abstol;; 60 if (reltol > 0) gDefaultRelTolerance = reltol;; 61}; 62void GSLMultiRootFinder::SetDefaultMaxIterations(int maxiter) {; 63 ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:3278,Integrability,wrap,wrapper,3278,"tFinder::SetDefaultMaxIterations(int maxiter) {; 63 // set default max iter; 64 gDefaultMaxIter = maxiter;; 65}; 66 ; 67GSLMultiRootFinder::GSLMultiRootFinder(EType type) :; 68 fIter(0), fStatus(-1), fPrintLevel(0),; 69 fType(type), fUseDerivAlgo(false),; 70 fSolver(nullptr); 71{; 72 // constructor for non derivative type; 73 fFunctions.reserve(2);; 74}; 75 ; 76GSLMultiRootFinder::GSLMultiRootFinder(EDerivType type) :; 77 fIter(0), fStatus(-1), fPrintLevel(0),; 78 fType(type), fUseDerivAlgo(true),; 79 fSolver(nullptr); 80{; 81 // constructor for non derivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootFinder::SetType(const char * name) {; 103 // set type using a string; 104 std::pair<bool,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:5094,Integrability,interface,interface,5094,"ions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; 153// // clone and add function to the list; 154// // If using a derivative algorithm the function is checked if it implements; 155// // the gradient interface. If this is not the case the type is set to non-derivatibe algo; 156// ROOT::Math::IGenMultiFunction * f = func.Clone();; 157// if (f != 0) return false;; 158// if (fUseDerivAlgo) {; 159// bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; 160// if (!gradFunc) {; 161// MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; 162// MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; 163// ClearFunctions();; 164// return false;; 165// }; 166// }; 167// fFunctions.push_back(f);; 168// return true;; 169// }; 170 ; 171 const gsl_multiroot_fsolver_type * GetGSLType(GSLMultiRootFinder::EType type) {; 172 //helper functions to find GSL type; 173 switch(type); 174 {; 175 case ROOT::Math::GSLMultiRootFinder::kHybridS:; 176 return gsl_multiroot_fsolver_hybrids;; 177 ca",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:5485,Integrability,interface,interface,5485,"ouble * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; 153// // clone and add function to the list; 154// // If using a derivative algorithm the function is checked if it implements; 155// // the gradient interface. If this is not the case the type is set to non-derivatibe algo; 156// ROOT::Math::IGenMultiFunction * f = func.Clone();; 157// if (f != 0) return false;; 158// if (fUseDerivAlgo) {; 159// bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; 160// if (!gradFunc) {; 161// MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; 162// MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; 163// ClearFunctions();; 164// return false;; 165// }; 166// }; 167// fFunctions.push_back(f);; 168// return true;; 169// }; 170 ; 171 const gsl_multiroot_fsolver_type * GetGSLType(GSLMultiRootFinder::EType type) {; 172 //helper functions to find GSL type; 173 switch(type); 174 {; 175 case ROOT::Math::GSLMultiRootFinder::kHybridS:; 176 return gsl_multiroot_fsolver_hybrids;; 177 case ROOT::Math::GSLMultiRootFinder::kHybrid:; 178 return gsl_multiroot_fsolver_hybrid;; 179 case ROOT::Math::GSLMultiRootFinder::kDNewton:; 180 return gsl_multiroot_fsolver_dnewton;; 181 case ROOT::Math::GSLMultiRootFinder::kBroyden:; 182 return gsl_multiroot_fsolver_broyden;; 183 default:; 184 return gsl_multiroot_fsolver_hybrids;; 185 }; 186 return nullptr;; 187}; 188 ; 189const gsl_multiroot_fdfsolver_type * GetGSLDerivType(GSLMultiRootFinder::EDerivType type) {; 190//",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:12126,Integrability,message,messages,12126,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:12148,Modifiability,config,configured,12148,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:8921,Testability,assert,assert,8921,,MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10374,Testability,test,test,10374,"er::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10465,Testability,test,test,10465,"d::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:3901,Usability,clear,clear,3901,"erivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootFinder::SetType(const char * name) {; 103 // set type using a string; 104 std::pair<bool,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( c",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:4096,Usability,clear,clear,4096,"l,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; 153// // clone and add function to the list; 154// // If using a derivative algorithm the function is checked if it implements; 155// // the gradient interface. If this is not the case the type is set to non-derivatibe algo; 156// ROOT::Math::IGenMultiFunction * f = func.Clone();; 157// if (f != 0) return false;; 158// if (fUseDerivAlgo) {; 159// bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; 160// if (!gradFunc) {; 161// MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function do",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:4164,Usability,clear,clear,4164,"l,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; 153// // clone and add function to the list; 154// // If using a derivative algorithm the function is checked if it implements; 155// // the gradient interface. If this is not the case the type is set to non-derivatibe algo; 156// ROOT::Math::IGenMultiFunction * f = func.Clone();; 157// if (f != 0) return false;; 158// if (fUseDerivAlgo) {; 159// bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; 160// if (!gradFunc) {; 161// MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function do",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:5554,Usability,clear,clear,5554,"ouble * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; 153// // clone and add function to the list; 154// // If using a derivative algorithm the function is checked if it implements; 155// // the gradient interface. If this is not the case the type is set to non-derivatibe algo; 156// ROOT::Math::IGenMultiFunction * f = func.Clone();; 157// if (f != 0) return false;; 158// if (fUseDerivAlgo) {; 159// bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; 160// if (!gradFunc) {; 161// MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; 162// MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; 163// ClearFunctions();; 164// return false;; 165// }; 166// }; 167// fFunctions.push_back(f);; 168// return true;; 169// }; 170 ; 171 const gsl_multiroot_fsolver_type * GetGSLType(GSLMultiRootFinder::EType type) {; 172 //helper functions to find GSL type; 173 switch(type); 174 {; 175 case ROOT::Math::GSLMultiRootFinder::kHybridS:; 176 return gsl_multiroot_fsolver_hybrids;; 177 case ROOT::Math::GSLMultiRootFinder::kHybrid:; 178 return gsl_multiroot_fsolver_hybrid;; 179 case ROOT::Math::GSLMultiRootFinder::kDNewton:; 180 return gsl_multiroot_fsolver_dnewton;; 181 case ROOT::Math::GSLMultiRootFinder::kBroyden:; 182 return gsl_multiroot_fsolver_broyden;; 183 default:; 184 return gsl_multiroot_fsolver_hybrids;; 185 }; 186 return nullptr;; 187}; 188 ; 189const gsl_multiroot_fdfsolver_type * GetGSLDerivType(GSLMultiRootFinder::EDerivType type) {; 190//",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:12180,Usability,simpl,simply,12180,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:18194,Usability,clear,clear,18194,"()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(EType type)create a multi-root finder based on an algorithm not requiring function derivativeDefinition GSLMultiRootFinder.cxx:67; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives.D",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:2321,Availability,avail,available,2321,"der file for class GSLMultiRootFinder; 26//; 27 ; 28#ifndef ROOT_Math_GSLMultiRootFinder; 29#define ROOT_Math_GSLMultiRootFinder; 30 ; 31 ; 32 ; 33#include ""Math/IFunction.h""; 34 ; 35#include ""Math/WrappedFunction.h""; 36 ; 37#include <vector>; 38#include <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newt",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:2738,Availability,avail,available,2738,"8 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; 77 <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; 78 </ul>; 79 The algorithms without derivatives (see also the GSL; 80 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); 81 are the followings:; 82 <ul>; 83 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <i>""HybridS""</i>: same a",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:8510,Availability,toler,tolerance,8510,"hod as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintL",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9013,Availability,avail,available,9013,"he functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9529,Availability,toler,tolerance,9529,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9581,Availability,toler,tolerance,9581,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:10362,Availability,toler,tolerance,10362,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:10414,Availability,toler,tolerance,10414,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:13654,Availability,toler,tolerance,13654,"ltiRootFinder::fPrintLevelint fPrintLevelDefinition GSLMultiRootFinder.h:278; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(GSLMultiRootFinder &&)=delete; ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFindervirtual ~GSLMultiRootFinder()destructorDefinition GSLMultiRootFinder.cxx:95; ROOT::Math::GSLMultiRootFinder::FValconst double * FVal() constreturn the function values f(X) solving the system i.e.Definition GSLMultiRootFinder.cxx:143; ROOT::Math::GSLMultiRootFinder::SetTypevoid SetType(EDerivType type)set the type of algorithm using derivativesDefinition GSLMultiRootFinder.h:153; ROOT::Math::GSLMultiRootFinder::SetTypevoid SetType(EType type)set the type for an algorithm without derivativesDefinition GSLMultiRootFinder.h:148; ROOT::Math::GSLMultiRootFinder::fFunctionsstd::vector< ROOT::Math::IMultiGenFunction * > fFunctionsDefinition GSLMultiRootFinder.h:287; ROOT::Math::GSLMultiRootFinder::Solvebool Solve(const double *x, int maxIter=0, double absTol=0, double relTol=0)Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise...Definition GSLMultiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::SetPrintLevelvoid SetPrintLevel(int level)Definition GSLMultiRootFinder.h:246; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::SetFunctionListbool SetFunctionList(FuncIterator begin, Fun",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:14744,Availability,avail,available,14744,"ltiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::SetPrintLevelvoid SetPrintLevel(int level)Definition GSLMultiRootFinder.h:246; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::SetFunctionListbool SetFunctionList(FuncIterator begin, FuncIterator end)Definition GSLMultiRootFinder.h:170; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147; ROOT::Math::GSLMultiRootFinder::fStatusint fStatusDefinition GSLMultiRootFinder.h:277; ROOT::Math::GSLMultiRootFinder::PrintStatevoid PrintState(std::ostream &os=std::cout)print iteration stateDefinition GSLMultiRootFinder.cxx:321; ROOT::Math::GSLMultiRootFinder::PrintLevelint PrintLevel() constreturn the print levelDefinition GSLMultiRootFinder.h:249; ROOT::Math::GSLMultiRootFinder::ClearFunctionsvoid ClearFunctions()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::Statusint Status() constReturn the status of last root finding.Definition GSLMultiRootFinder.h:233; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GS",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:16796,Availability,toler,tolerance,16796,"ring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(Function &f, int ndim)same method as before but using any function implementing the operator(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootFinder::Iterationsint Iterations() constReturn number of iterations.Definition GSLMultiRootFinder.h:228; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunc",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:16839,Availability,toler,tolerance,16839,"ring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(Function &f, int ndim)same method as before but using any function implementing the operator(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootFinder::Iterationsint Iterations() constReturn number of iterations.Definition GSLMultiRootFinder.h:228; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunc",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9495,Deployability,configurat,configurations,9495,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:2557,Integrability,interface,interface,2557,"e <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; 77 <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; 78 </ul>; 79 The algorithms without derivatives (see also the GSL; 80 <A HREF=""http://www.gnu.org/software/gsl/manual/htm",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:2719,Integrability,interface,interface,2719,"e <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; 77 <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; 78 </ul>; 79 The algorithms without derivatives (see also the GSL; 80 <A HREF=""http://www.gnu.org/software/gsl/manual/htm",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:6564,Integrability,interface,interface,6564,"rator = (GSLMultiRootFinder &&) = delete;; 146 ; 147 /// set the type for an algorithm without derivatives; 148 void SetType(EType type) {; 149 fType = type; fUseDerivAlgo = false;; 150 }; 151 ; 152 /// set the type of algorithm using derivatives; 153 void SetType(EDerivType type) {; 154 fType = type; fUseDerivAlgo = true;; 155 }; 156 ; 157 /// set the type using a string; 158 void SetType(const char * name);; 159 ; 160 /*; 161 add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; 162 ROOT::Math::IMultiGenFunctions. The method requires the; 163 the begin and end of the list iterator.; 164 The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; 165 whatever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifeti",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:7244,Integrability,interface,interface,7244,"ever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 21",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:7528,Integrability,wrap,wrapped,7528,"ever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 21",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:7559,Integrability,interface,interface,7559,"ever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 21",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9195,Integrability,message,messages,9195,"he functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:16402,Integrability,wrap,wrapped,16402,"Finder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::Statusint Status() constReturn the status of last root finding.Definition GSLMultiRootFinder.h:233; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(Function &f, int ndim)same method as before but using any function implementing the operator(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the syste",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:17789,Integrability,wrap,wrap,17789,"tor(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiRootFinder::Iterationsint Iterations() constReturn number of iterations.Definition GSLMultiRootFinder.h:228; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::WrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-...Definition WrappedFunction.h:143; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::MultiRootFinderGSLMultiRootFinder MultiRootFinderDefinition GSLMultiRootFinder.h:293; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoreincMathGSLMultiRootFinder.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:9495,Modifiability,config,configurations,9495,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:6354,Usability,simpl,simple,6354,"MultiRootFinder();; 140 ; 141 // usually copying is non trivial, so we delete this; 142 GSLMultiRootFinder(const GSLMultiRootFinder &) = delete;; 143 GSLMultiRootFinder & operator = (const GSLMultiRootFinder &) = delete;; 144 GSLMultiRootFinder(GSLMultiRootFinder &&) = delete;; 145 GSLMultiRootFinder & operator = (GSLMultiRootFinder &&) = delete;; 146 ; 147 /// set the type for an algorithm without derivatives; 148 void SetType(EType type) {; 149 fType = type; fUseDerivAlgo = false;; 150 }; 151 ; 152 /// set the type of algorithm using derivatives; 153 void SetType(EDerivType type) {; 154 fType = type; fUseDerivAlgo = true;; 155 }; 156 ; 157 /// set the type using a string; 158 void SetType(const char * name);; 159 ; 160 /*; 161 add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; 162 ROOT::Math::IMultiGenFunctions. The method requires the; 163 the begin and end of the list iterator.; 164 The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; 165 whatever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:8043,Usability,clear,clear,8043,"184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( const ROOT::Math::IMultiGenFunction & func);; 189 ; 190 /// same method as before but using any function implementing; 191 /// the operator(), so can be wrapped in a IMultiGenFunction interface; 192 template <class Function>; 193 int AddFunction( Function & f, int ndim) {; 194 // no need to care about lifetime of wfunc. It will be cloned inside AddFunction; 195 WrappedMultiFunction<Function &> wfunc(f, ndim);; 196 return AddFunction(wfunc);; 197 }; 198 ; 199 /**; 200 return the number of sunctions set in the class.; 201 The number must be equal to the dimension of the functions; 202 */; 203 unsigned int Dim() const { return fFunctions.size(); }; 204 ; 205 /// clear list of functions; 206 void Clear();; 207 ; 208 /// return the root X values solving the system; 209 const double * X() const;; 210 ; 211 /// return the function values f(X) solving the system; 212 /// i.e. they must be close to zero at the solution; 213 const double * FVal() const;; 214 ; 215 /// return the last step size; 216 const double * Dx() const;; 217 ; 218 ; 219 /**; 220 Find the root starting from the point X;; 221 Use the number of iteration and tolerance if given otherwise use; 222 default parameter values which can be defined by; 223 the static method SetDefault...; 224 */; 225 bool Solve(const double * x, int maxIter = 0, double absTol = 0, double relTol = 0);; 226 ; 227 /// Return number of iterations; 228 int Iterations() const {; 229 return fIter;; 230 }; 231 ; 232 /// Return the status of last root finding; 233 int Status() const { return fStatus; }; 234 ; 235 /// Return the algorithm name used for solving; 236 /// Note the name is available only after having called solved; 237 /// Otherwise an empyty string is returned; 238 const char * Name() const;; ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:10059,Usability,clear,clear,10059,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:16508,Usability,clear,clear,16508,"ultiRootFinder.h:233; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(Function &f, int ndim)same method as before but using any function implementing the operator(), so can be wrapped in a IMul...Definition GSLMultiRootFinder.h:193; ROOT::Math::GSLMultiRootFinder::Clearvoid Clear()clear list of functionsDefinition GSLMultiRootFinder.cxx:127; ROOT::Math::GSLMultiRootFinder::operator=GSLMultiRootFinder & operator=(const GSLMultiRootFinder &)=delete; ROOT::Math::GSLMultiRootFinder::SetDefaultTolerancestatic void SetDefaultTolerance(double abstol, double reltol=0)set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it ...Definition GSLMultiRootFinder.cxx:57; ROOT::Math::GSLMultiRootFinder::AddFunctionint AddFunction(const ROOT::Math::IMultiGenFunction &func)Definition GSLMultiRootFinder.cxx:110; ROOT::Math::GSLMultiRootFinder::fUseDerivAlgobool fUseDerivAlgoDefinition GSLMultiRootFinder.h:284; ROOT::Math::GSLMultiRootFinder::Xconst double * X() constreturn the root X values solving the systemDefinition GSLMultiRootFinder.cxx:135; ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)set maximum number of iterationsDefinition GSLMultiRootFinder.cxx:62; ROOT::Math::GSLMultiR",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:1472,Deployability,update,update,1472," free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiRootFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function struct",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:5160,Energy Efficiency,adapt,adapting,5160,"; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiRootDerivFunctionWrapperwrapper to a multi-dim function with derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:96; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapperGSLMultiRootDerivFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:100; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctionsgsl_multiroot_function_fdf * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:122; ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFuncgsl_multiroot_function_fdf fFuncDefinition GSLMultiRootFunctionWrapper.h:127; ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:112; ROOT::Math::GSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The tem...Definition GSLMultiRootFunctionAdapter.h:68; ROOT::Math::GSLMultiRootFunctionWrapperwrapper to a multi-dim function without derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:57; ROOT::Math::GSLMultiRootFunctionWrapper::fFuncgsl_multiroot_function fFuncDefinition GSLMultiRootFunctionWrapper.h:84; ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctionsgsl_multiroot_function * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:79; ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapperGSLMultiRootFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:61; ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:71; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math clas",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:2143,Integrability,wrap,wrapper,2143," the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiRootFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 alg",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:2946,Integrability,wrap,wrapper,2946,"ter ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 algorithm; 92 ; 93 @ingroup MultiRoot; 94*/; 95 ; 96class GSLMultiRootDerivFunctionWrapper {; 97 ; 98public:; 99 ; 100 GSLMultiRootDerivFunctionWrapper(); 101 {; 102 fFunc.f = nullptr;; 103 fFunc.df = nullptr;; 104 fFunc.fdf = nullptr;; 105 fFunc.n = 0;; 106 fFunc.params = nullptr;; 107 }; 108 ; 109 ; 110 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 111 template<class FuncVector>; 112 void SetFunctions(const FuncVector & f, unsigned int n ) {; 113 const void * p = &f;; 114 assert (p != nullptr);; 115 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 116 fFunc.df = &GSLMultiRootFunctionAdapter<FuncVector >::Df;; 117 fFunc.fdf = &GSLMultiRootFunctionAdapter<FuncVector >::FDf;; 118 fFunc.n = n;; 119 fFunc.params = const_cast<void *>(p);; 120 }; 121 ; 122 gsl_multiroot_function_fdf * GetFunctions() { return &fFunc; }; 123 ; 124 ; 125 private:; 126 ; 127 gsl_multiroot_function_fdf fFunc;",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:5160,Modifiability,adapt,adapting,5160,"; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiRootDerivFunctionWrapperwrapper to a multi-dim function with derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:96; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapperGSLMultiRootDerivFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:100; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctionsgsl_multiroot_function_fdf * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:122; ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFuncgsl_multiroot_function_fdf fFuncDefinition GSLMultiRootFunctionWrapper.h:127; ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:112; ROOT::Math::GSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The tem...Definition GSLMultiRootFunctionAdapter.h:68; ROOT::Math::GSLMultiRootFunctionWrapperwrapper to a multi-dim function without derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:57; ROOT::Math::GSLMultiRootFunctionWrapper::fFuncgsl_multiroot_function fFuncDefinition GSLMultiRootFunctionWrapper.h:84; ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctionsgsl_multiroot_function * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:79; ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapperGSLMultiRootFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:61; ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:71; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math clas",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:2636,Testability,assert,assert,2636,"T_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 algorithm; 92 ; 93 @ingroup MultiRoot; 94*/; 95 ; 96class GSLMultiRootDerivFunctionWrapper {; 97 ; 98public:; 99 ; 100 GSLMultiRootDerivFunctionWrapper(); 101 {; 102 fFunc.f = nullptr;; 103 fFunc.df = nullptr;; 104 fFunc.fdf = nullptr;; 105 fFunc.n = 0;; 106 fFunc.params = nullptr;; 107 }; 108 ; 109 ; 110 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 111 template<class FuncVector>; 112 void SetFunctions(const FuncVector & f, unsigned int n ) {; 113 const vo",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:3543,Testability,assert,assert,3543,"gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 algorithm; 92 ; 93 @ingroup MultiRoot; 94*/; 95 ; 96class GSLMultiRootDerivFunctionWrapper {; 97 ; 98public:; 99 ; 100 GSLMultiRootDerivFunctionWrapper(); 101 {; 102 fFunc.f = nullptr;; 103 fFunc.df = nullptr;; 104 fFunc.fdf = nullptr;; 105 fFunc.n = 0;; 106 fFunc.params = nullptr;; 107 }; 108 ; 109 ; 110 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 111 template<class FuncVector>; 112 void SetFunctions(const FuncVector & f, unsigned int n ) {; 113 const void * p = &f;; 114 assert (p != nullptr);; 115 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 116 fFunc.df = &GSLMultiRootFunctionAdapter<FuncVector >::Df;; 117 fFunc.fdf = &GSLMultiRootFunctionAdapter<FuncVector >::FDf;; 118 fFunc.n = n;; 119 fFunc.params = const_cast<void *>(p);; 120 }; 121 ; 122 gsl_multiroot_function_fdf * GetFunctions() { return &fFunc; }; 123 ; 124 ; 125 private:; 126 ; 127 gsl_multiroot_function_fdf fFunc;; 128 ; 129};; 130 ; 131 ; 132 ; 133} // namespace Math; 134} // namespace ROOT; 135 ; 136#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiRootFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiRootDerivFunctionWrapperwrapper to a multi-dim function with derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:96; ",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:2114,Availability,avail,available,2114,"USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLRandom; 26//; 27// Created by: moneta at Sun Nov 21 16:26:03 2004; 28//; 29// Last update: Sun Nov 21 16:26:03 2004; 30//; 31#ifndef ROOT_Math_GSLRndmEngines; 32#define ROOT_Math_GSLRndmEngines; 33 ; 34#include <string>; 35#include <vector>; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 ; 42 class GSLRngWrapper;; 43 class GSLMCIntegrator;; 44 ; 45 //_________________________________________________________________; 46 /**; 47 GSLRandomEngine; 48 Base class for all GSL random engines,; 49 normally user instantiate the derived classes; 50 which creates internally the generator.; 51 ; 52 The main GSL generators (see; 53 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; 54 here</A>) are available as derived classes; 55 In addition to generate uniform numbers it provides method for; 56 generating numbers according to pre-defined distributions; 57 using the GSL functions from; 58 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; 59 GSL random number distributions</A>.; 60 ; 61 ; 62 ; 63 @ingroup Random; 64 */; 65 class GSLRandomEngine {; 66 ; 67 friend class GSLMCIntegrator;; 68 ; 69 public:; 70 ; 71 /**; 72 default constructor. No creation of rng is done.; 73 If then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine ",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:3935,Availability,avail,available,3935,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:3972,Availability,error,error,3972,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:4199,Availability,avail,available,4199,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:4236,Availability,error,error,4236,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:21992,Availability,avail,available,21992,"::IntRndmunsigned long IntRndm() constGenerate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than ...Definition GSLRndmEngines.h:133; ROOT::Math::GSLRandomEngine::Terminatevoid Terminate()delete pointer to contained rngDefinition GSLRndmEngines.cxx:131; ROOT::Math::GSLRandomEngine::GaussianNDvoid GaussianND(size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) constMultivariate Gaussian distribution.Definition GSLRndmEngines.cxx:241; ROOT::Math::GSLRandomEngine::Namestd::string Name() constreturn name of generatorDefinition GSLRndmEngines.cxx:191; ROOT::Math::GSLRandomEngine::GaussianRatiodouble GaussianRatio(double sigma) constGaussian distribution - Ratio method.Definition GSLRndmEngines.cxx:221; ROOT::Math::GSLRandomEngine::Logisticdouble Logistic(double a) constLogistic distribution.Definition GSLRndmEngines.cxx:336; ROOT::Math::GSLRandomEngine::RndmIntunsigned long RndmInt(unsigned long max) constGenerate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available ...Definition GSLRndmEngines.cxx:147; ROOT::Math::GSLRandomEngine::SetTypevoid SetType(GSLRngWrapper *r)internal method used by the derived class to set the type of generatorsDefinition GSLRndmEngines.h:315; ROOT::Math::GSLRandomEngine::Initializevoid Initialize()initialize the generator If no rng is present the default one based on Mersenne and Twister is create...Definition GSLRndmEngines.cxx:124; ROOT::Math::GSLRandomEngine::tDistdouble tDist(double nu) constt student distributionDefinition GSLRndmEngines.cxx:324; ROOT::Math::GSLRandomEngine::operator=GSLRandomEngine & operator=(const GSLRandomEngine &eng)Assignment operator : make a deep copy of the contained GSL generator.Definition GSLRndmEngines.cxx:113; ROOT::Math::GSLRandomEngine::Rndmdouble Rndm() constGenerate a random number between ]0,1] 0 is excluded and 1 is included.Definition GSLRndmEngines.h:120; ROOT::Math::GSLRandomEngine:",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:1442,Deployability,update,update,1442,"ndation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLRandom; 26//; 27// Created by: moneta at Sun Nov 21 16:26:03 2004; 28//; 29// Last update: Sun Nov 21 16:26:03 2004; 30//; 31#ifndef ROOT_Math_GSLRndmEngines; 32#define ROOT_Math_GSLRndmEngines; 33 ; 34#include <string>; 35#include <vector>; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 ; 42 class GSLRngWrapper;; 43 class GSLMCIntegrator;; 44 ; 45 //_________________________________________________________________; 46 /**; 47 GSLRandomEngine; 48 Base class for all GSL random engines,; 49 normally user instantiate the derived classes; 50 which creates internally the generator.; 51 ; 52 The main GSL generators (see; 53 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; 54 here</A>) are available as derived classes; 55 In addition to generate uniform numbers it provides method for; 56 generating numbers according to pre-defined distributions; 57 using the GSL functions from; 58 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; 59 GSL random number distributions</A>.; 60 ; 61 ; 62 ; 63 @ingroup Random; 64 */; 65 class GSLRandomEngine {; 66 ; 67 friend class GSLMCIntegrator;; 68 ; 69 public:; 70 ; 71 /**; 72 default c",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:3978,Integrability,message,message,3978,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:4242,Integrability,message,message,4242,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:8782,Integrability,wrap,wrapper,8782,"*/; 251 double ChiSquare(double nu) const;; 252 ; 253 /**; 254 F distribution; 255 */; 256 double FDist(double nu1, double nu2) const;; 257 ; 258 /**; 259 t student distribution; 260 */; 261 double tDist(double nu) const;; 262 ; 263 /**; 264 Rayleigh distribution; 265 */; 266 double Rayleigh(double sigma) const;; 267 ; 268 /**; 269 Logistic distribution; 270 */; 271 double Logistic(double a) const;; 272 ; 273 /**; 274 Pareto distribution; 275 */; 276 double Pareto(double a, double b) const;; 277 ; 278 /**; 279 generate random numbers in a 2D circle of radious 1; 280 */; 281 void Dir2D(double &x, double &y) const;; 282 ; 283 /**; 284 generate random numbers in a 3D sphere of radious 1; 285 */; 286 void Dir3D(double &x, double &y, double &z) const;; 287 ; 288 /**; 289 Poisson distribution; 290 */; 291 unsigned int Poisson(double mu) const;; 292 ; 293 /**; 294 Binomial distribution; 295 */; 296 unsigned int Binomial(double p, unsigned int n) const;; 297 ; 298 /**; 299 Negative Binomial distribution; 300 */; 301 unsigned int NegativeBinomial(double p, double n) const;; 302 ; 303 /**; 304 Multinomial distribution; 305 */; 306 std::vector<unsigned int> Multinomial( unsigned int ntot, const std::vector<double> & p ) const;; 307 ; 308 //@}; 309 ; 310 ; 311 ; 312 protected:; 313 ; 314 /// internal method used by the derived class to set the type of generators; 315 void SetType(GSLRngWrapper * r) {; 316 fRng = r;; 317 }; 318 ; 319 /// internal method to return the engine; 320 /// Used by class like GSLMCIntegrator to set the engine; 321 GSLRngWrapper * Engine() {; 322 return fRng;; 323 }; 324 ; 325 private:; 326 ; 327 GSLRngWrapper * fRng; // pointer to GSL generator wrapper (managed by the class); 328 mutable unsigned int fCurTime; // current time used to seed the generator; 329 ; 330 };; 331 ; 332 //_____________________________________________________________________________________; 333 /**; 334 Mersenne-Twister generator; 335 gsl_rng_mt19937 from; 336 <A HREF=""http://www.",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GSLRndmEngines_8h_source.html:27369,Integrability,wrap,wrap,27369,":Math::GSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom...Definition GSLRndmEngines.h:355; ROOT::Math::GSLRngRanLux::GSLRngRanLuxGSLRngRanLux()Definition GSLRndmEngines.cxx:403; ROOT::Math::GSLRngRanLux::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:357; ROOT::Math::GSLRngRanMarRANMAR generator see hereDefinition GSLRndmEngines.h:494; ROOT::Math::GSLRngRanMar::GSLRngRanMarGSLRngRanMar()Definition GSLRndmEngines.cxx:480; ROOT::Math::GSLRngRanMar::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:496; ROOT::Math::GSLRngRandBSD rand() generator gsl_rmg_rand from hereDefinition GSLRndmEngines.h:481; ROOT::Math::GSLRngRand::GSLRngRandGSLRngRand()Definition GSLRndmEngines.cxx:472; ROOT::Math::GSLRngRand::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:483; ROOT::Math::GSLRngTausTausworthe generator by L'Ecuyer see hereDefinition GSLRndmEngines.h:428; ROOT::Math::GSLRngTaus::GSLRngTausGSLRngTaus()Definition GSLRndmEngines.cxx:439; ROOT::Math::GSLRngTaus::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:430; ROOT::Math::GSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure.Definition GSLRngWrapper.h:25; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLRngRanLux1GSLRngRanLuxS1 GSLRngRanLux1Definition GSLRndmEngines.h:374; ROOT::Math::GSLRngRanLux2GSLRngRanLuxS2 GSLRngRanLux2Definition GSLRndmEngines.h:389; ROOT::Math::GSLRngRanLux48GSLRngRanLuxD2 GSLRngRanLux48Definition GSLRndmEngines.h:418; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoreincMathGSLRndmEngines.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
https://root.cern/doc/master/GuiTypes_8h.html:1779,Availability,mask,mask,1779," structure) More...;  ; struct  Rectangle_t;  Rectangle structure (maps to the X11 XRectangle structure) More...;  ; struct  Segment_t;  Used for drawing line segments (maps to the X11 XSegments structure) More...;  ; struct  SetWindowAttributes_t;  Attributes that can be used when creating or changing a window. More...;  ; struct  WindowAttributes_t;  Window attributes that can be inquired. More...;  . Typedefs; typedef Handle_t Atom_t;  WM token. ;  ; typedef Handle_t Colormap_t;  Colormap handle. ;  ; typedef Handle_t Cursor_t;  Cursor handle. ;  ; typedef Handle_t Display_t;  Display handle. ;  ; typedef Handle_t Drawable_t;  Drawable handle. ;  ; typedef Handle_t FontH_t;  Font handle (as opposed to Font_t which is an index) ;  ; typedef Handle_t FontStruct_t;  Pointer to font structure. ;  ; typedef Handle_t GContext_t;  Graphics context handle. ;  ; typedef ULongptr_t Handle_t;  Generic resource handle. ;  ; typedef Handle_t KeySym_t;  Key symbol handle. ;  ; typedef UInt_t Mask_t;  Structure mask type. ;  ; typedef ULong_t Pixel_t;  Pixel value. ;  ; typedef Handle_t Pixmap_t;  Pixmap handle. ;  ; typedef Handle_t Region_t;  Region handle. ;  ; typedef ULong_t Time_t;  Event time. ;  ; typedef Handle_t Visual_t;  Visual handle. ;  ; typedef Handle_t Window_t;  Window handle. ;  . Enumerations; enum  { kDefaultScrollBarWidth = 16; };  ; enum  ECursor { ;   kBottomLeft; , kBottomRight; , kTopLeft; , kTopRight; , ;   kBottomSide; , kLeftSide; , kTopSide; , kRightSide; , ;   kMove; , kCross; , kArrowHor; , kArrowVer; , ;   kHand; , kRotate; , kPointer; , kArrowRight; , ;   kCaret; , kWatch; , kNoDrop. };  ; enum  EFrameType { ;   kChildFrame = 0; , kMainFrame = (1ULL << ( 0 )); , kVerticalFrame = (1ULL << ( 1 )); , kHorizontalFrame = (1ULL << ( 2 )); , ;   kSunkenFrame = (1ULL << ( 3 )); , kRaisedFrame = (1ULL << ( 4 )); , kDoubleBorder = (1ULL << ( 5 )); , kFitWidth = (1ULL << ( 6 )); , ;   kFixedWidth = (1ULL << ( 7 )); , kFitHeight = (1ULL << ( 8 )); , kFixed",MatchSource.WIKI,doc/master/GuiTypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html
https://root.cern/doc/master/GuiTypes_8h.html:13392,Availability,mask,mask,13392,d char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window FontStruct_t. Pointer to font structure. ; Definition at line 39 of file GuiTypes.h. ◆ GContext_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GContext_t. Graphics context handle. ; Definition at line 38 of file GuiTypes.h. ◆ Handle_t. typedef ULongptr_t Handle_t. Generic resource handle. ; Definition at line 26 of file GuiTypes.h. ◆ KeySym_t. typedef Handle_t KeySym_t. Key symbol handle. ; Definition at line 36 of file GuiTypes.h. ◆ Mask_t. typedef UInt_t Mask_t. Structure mask type. ; Definition at line 41 of file GuiTypes.h. ◆ Pixel_t. typedef ULong_t Pixel_t. Pixel value. ; Definition at line 40 of file GuiTypes.h. ◆ Pixmap_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Pixmap_t. Pixmap handle. ; Definition at line 30 of file GuiTypes.h. ◆ Region_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude,MatchSource.WIKI,doc/master/GuiTypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html
https://root.cern/doc/master/GuiTypes_8h.html:256,Integrability,depend,dependency,256,". ROOT: core/gui/inc/GuiTypes.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Variables ; GuiTypes.h File Reference. #include ""Rtypes.h""; #include <climits>. Include dependency graph for GuiTypes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ColorStruct_t;  ; struct  Event_t;  Event structure. More...;  ; struct  GCValues_t;  Graphics context structure. More...;  ; struct  PictureAttributes_t;  ; struct  Point_t;  Point structure (maps to the X11 XPoint structure) More...;  ; struct  Rectangle_t;  Rectangle structure (maps to the X11 XRectangle structure) More...;  ; struct  Segment_t;  Used for drawing line segments (maps to the X11 XSegments structure) More...;  ; struct  SetWindowAttributes_t;  Attributes that can be used when creating or changing a window. More...;  ; struct  WindowAttributes_t;  Window attributes that can be inquired. More...;  . Typedefs; typedef Handle_t Atom_t;  WM token. ;  ; typedef Handle_t Colormap_t;  Colormap handle. ;  ; typedef Handle_t Cursor_t;  Cursor handle. ;  ; typedef Handle_t Display_t;  Display handle. ;  ; typedef Handle_t Drawable_t;  Drawable handle. ;  ; typedef Handle_t FontH_t;  Font handle (as opposed to Font_t which is an index) ;  ; typedef Handle_t FontStruct_t;  Pointer to font structure. ;  ; typedef Handle_t GContext_t;  Graphics context handle. ;  ; typedef ULongptr_t Handle_t;  Generic resource handle. ;  ; typedef Handle_t KeySym_t;  Key symbol handle. ;  ; typedef UInt_t Mask_t;  Structure mask type. ;  ; typedef ULong_t Pixel_t;  Pixel value. ;  ; typedef Handle_t Pixmap_t;  Pixmap handle. ;  ; typedef Handle_t Region_t;  Region handle. ;  ; typedef ULong_t Time_t;  Event time. ;  ; typedef Handle_t Visual_",MatchSource.WIKI,doc/master/GuiTypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html
https://root.cern/doc/master/gviz3d_8C.html:1151,Testability,test,test,1151,". ROOT: tutorials/gl/gviz3d.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gviz3d.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; Simple TStructViewer tutorial. ; ; #include ""TRandom.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TStructViewer.h""; ; const Int_t ncl =12;; const char *clnames[ncl] = {""TH1F"",""TGraph"",""TGraphErrors"",""TF1"",""TPaveText"",; ""TAxis"",""TF2"",""TH2D"",""TLatex"",""TText"",""TCutG"",""THnSparseF""};; ; // Function creating elements of lists; void MakeCrazy(TList *list, Int_t maxDepth, Int_t maxObjects, Float_t pList); {; Int_t nobj = gRandom->Uniform(0,maxObjects);; for (Int_t i = 0; i < nobj; i++) {; if (maxDepth && gRandom->Rndm() < pList) {; TList *slist = new TList();; slist->SetName(Form(""list_%d_%d"",maxDepth,i));; list->Add(slist);; MakeCrazy(slist,maxDepth-1,maxObjects,pList);; } else {; Int_t icl = (Int_t)gRandom->Uniform(0,ncl);; TNamed *named = (TNamed*)gROOT->ProcessLine(Form(""new %s;"",clnames[icl]));; named->SetName(Form(""%s_%d_%d"",clnames[icl],maxDepth,i));; list->Add(named);; }; }; }; ; // function creating a hierarchy of objects to test the TStructViewer; TList *crazy(Int_t maxDepth=5, Int_t maxObjects=20, Float_t pList=0.2); {; TList *list = new TList();; list->SetName(""SuperList"");; MakeCrazy(list,maxDepth,maxObjects,pList);; gROOT->GetListOfTasks()->Add(list);; return list;; }; ; // function adding colors to viewer; void FillColorsMap(TStructViewer* sv); {; for (int i = 0; i < ncl ; i++); sv->SetColor(clnames[i], (Int_t)gRandom->Integer(8)+2);; }; ; void gviz3d(); {; // Creating a pointer to list; TList* pointer = crazy(2,10);; ; // Creating a viewer; TStructViewer* sv = new TStructViewer(pointer);; ; // adding colors; FillColorsMap(sv);; ; sv->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TList.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRan",MatchSource.WIKI,doc/master/gviz3d_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gviz3d_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:11443,Availability,error,error,11443,"ax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStats *psdmd = (TPaveStats *)hdmd->GetListOfFunctions()->FindObject(""stats"");; psdmd->SetOptStat(1110);; c1->Modified();; ; //save the entry list to a Root file if one was produced; if (fillList) {; elist = dynamic_cast<TEntryList*>(fOutput->FindObject(""elist""));; if (elist) {; TFile efile(""elist.root"",""recreate"");; elist->Write();; } else {; Error(""Terminate"", ""entry list requested but not found in output"");; }; }; }; f#define f(i)Definition RSha256.hxx:104; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; gDebugInt_t gDebugDefinition TROOT.cxx:597; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TEntryList::Entervirtual bool Enter(Long64_t entry, TTree *tree=nullptr)Add entry #entry to the list.Definition TEntryList.cxx:631; TEntryList::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Add reference to directory dir. dir can be 0.Definit",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:692,Energy Efficiency,efficient,efficient,692,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:923,Integrability,interface,interface,923,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:4406,Performance,perform,performs,4406,"l pointing to the H1 data directory.; }; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33. Case B: Loop on all events; Root > chain.Draw(""h1analysisProxy.C""). Case C: Same as B, but in addition fill the event list with selected entries.; The event list is saved to a file ""elist.root"" by the Terminate function. To see the list of selected events, you can do elist->Print(""all""). The selection function has selected 7525 events out of the 283813 events in the chain of files. (2.65 per cent) Root > chain.Draw(""h1analysisProxy.C"","""",""fillList""); ; Case D: Process only entries in the event list; The event list is read from the file in elist.root generated by step C Root > chain.Draw(""h1analysisProxy.C"","""",""useList""); The commands executed with the 3 different methods B,C and D produce two canvases shown below: begin_html the Dstar plot end_html begin_html the Tau D0 plot end_html; ; TEntryList *elist;; Bool_t useList, fillList;; TH1F *hdmd;; TH2F *h2;; ; ; void h1analysisProxy_Begin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the event list; ; //print the option specified in the Process function.; TString option = GetOption();; printf(""Starting (begin) h1analysis with process option: %s\n"",option.Data());; ; //process cases with event list; fillList = kFALSE;; useList = kFALSE;; if (fChain) fChain->SetEntryList(0);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the event list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"",""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; fInput->Add(elist);; }; } else elist = 0;; ; // case when one uses the event list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; tree",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:5818,Performance,perform,performs,5818,"nt list; fillList = kFALSE;; useList = kFALSE;; if (fChain) fChain->SetEntryList(0);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the event list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"",""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; fInput->Add(elist);; }; } else elist = 0;; ; // case when one uses the event list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; tree->SetEntryList(elist);; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; } else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; }; ; ; void h1analysisProxy_SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; printf(""Starting (slave) h1analysis with process option: %s\n"",option.Data());; ; //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; //process cases with entry list; fillList = kFALSE;; useList = kFALSE;; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; }; if (elist);",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:6603,Safety,avoid,avoid,6603,"be set on the chain *before* calling Process"");; }; }; }; ; ; void h1analysisProxy_SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; printf(""Starting (slave) h1analysis with process option: %s\n"",option.Data());; ; //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; //process cases with entry list; fillList = kFALSE;; useList = kFALSE;; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; }; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; } else elist = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.864",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:383,Security,access,access,383,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:7658,Testability,test,test,7658,"st *) elist->Clone();; }; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; } else elist = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->En",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:7754,Testability,test,test,7754,"t = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/pt",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:7796,Testability,test,test,7796,"t = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/pt",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:8119,Testability,test,test,8119,"upported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; return kTRUE;; }; ; ; ; void h1analysisProxy_SlaveTerminate(); {; // nothing to be done; printf(""Terminate (slave) h1analysis\n"");; }; ; ; void h1analysisProxy_Terminate(); {; printf(""Terminate (final) h1analysis\n"");; ; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == 0 || h2 ==",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:8212,Testability,test,test,8212,"upported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; return kTRUE;; }; ; ; ; void h1analysisProxy_SlaveTerminate(); {; // nothing to be done; printf(""Terminate (slave) h1analysis\n"");; }; ; ; void h1analysisProxy_Terminate(); {; printf(""Terminate (final) h1analysis\n"");; ; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == 0 || h2 ==",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:8254,Testability,test,test,8254,"upported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; return kTRUE;; }; ; ; ; void h1analysisProxy_SlaveTerminate(); {; // nothing to be done; printf(""Terminate (slave) h1analysis\n"");; }; ; ; void h1analysisProxy_Terminate(); {; printf(""Terminate (final) h1analysis\n"");; ; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == 0 || h2 ==",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:9575,Testability,log,log-likelihood,9575,"1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; return kTRUE;; }; ; ; ; void h1analysisProxy_SlaveTerminate(); {; // nothing to be done; printf(""Terminate (slave) h1analysis\n"");; }; ; ; void h1analysisProxy_Terminate(); {; printf(""Terminate (final) h1analysis\n"");; ; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == 0 || h2 == 0) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the log-likelihood option; TF1 *f5 = new TF1(""f5"",fdm5,0.139,0.17,5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdmd->Fit(""f5"",""lr"");; ; //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStat",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8C.html:13563,Usability,simpl,simple,13563,"meters(const Double_t *params)Definition TF1.h:677; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:30",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
https://root.cern/doc/master/h1analysisProxy_8h.html:374,Integrability,depend,dependency,374,". ROOT: tutorials/tree/h1analysisProxy.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; h1analysisProxy.h File Reference. #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TCanvas.h""; #include ""TLine.h""; #include ""TEntryList.h""; #include ""TPaveStats.h""; #include ""TMath.h"". Include dependency graph for h1analysisProxy.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t fdm2 (Double_t *xx, Double_t *par);  ; Double_t fdm5 (Double_t *xx, Double_t *par);  . Variables; const Double_t dxbin = (0.17-0.13)/40;  ; const Double_t sigma = 0.0012;  . Function Documentation. ◆ fdm2(). Double_t fdm2 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 25 of file h1analysisProxy.h. ◆ fdm5(). Double_t fdm5 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 14 of file h1analysisProxy.h. Variable Documentation. ◆ dxbin. const Double_t dxbin = (0.17-0.13)/40. Definition at line 10 of file h1analysisProxy.h. ◆ sigma. const Double_t sigma = 0.0012. Definition at line 11 of file h1analysisProxy.h. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisProxy_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h.html
https://root.cern/doc/master/h1analysisProxy_8h_source.html:1770,Energy Efficiency,power,power,1770,"ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.h. Go to the documentation of this file. 1#include ""TH2.h""; 2#include ""TF1.h""; 3#include ""TStyle.h""; 4#include ""TCanvas.h""; 5#include ""TLine.h""; 6#include ""TEntryList.h""; 7#include ""TPaveStats.h""; 8#include ""TMath.h""; 9 ; 10const Double_t dxbin = (0.17-0.13)/40; // Bin-width; 11const Double_t sigma = 0.0012;; 12 ; 13//_____________________________________________________________________; 14Double_t fdm5(Double_t *xx, Double_t *par); 15{; 16 Double_t x = xx[0];; 17 if (x <= 0.13957) return 0;; 18 Double_t xp3 = (x-par[3])*(x-par[3]);; 19 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); 20 + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; 21 return res;; 22}; 23 ; 24//_____________________________________________________________________; 25Double_t fdm2(Double_t *xx, Double_t *par); 26{; 27 Double_t x = xx[0];; 28 if (x <= 0.13957) return 0;; 29 Double_t xp3 = (x-0.1454)*(x-0.1454);; 30 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); 31 + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; 32 return res;; 33}; 34 ; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TEntryList.h; TF1.h; TH2.h; TLine.h; TMath.h; TPaveStats.h; TStyle.h; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; xDouble_t x[n]Definition legend1.C:17; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisProxy_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h_source.html
https://root.cern/doc/master/h1analysisProxy_8h_source.html:1888,Energy Efficiency,power,power,1888,"ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.h. Go to the documentation of this file. 1#include ""TH2.h""; 2#include ""TF1.h""; 3#include ""TStyle.h""; 4#include ""TCanvas.h""; 5#include ""TLine.h""; 6#include ""TEntryList.h""; 7#include ""TPaveStats.h""; 8#include ""TMath.h""; 9 ; 10const Double_t dxbin = (0.17-0.13)/40; // Bin-width; 11const Double_t sigma = 0.0012;; 12 ; 13//_____________________________________________________________________; 14Double_t fdm5(Double_t *xx, Double_t *par); 15{; 16 Double_t x = xx[0];; 17 if (x <= 0.13957) return 0;; 18 Double_t xp3 = (x-par[3])*(x-par[3]);; 19 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); 20 + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; 21 return res;; 22}; 23 ; 24//_____________________________________________________________________; 25Double_t fdm2(Double_t *xx, Double_t *par); 26{; 27 Double_t x = xx[0];; 28 if (x <= 0.13957) return 0;; 29 Double_t xp3 = (x-0.1454)*(x-0.1454);; 30 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); 31 + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; 32 return res;; 33}; 34 ; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TEntryList.h; TF1.h; TH2.h; TLine.h; TMath.h; TPaveStats.h; TStyle.h; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; xDouble_t x[n]Definition legend1.C:17; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisProxy_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h_source.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:12063,Availability,error,error,12063,"shList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:12573,Availability,avail,available,12573,"amer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TTreeReaderArray::AtT & At(std::size_t idx)Definition TTreeReaderArray.h:205; TTreeReader::GetTreeTTree * GetTree() constDefinition TTreeReader.h:207; TTreeReader::SetLocalEntryEEntryStatus SetLocalEntry(Long64_t entry)Set the next local tree entry.Definition TTreeReader.h:235; TTreeA TTree represents a columnar dataset.Defin",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:17197,Energy Efficiency,power,power,17197,"TreeReader::h2TH2F * h2Definition h1analysisTreeReader.h:33; h1analysisTreeReader::fRendTTreeReaderArray< Float_t > fRendDefinition h1analysisTreeReader.h:27; h1analysisTreeReader::fEtads_dTTreeReaderValue< Float_t > fEtads_dDefinition h1analysisTreeReader.h:17; h1analysisTreeReader::hdmdTH1F * hdmdDefinition h1analysisTreeReader.h:32; h1analysisTreeReader::SlaveTerminatevoid SlaveTerminate() override; h1analysisTreeReader::fRstartTTreeReaderArray< Float_t > fRstartDefinition h1analysisTreeReader.h:26; h1analysisTreeReader::fDm_dTTreeReaderValue< Float_t > fDm_dDefinition h1analysisTreeReader.h:18; h1analysisTreeReader::fNlhkTTreeReaderArray< Float_t > fNlhkDefinition h1analysisTreeReader.h:28; h1analysisTreeReader::fPtds_dTTreeReaderValue< Float_t > fPtds_dDefinition h1analysisTreeReader.h:16; h1analysisTreeReader::Beginvoid Begin(TTree *) override; h1analysisTreeReader::Initvoid Init(TTree *myTree) overrideDefinition h1analysisTreeReader.h:67; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysisTreeReader.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorAnders Eie, 2013 ; Definition in file h1analysisTreeReader.C. tutorialstreeh1analysisTreeReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:17315,Energy Efficiency,power,power,17315,"TreeReader::h2TH2F * h2Definition h1analysisTreeReader.h:33; h1analysisTreeReader::fRendTTreeReaderArray< Float_t > fRendDefinition h1analysisTreeReader.h:27; h1analysisTreeReader::fEtads_dTTreeReaderValue< Float_t > fEtads_dDefinition h1analysisTreeReader.h:17; h1analysisTreeReader::hdmdTH1F * hdmdDefinition h1analysisTreeReader.h:32; h1analysisTreeReader::SlaveTerminatevoid SlaveTerminate() override; h1analysisTreeReader::fRstartTTreeReaderArray< Float_t > fRstartDefinition h1analysisTreeReader.h:26; h1analysisTreeReader::fDm_dTTreeReaderValue< Float_t > fDm_dDefinition h1analysisTreeReader.h:18; h1analysisTreeReader::fNlhkTTreeReaderArray< Float_t > fNlhkDefinition h1analysisTreeReader.h:28; h1analysisTreeReader::fPtds_dTTreeReaderValue< Float_t > fPtds_dDefinition h1analysisTreeReader.h:16; h1analysisTreeReader::Beginvoid Begin(TTree *) override; h1analysisTreeReader::Initvoid Init(TTree *myTree) overrideDefinition h1analysisTreeReader.h:67; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysisTreeReader.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorAnders Eie, 2013 ; Definition in file h1analysisTreeReader.C. tutorialstreeh1analysisTreeReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:12069,Integrability,message,message,12069,"shList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:12311,Integrability,message,message,12311,"void Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TTreeReaderArray::AtT & At(std::size_t idx)Definition TTreeReaderArray.h:2",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:2597,Performance,perform,performs,2597," has already been done.; if (!useList) {; // Return as soon as a bad entry is detected; if (TMath::Abs(*fMd0_d-1.8646) >= 0.04) return kFALSE;; if (*fPtds_d <= 2.5) return kFALSE;; if (TMath::Abs(*fEtads_d) >= 1.5) return kFALSE;; (*fIk)--; //original fIk used f77 convention starting at 1; (*fIpi)--;; ; ; if (fNhitrp.At(*fIk)* fNhitrp.At(*fIpi) <= 1) return kFALSE;; ; ; if (fRend.At(*fIk) -fRstart.At(*fIk) <= 22) return kFALSE;; if (fRend.At(*fIpi)-fRstart.At(*fIpi) <= 22) return kFALSE;; if (fNlhk.At(*fIk) <= 0.1) return kFALSE;; if (fNlhpi.At(*fIpi) <= 0.1) return kFALSE;; (*fIpis)--; if (fNlhpi.At(*fIpis) <= 0.1) return kFALSE;; if (*fNjets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is pr",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:3961,Performance,perform,performs,3961,"; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; void h1analysisTreeReader::SlaveBegin(TTree *myTree){; ; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Init(myTree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.Data(), myTree);; ; //create histograms; hdmd = new TH1F(""hdmd"",""Dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; // Entry list stuff (re-parse option because on PROOF only SlaveBegin is called); if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:7478,Performance,load,loading,7478,"(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStats *psdmd = (TPaveStats *)hdmd->GetListOfFunctions()->FindObject(""stats"");; psdmd->SetOptStat(1110);; c1->Modified();; ; //save the entry list to a Root file if one was produced; if (fillList) {; if (!elist); elist = dynamic_cast<TEntryList*>(fOutput->FindObject(""elist""));; if (elist) {; Printf(""Entry list 'elist' created:"");; elist->Print();; TFile efile(""elist.root"",""recreate"");; elist->Write();; } else {; Error(""Terminate"", ""entry list requested but not found in output"");; }; }; // Notify the amount of processed events; if (!fInput) Info(""Terminate"", ""processed %lld events"", fProcessed);; }; ; void h1analysisTreeReader::SlaveTerminate(){; ; }; ; Bool_t h1analysisTreeReader::Notify() {; // called when loading a new file; // get branch pointers; ; Info(""Notify"",""processing file: %s"",myTreeReader.GetTree()->GetCurrentFile()->GetName());; ; if (elist && myTreeReader.GetTree()) {; if (fillList) {; elist->SetTree(myTreeReader.GetTree());; } else if (useList) {; myTreeReader.GetTree()->SetEntryList(elist);; }; }; return kTRUE;; }; f#define f(i)Definition RSha256.hxx:104; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TCanvas.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TFile.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TLine.h; TMath.h; TPaveStats.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; Printfvoid ",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:1683,Safety,detect,detected,1683,"le_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }; ; //_____________________________________________________________________; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; //_____________________________________________________________________; Bool_t h1analysisTreeReader::Process(Long64_t entry){; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; myTreeReader.SetLocalEntry(entry);; fProcessed++;; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; // Return as soon as a bad entry is detected; if (TMath::Abs(*fMd0_d-1.8646) >= 0.04) return kFALSE;; if (*fPtds_d <= 2.5) return kFALSE;; if (TMath::Abs(*fEtads_d) >= 1.5) return kFALSE;; (*fIk)--; //original fIk used f77 convention starting at 1; (*fIpi)--;; ; ; if (fNhitrp.At(*fIk)* fNhitrp.At(*fIpi) <= 1) return kFALSE;; ; ; if (fRend.At(*fIk) -fRstart.At(*fIk) <= 22) return kFALSE;; if (fRend.At(*fIpi)-fRstart.At(*fIpi) <= 22) return kFALSE;; if (fNlhk.At(*fIk) <= 0.1) return kFALSE;; if (fNlhpi.At(*fIpi) <= 0.1) return kFALSE;; (*fIpis)--; if (fNlhpi.At(*fIpis) <= 0.1) return kFALSE;; if (*fNjets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialis",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:3233,Safety,avoid,avoid,3233,"jets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; void h1analysisTreeReader::SlaveBegin(TTree *myTree){; ; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Init(myTree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:3323,Safety,avoid,avoid,3323,"jets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; void h1analysisTreeReader::SlaveBegin(TTree *myTree){; ; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Init(myTree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:4692,Safety,avoid,avoid,4692,"f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; void h1analysisTreeReader::SlaveBegin(TTree *myTree){; ; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Init(myTree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.Data(), myTree);; ; //create histograms; hdmd = new TH1F(""hdmd"",""Dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; // Entry list stuff (re-parse option because on PROOF only SlaveBegin is called); if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList"")) useList = kTRUE;; }; ; void h1analysisTreeReader::Terminate() {; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == nullptr || h2 == nullptr) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the loglfIkelihood option; if (gROOT->GetListOfFunctions()->FindObject(""f5"")); delete gROOT->GetFunction(""f5"");; TF1 *f5 = new TF1(""f5""",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:5595,Testability,log,loglfIkelihood,5595," *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList"")) useList = kTRUE;; }; ; void h1analysisTreeReader::Terminate() {; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == nullptr || h2 == nullptr) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the loglfIkelihood option; if (gROOT->GetListOfFunctions()->FindObject(""f5"")); delete gROOT->GetFunction(""f5"");; TF1 *f5 = new TF1(""f5"",fdm5,0.139,0.17,5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdmd->Fit(""f5"",""lr"");; ; //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; if (gROOT->GetListOfFunctions()->FindObject(""f2"")); delete gROOT->GetFunction(""f2"");; TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; li",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysisTreeReader_8C.html:11122,Usability,simpl,simple,11122,"n_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:99",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
https://root.cern/doc/master/h1analysis_8C.html:17099,Availability,error,error,17099,"bjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:17609,Availability,avail,available,17609,"CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetEntryListvirtual void SetEntryList(TEntryList *list, Option_t *opt="""")Set an EntryList.Definition TTree.cxx:9046; h1analysis::b_md0_dTBranch * b_md0_dDefinition h1analysis.h:",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:648,Energy Efficiency,efficient,efficient,648,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:21968,Energy Efficiency,power,power,21968,"Branch * b_ptds_dDefinition h1analysis.h:252; h1analysis::b_ntracksTBranch * b_ntracksDefinition h1analysis.h:303; h1analysis::rstartFloat_t rstart[200]Definition h1analysis.h:161; h1analysis::b_njetsTBranch * b_njetsDefinition h1analysis.h:328; h1analysis::Beginvoid Begin(TTree *tree) override; h1analysis::ipisInt_t ipisDefinition h1analysis.h:107; h1analysis::ptd0_dFloat_t ptd0_dDefinition h1analysis.h:109; h1analysis::njetsInt_t njetsDefinition h1analysis.h:174; h1analysis::nlhkFloat_t nlhk[200]Definition h1analysis.h:165; h1analysis::elistTEntryList * elistDefinition h1analysis.h:32; h1analysis::SlaveBeginvoid SlaveBegin(TTree *tree) override; h1analysis::etads_dFloat_t etads_dDefinition h1analysis.h:99; h1analysis::h2TH2F * h2Definition h1analysis.h:28; h1analysis::b_ptd0_dTBranch * b_ptd0_dDefinition h1analysis.h:263; h1analysis::ptds_dFloat_t ptds_dDefinition h1analysis.h:98; h1analysis::Terminatevoid Terminate() override; h1analysis::ipiInt_t ipiDefinition h1analysis.h:106; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysis.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorRene Brun ; Definition in file h1analysis.C. tutorialstreeh1analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:22086,Energy Efficiency,power,power,22086,"Branch * b_ptds_dDefinition h1analysis.h:252; h1analysis::b_ntracksTBranch * b_ntracksDefinition h1analysis.h:303; h1analysis::rstartFloat_t rstart[200]Definition h1analysis.h:161; h1analysis::b_njetsTBranch * b_njetsDefinition h1analysis.h:328; h1analysis::Beginvoid Begin(TTree *tree) override; h1analysis::ipisInt_t ipisDefinition h1analysis.h:107; h1analysis::ptd0_dFloat_t ptd0_dDefinition h1analysis.h:109; h1analysis::njetsInt_t njetsDefinition h1analysis.h:174; h1analysis::nlhkFloat_t nlhk[200]Definition h1analysis.h:165; h1analysis::elistTEntryList * elistDefinition h1analysis.h:32; h1analysis::SlaveBeginvoid SlaveBegin(TTree *tree) override; h1analysis::etads_dFloat_t etads_dDefinition h1analysis.h:99; h1analysis::h2TH2F * h2Definition h1analysis.h:28; h1analysis::b_ptd0_dTBranch * b_ptd0_dDefinition h1analysis.h:263; h1analysis::ptds_dFloat_t ptds_dDefinition h1analysis.h:98; h1analysis::Terminatevoid Terminate() override; h1analysis::ipiInt_t ipiDefinition h1analysis.h:106; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysis.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorRene Brun ; Definition in file h1analysis.C. tutorialstreeh1analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:879,Integrability,interface,interface,879,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:17105,Integrability,message,message,17105,"bjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:17347,Integrability,message,message,17347,"name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:159",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:6467,Performance,perform,performs,6467," works also for local processing.; ; #include ""h1analysis.h""; #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TBranch.h""; #include ""TCanvas.h""; #include ""TPaveStats.h""; #include ""TLine.h""; #include ""TMath.h""; ; const Double_t dxbin = (0.17-0.13)/40; // Bin-width; const Double_t sigma = 0.0012;; ; ; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }; ; ; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:7947,Performance,perform,performs,7947," one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.Data(), tree);; ; //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; // Entry list stuff (re-parse option because on PROOF only SlaveBegin is called); if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Conta",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:7229,Safety,avoid,avoid,7229,"par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process opt",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:7319,Safety,avoid,avoid,7319,"par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process opt",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:8714,Safety,avoid,avoid,8714,") elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process option: %s (tree: %p)"", option.Data(), tree);; ; //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; // Entry list stuff (re-parse option because on PROOF only SlaveBegin is called); if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList"")) useList = kTRUE;; }; ; ; Bool_t h1analysis::Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; fProcessed++;; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; // Read only the necessary branches to select entries.; // return as soon as a bad entry is detected; // to read complete event, call fChain->GetTree()->GetEntry(entry); b_md0_d->GetEntry(entry); if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; b_ptds_d->GetEntry(entry); if (ptds_d <= 2.5) return kFALSE;; b_etads_d->GetEntry(entry); if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; b_ik->GetEntry(entry); ik--; //original ik used f77 convention starting at 1; b_ipi->GetEntry(entry); ipi--;; b_ntracks-",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:9332,Safety,detect,detected,9332,"""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; // Entry list stuff (re-parse option because on PROOF only SlaveBegin is called); if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList"")) useList = kTRUE;; }; ; ; Bool_t h1analysis::Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; fProcessed++;; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; // Read only the necessary branches to select entries.; // return as soon as a bad entry is detected; // to read complete event, call fChain->GetTree()->GetEntry(entry); b_md0_d->GetEntry(entry); if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; b_ptds_d->GetEntry(entry); if (ptds_d <= 2.5) return kFALSE;; b_etads_d->GetEntry(entry); if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; b_ik->GetEntry(entry); ik--; //original ik used f77 convention starting at 1; b_ipi->GetEntry(entry); ipi--;; b_ntracks->GetEntry(entry);; b_nhitrp->GetEntry(entry);; if (nhitrp[ik]*nhitrp[ipi] <= 1) return kFALSE;; b_rend->GetEntry(entry);; b_rstart->GetEntry(entry);; if (rend[ik] -rstart[ik] <= 22) return kFALSE;; if (rend[ipi]-rstart[ipi] <= 22) return kFALSE;; b_nlhk->GetEntry(entry); if (nlhk[ik] <= 0.1) return kFALSE;; b_nlhpi->GetEntry(entry); if (nlhpi[ipi] <= 0.1) return kFALSE;; b_ipis->GetEntry(entry); ipis--; if (nlhpi[ipis] <= 0.1) return kFALSE;; b_njets->GetEntry(entry); if (njets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; // to read complete event, call fChain->",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:339,Security,access,access,339,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:4525,Testability,log,loglevel,4525,"n has selected 7525 events out of the 283813 events in the chain of files. (2.65 per cent); Root > chain.Process(""h1analysis.C"",""fillList""). Case D: Process only entries in the entry list; The entry list is read from the file in elist.root generated by step C; Root > chain.Process(""h1analysis.C"",""useList""). Case E: The above steps have been executed via the interpreter.; You can repeat the steps B, C and D using the script compiler by replacing ""h1analysis.C"" by ""h1analysis.C+"" or ""h1analysis.C++"" in a new session (see F). Case F: Create the chain as in A, then execute; Root > chain.Process(""h1analysis.C+"",""useList""); The same analysis can be run on PROOF. For a quick try start a PROOF-Lite session; Root > TProof *p = TProof::Open(""""); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TProofThis class controls a Parallel ROOT Facility, PROOF, cluster.Definition TProof.h:316; TProof::Openstatic TProof * Open(const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0)Start a PROOF session on a specific cluster.Definition TProof.cxx:11583; create (if not already done) the chain by executing the 'h1chain.C' macro mentioned above, and then tell ROOT to use PROOF to process the chain:; Root > chain.SetProof(); You can then repeat step B above. Step C can also be executed in PROOF. However, step D cannot be executed in PROOF as in the local session (i.e. just passing option 'useList'): to use the entry list you have to. Case G: Load first in the session the list form the file; Root > TFile f(""elist.root""); Root > TEntryList *elist = (TEntryList *) f.Get(""elist""); f#define f(i)Definition RSha256.hxx:104; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; set it on the chain:; Root > chain.SetEntryList(elist); call Process as in step B. Of course this work",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:11485,Testability,log,log-likelihood,11485,"y); //read branch holding rpd0_t; b_ptd0_d->GetEntry(entry); //read branch holding ptd0_d; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; // Count the number of selected events; fStatus++;; ; return kTRUE;; }; ; ; ; void h1analysis::SlaveTerminate(); {; // nothing to be done; }; ; ; void h1analysis::Terminate(); {; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == nullptr || h2 == nullptr) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the log-likelihood option; if (gROOT->GetListOfFunctions()->FindObject(""f5"")); delete gROOT->GetFunction(""f5"");; TF1 *f5 = new TF1(""f5"",fdm5,0.139,0.17,5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdmd->Fit(""f5"",""lr"");; ; //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; if (gROOT->GetListOfFunctions()->FindObject(""f2"")); delete gROOT->GetFunction(""f2"");; TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; li",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1analysis_8C.html:16257,Usability,simpl,simple,16257,"n_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definitio",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
https://root.cern/doc/master/h1chain_8C.html:331,Deployability,install,installed,331,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1chain_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1chain_8C.html
https://root.cern/doc/master/h1chain_8C.html:860,Modifiability,variab,variable,860,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1chain_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1chain_8C.html
https://root.cern/doc/master/h1ReadAndDraw_8C.html:2178,Availability,error,errors,2178," *pad2 = new TPad(""pad2"",; ""The pad with the histogram"",0.51,0.62,0.98,0.92);; TPad *pad3 = new TPad(""pad3"",; ""The pad with the histogram"",0.03,0.02,0.97,0.57);; pad1->Draw();; pad2->Draw();; pad3->Draw();; ; // Draw a global picture title; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,; ""Drawing options for one dimensional histograms"");; title->SetTextFont(52);; title->Draw();; ; // Draw histogram hpx in first pad with the default option.; pad1->cd();; pad1->GetFrame()->SetFillColor(18);; hpx->SetFillColor(45);; hpx->DrawCopy();; TPaveLabel *label1 = new TPaveLabel(-3.5,700,-1,800,""Default option"");; label1->Draw();; ; // Draw hpx as a lego. Clicking on the lego area will show; // a ""transparent cube"" to guide you rotating the lego in real time.; pad2->cd();; hpx->DrawCopy(""lego1"");; TPaveLabel *label2 = new TPaveLabel(-0.72,0.74,-0.22,0.88,""option Lego1"");; label2->Draw();; TPaveLabel *label2a = new TPaveLabel(-0.93,-1.08,0.25,-0.92,; ""Click on lego to rotate"");; label2a->Draw();; ; // Draw hpx with its errors and a marker.; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; hpx->SetMarkerStyle(21);; hpx->Draw(""e1p"");; TPaveLabel *label3 = new TPaveLabel(2,600,3.5,650,""option e1p"");; label3->Draw();; ; // The following illustrates how to add comments using a PaveText.; // Attributes of text/lines/boxes added to a PaveText can be modified.; // The AddText function returns a pointer to the added object.; TPaveText *pave = new TPaveText(-3.78,500,-1.2,750);; TText *t1=pave->AddText(""You can move"");; t1->SetTextColor(4);; t1->SetTextSize(0.05);; pave->AddText(""Title and Stats pads"");; pave->AddText(""X and Y axis"");; pave->AddText(""You can modify bin contents"");; pave->Draw();; c1->Update();; }; TCanvas.h; TFile.h; TFrame.h; TH2.h; TInterpreter.h; TNtuple.h; TPaveLabel.h; TPaveText.h; gROOT#define gROOTDefinition TROOT.h:406; TSystem.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::Set",MatchSource.WIKI,doc/master/h1ReadAndDraw_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html
https://root.cern/doc/master/h1ReadAndDraw_8C.html:1872,Usability,guid,guide,1872,"e histogram from the ROOT File; TH1 *hpx = nullptr; // pointer to base class TH1 is enough; example->GetObject(""hpx"", hpx);; ; TCanvas *c1 = new TCanvas(""c1"",""Histogram Drawing Options"",200,10,700,900);; TPad *pad1 = new TPad(""pad1"",; ""The pad with the function"",0.03,0.62,0.50,0.92);; TPad *pad2 = new TPad(""pad2"",; ""The pad with the histogram"",0.51,0.62,0.98,0.92);; TPad *pad3 = new TPad(""pad3"",; ""The pad with the histogram"",0.03,0.02,0.97,0.57);; pad1->Draw();; pad2->Draw();; pad3->Draw();; ; // Draw a global picture title; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,; ""Drawing options for one dimensional histograms"");; title->SetTextFont(52);; title->Draw();; ; // Draw histogram hpx in first pad with the default option.; pad1->cd();; pad1->GetFrame()->SetFillColor(18);; hpx->SetFillColor(45);; hpx->DrawCopy();; TPaveLabel *label1 = new TPaveLabel(-3.5,700,-1,800,""Default option"");; label1->Draw();; ; // Draw hpx as a lego. Clicking on the lego area will show; // a ""transparent cube"" to guide you rotating the lego in real time.; pad2->cd();; hpx->DrawCopy(""lego1"");; TPaveLabel *label2 = new TPaveLabel(-0.72,0.74,-0.22,0.88,""option Lego1"");; label2->Draw();; TPaveLabel *label2a = new TPaveLabel(-0.93,-1.08,0.25,-0.92,; ""Click on lego to rotate"");; label2a->Draw();; ; // Draw hpx with its errors and a marker.; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; hpx->SetMarkerStyle(21);; hpx->Draw(""e1p"");; TPaveLabel *label3 = new TPaveLabel(2,600,3.5,650,""option e1p"");; label3->Draw();; ; // The following illustrates how to add comments using a PaveText.; // Attributes of text/lines/boxes added to a PaveText can be modified.; // The AddText function returns a pointer to the added object.; TPaveText *pave = new TPaveText(-3.78,500,-1.2,750);; TText *t1=pave->AddText(""You can move"");; t1->SetTextColor(4);; t1->SetTextSize(0.05);; pave->AddText(""Title and Stats pads"");; pave->AddText(""X and Y axis"");; pave->AddText(""You can modify bin contents"");; pave->Draw();;",MatchSource.WIKI,doc/master/h1ReadAndDraw_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html
https://root.cern/doc/master/h1ReadAndDraw_8py.html:1863,Availability,error,errors,1863,")) :; ROOT.Info(""h1ReadAndDraw.py"", File+"" does not exist""); exit(); ; example = TFile(File); example.ls(); ; # Draw a global picture title; title = TPaveLabel( 0.1, 0.94, 0.9, 0.98,; 'Drawing options for one dimensional histograms' ); title.SetFillColor( 16 ); title.SetTextFont( 52 ); title.Draw(); #; # Draw histogram hpx in first pad with the default option.; pad1.cd(); pad1.GetFrame().SetFillColor( 18 ); hpx = gROOT.FindObject( 'hpx' ); hpx.SetFillColor( 45 ); hpx.DrawCopy(); label1 = TPaveLabel( -3.5, 700, -1, 800, 'Default option' ); label1.SetFillColor( 42 ); label1.Draw(); #; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.; pad2.cd(); hpx.DrawCopy( 'lego1' ); label2 = TPaveLabel( -0.72, 0.74, -0.22, 0.88, 'option Lego1' ); label2.SetFillColor( 42 ); label2.Draw(); label2a = TPaveLabel( -0.93, -1.08, 0.25, -0.92, 'Click on lego to rotate' ); label2a.SetFillColor( 42 ); label2a.Draw(); #; # Draw hpx with its errors and a marker.; pad3.cd(); pad3.SetGridx(); pad3.SetGridy(); pad3.GetFrame().SetFillColor( 18 ); hpx.SetMarkerStyle( 21 ); hpx.Draw( 'e1p' ); label3 = TPaveLabel( 2, 600, 3.5, 650, 'option e1p' ); label3.SetFillColor( 42 ); label3.Draw(); #; # The following illustrates how to add comments using a PaveText.; # Attributes of text/lines/boxes added to a PaveText can be modified.; # The AddText function returns a pointer to the added object.; pave = TPaveText( -3.78, 500, -1.2, 750 ); pave.SetFillColor( 42 ); t1 = pave.AddText( 'You can move' ); t1.SetTextColor( 4 ); t1.SetTextSize( 0.05 ); pave.AddText( 'Title and Stats pads' ); pave.AddText( 'X and Y axis' ); pave.AddText( 'You can modify bin contents' ); pave.Draw(); c1.Update(); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition",MatchSource.WIKI,doc/master/h1ReadAndDraw_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8py.html
https://root.cern/doc/master/h1ReadAndDraw_8py.html:1532,Usability,guid,guide,1532," 21 ); pad2 = TPad( 'pad2', 'The pad with the histogram', 0.51, 0.62, 0.98, 0.92, 21 ); pad3 = TPad( 'pad3', 'The pad with the histogram', 0.03, 0.02, 0.97, 0.57, 21 ); pad1.Draw(); pad2.Draw(); pad3.Draw(); #; # We connect the ROOT file generated in a previous tutorial; #; File = ""py-hsimple.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""h1ReadAndDraw.py"", File+"" does not exist""); exit(); ; example = TFile(File); example.ls(); ; # Draw a global picture title; title = TPaveLabel( 0.1, 0.94, 0.9, 0.98,; 'Drawing options for one dimensional histograms' ); title.SetFillColor( 16 ); title.SetTextFont( 52 ); title.Draw(); #; # Draw histogram hpx in first pad with the default option.; pad1.cd(); pad1.GetFrame().SetFillColor( 18 ); hpx = gROOT.FindObject( 'hpx' ); hpx.SetFillColor( 45 ); hpx.DrawCopy(); label1 = TPaveLabel( -3.5, 700, -1, 800, 'Default option' ); label1.SetFillColor( 42 ); label1.Draw(); #; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.; pad2.cd(); hpx.DrawCopy( 'lego1' ); label2 = TPaveLabel( -0.72, 0.74, -0.22, 0.88, 'option Lego1' ); label2.SetFillColor( 42 ); label2.Draw(); label2a = TPaveLabel( -0.93, -1.08, 0.25, -0.92, 'Click on lego to rotate' ); label2a.SetFillColor( 42 ); label2a.Draw(); #; # Draw hpx with its errors and a marker.; pad3.cd(); pad3.SetGridx(); pad3.SetGridy(); pad3.GetFrame().SetFillColor( 18 ); hpx.SetMarkerStyle( 21 ); hpx.Draw( 'e1p' ); label3 = TPaveLabel( 2, 600, 3.5, 650, 'option e1p' ); label3.SetFillColor( 42 ); label3.Draw(); #; # The following illustrates how to add comments using a PaveText.; # Attributes of text/lines/boxes added to a PaveText can be modified.; # The AddText function returns a pointer to the added object.; pave = TPaveText( -3.78, 500, -1.2, 750 ); pave.SetFillColor( 42 ); t1 = pave.AddText( 'You can move' ); t1.SetTextColor( 4 ); t1.SetTextSize( 0.05 ); pave.AddText( 'Title and Stats pads' ); pave.AddText( 'X a",MatchSource.WIKI,doc/master/h1ReadAndDraw_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8py.html
https://root.cern/doc/master/h2proj_8C.html:358,Performance,perform,performed,358,". ROOT: tutorials/hist/h2proj.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h2proj.C File ReferenceTutorials » Histograms tutorials. Detailed Description; This example demonstrates how to display a histogram and its two projections. ; A TExec allows to redraw automatically the projections when a zoom is performed on the 2D histogram. ; TH2F *h2;; TH1D * projh2X;; TH1D * projh2Y;; TPad *right_pad, *top_pad;; ; void h2proj(); {; auto c1 = new TCanvas(""c1"", ""c1"",900,900);; gStyle->SetOptStat(0);; ; TPad *center_pad = new TPad(""center_pad"", ""center_pad"",0.0,0.0,0.6,0.6);; center_pad->Draw();; ; right_pad = new TPad(""right_pad"", ""right_pad"",0.55,0.0,1.0,0.6);; right_pad->Draw();; ; top_pad = new TPad(""top_pad"", ""top_pad"",0.0,0.55,0.6,1.0);; top_pad->Draw();; ; h2 = new TH2F(""h2"","""",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2->Fill(px,5*py);; }; projh2X = h2->ProjectionX();; projh2Y = h2->ProjectionY();; ; center_pad->cd();; gStyle->SetPalette(1);; h2->Draw(""COL"");; ; top_pad->cd();; projh2X->SetFillColor(kBlue+1);; projh2X->Draw(""bar"");; ; right_pad->cd();; projh2Y->SetFillColor(kBlue-2);; projh2Y->Draw(""hbar"");; ; c1->cd();; TLatex t;; t.SetTextFont(42);; t.SetTextSize(0.02);; t.DrawLatex(0.6,0.88,""This example demonstrates how to display"");; t.DrawLatex(0.6,0.85,""a histogram and its two projections."");; ; auto ex = new TExec(""zoom"",""ZoomExec()"");; h2->GetListOfFunctions()->Add(ex);; }; ; void ZoomExec(); {; int xfirst = h2->GetXaxis()->GetFirst();; int xlast = h2->GetXaxis()->GetLast();; double xmin = h2->GetXaxis()->GetBinLowEdge(xfirst);; double xmax = h2->GetXaxis()->GetBinUpEdge(xlast);; projh2X->GetXaxis()->SetRangeUser(xmin, xmax);; top_pad->Modified();; ; int yfirst = h2->GetYaxis()->GetFirst();; int ylast = h2->GetYaxis()->GetLast();; double ymin = h2->GetYaxis()->GetBinLowEdge(yfirst);; double ymax = h2->GetYaxis()->GetBinUpEdge(ylast);; projh2Y->GetX",MatchSource.WIKI,doc/master/h2proj_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h2proj_8C.html
https://root.cern/doc/master/Haxis_8cxx_source.html:7585,Performance,scalab,scalable,7585,"n);; 211 SetMaximum(xmax);; 212 return;; 213 }; 214 Int_t bin1 = theAxis->FindFixBin(xmin);; 215 Int_t bin2 = theAxis->FindFixBin(xmax);; 216 theAxis->SetRange(bin1, bin2);; 217}; 218 ; 219 ; 220////////////////////////////////////////////////////////////////////////////////; 221/// Set axis labels color.; 222///; 223/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 224/// if axis=""xyz"" set all 3 axes; 225 ; 226void TH1::SetLabelColor(Color_t color, Option_t *axis); 227{; 228 TString opt = axis;; 229 opt.ToLower();; 230 ; 231 if (opt.Contains(""x"")) fXaxis.SetLabelColor(color);; 232 if (opt.Contains(""y"")) fYaxis.SetLabelColor(color);; 233 if (opt.Contains(""z"")) fZaxis.SetLabelColor(color);; 234}; 235 ; 236 ; 237////////////////////////////////////////////////////////////////////////////////; 238/// Set font number used to draw axis labels.; 239///; 240/// font : Text font code = 10*fontnumber + precision; 241/// Font numbers must be between 1 and 14; 242/// precision = 1 fast hardware fonts (steps in the size); 243/// precision = 2 scalable and rotatable hardware fonts; 244///; 245/// The default font number is 62.; 246/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 247/// if axis=""xyz"" set all 3 axes; 248 ; 249void TH1::SetLabelFont(Style_t font, Option_t *axis); 250{; 251 TString opt = axis;; 252 opt.ToLower();; 253 ; 254 if (opt.Contains(""x"")) fXaxis.SetLabelFont(font);; 255 if (opt.Contains(""y"")) fYaxis.SetLabelFont(font);; 256 if (opt.Contains(""z"")) fZaxis.SetLabelFont(font);; 257}; 258 ; 259 ; 260////////////////////////////////////////////////////////////////////////////////; 261/// Set offset between axis and axis' labels.; 262///; 263/// The offset is expressed as a percent of the pad height.; 264/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 265/// if axis=""xyz"" set all 3 axes; 266 ; 267void TH1::SetLabelOffset(Float_t offset, Option_t *axis); 268{; 269 TString opt = axis;; 270 opt.ToLower();; 271 ; 272 if (opt.Contains(""x""",MatchSource.WIKI,doc/master/Haxis_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Haxis_8cxx_source.html
https://root.cern/doc/master/hbars_8C.html:2231,Availability,error,error,2231,");; gPad->SetGrid();; gPad->SetLogx();; gPad->SetFrameFillColor(33);; T->Draw(""Nation"","""",""hbar2"");; ; // Vertical bar chart; c1->cd(2);; gPad->SetGrid();; gPad->SetFrameFillColor(33);; T->Draw(""Division>>hDiv"","""",""goff"");; TH1F *hDiv = (TH1F*)gDirectory->Get(""hDiv"");; hDiv->SetStats(0);; TH1F *hDivFR = (TH1F*)hDiv->Clone(""hDivFR"");; T->Draw(""Division>>hDivFR"",""Nation==\""FR\"""",""goff"");; hDiv->SetBarWidth(0.45);; hDiv->SetBarOffset(0.1);; hDiv->SetFillColor(49);; TH1 *h1 = hDiv->DrawCopy(""bar2"");; hDivFR->SetBarWidth(0.4);; hDivFR->SetBarOffset(0.55);; hDivFR->SetFillColor(50);; TH1 *h2 = hDivFR->DrawCopy(""bar2,same"");; ; TLegend *legend = new TLegend(0.55,0.65,0.76,0.82);; legend->AddEntry(h1,""All nations"",""f"");; legend->AddEntry(h2,""French only"",""f"");; legend->Draw();; ; c1->cd();; delete f;; return c1;; }; f#define f(i)Definition RSha256.hxx:104; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill ",MatchSource.WIKI,doc/master/hbars_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hbars_8C.html
https://root.cern/doc/master/hbars_8C.html:5136,Security,access,access,5136,"le.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::DrawCopyvirtual TH1 * DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorRene Brun ; Definition in file hbars.C. tutorialshisthbars.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hbars_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hbars_8C.html
https://root.cern/doc/master/hbars_8C.html:5170,Security,access,access,5170,"le.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::DrawCopyvirtual TH1 * DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorRene Brun ; Definition in file hbars.C. tutorialshisthbars.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hbars_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hbars_8C.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6211,Availability,error,errors,6211,"ntegral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,r",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6403,Availability,error,errors,6403,"r = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6502,Availability,error,errors,6502,"on.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdat",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6729,Availability,error,errors,6729,"fr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n""",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6850,Availability,error,errors,6850,"w ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n"",fitdata->Size());; 216 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 217 if (fitdata->NDim() == 1) printf("" x[%d] =",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:8020,Availability,error,errors,8020,"chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n"",fitdata->Size());; 216 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 217 if (fitdata->NDim() == 1) printf("" x[%d] = %f - value = %f \n"", i,*(fitdata->Coords(i)),fitdata->Value(i) );; 218 }; 219#endif; 220 ; 221 // switch off linear fitting in case data has coordinate errors and the option is set; 222 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kCoordError && fitdata->Opt().fCoordErrors ) linear = false;; 223 // linear fit cannot be done also in case of asymmetric errors; 224 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kAsymError && fitdata->Opt().fAsymErrors ) linear = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:8227,Availability,error,errors,8227,"def DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n"",fitdata->Size());; 216 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 217 if (fitdata->NDim() == 1) printf("" x[%d] = %f - value = %f \n"", i,*(fitdata->Coords(i)),fitdata->Value(i) );; 218 }; 219#endif; 220 ; 221 // switch off linear fitting in case data has coordinate errors and the option is set; 222 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kCoordError && fitdata->Opt().fCoordErrors ) linear = false;; 223 // linear fit cannot be done also in case of asymmetric errors; 224 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kAsymError && fitdata->Opt().fAsymErrors ) linear = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:9492,Availability,error,error,9492,"r = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:9528,Availability,error,error,9528,"r = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:9651,Availability,error,error,9651,"OT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // check limits; 266 double plow,pup;; 267 f1->GetParLimits(i,plow,pup);; 268 if (plow*pup != 0 && plow >= pup) { // this is a limitation - cannot fix a parameter to zero value; 269 parSettings.Fix();; 270 }; 271 else if (plow < pup ) {; 272 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 273 parSettings.SetLowerLimit(plow);; 274 else if (!TMa",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:9800,Availability,error,errors,9800,"33 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // check limits; 266 double plow,pup;; 267 f1->GetParLimits(i,plow,pup);; 268 if (plow*pup != 0 && plow >= pup) { // this is a limitation - cannot fix a parameter to zero value; 269 parSettings.Fix();; 270 }; 271 else if (plow < pup ) {; 272 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 273 parSettings.SetLowerLimit(plow);; 274 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 275 parSettings.SetUpperLimit(pup);; 276 else; 277 parSettings.SetLimits(plow,pup);; 278 }; 279 ; 280 // set the param",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:10032,Availability,error,error,10032," option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // check limits; 266 double plow,pup;; 267 f1->GetParLimits(i,plow,pup);; 268 if (plow*pup != 0 && plow >= pup) { // this is a limitation - cannot fix a parameter to zero value; 269 parSettings.Fix();; 270 }; 271 else if (plow < pup ) {; 272 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 273 parSettings.SetLowerLimit(plow);; 274 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 275 parSettings.SetUpperLimit(pup);; 276 else; 277 parSettings.SetLimits(plow,pup);; 278 }; 279 ; 280 // set the parameter step size (by default are set to 0.3 of value); 281 // if function provides meaningful error values; 282 double err = f1->GetParError(i);;",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:10934,Availability,error,error,10934,"56 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // check limits; 266 double plow,pup;; 267 f1->GetParLimits(i,plow,pup);; 268 if (plow*pup != 0 && plow >= pup) { // this is a limitation - cannot fix a parameter to zero value; 269 parSettings.Fix();; 270 }; 271 else if (plow < pup ) {; 272 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 273 parSettings.SetLowerLimit(plow);; 274 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 275 parSettings.SetUpperLimit(pup);; 276 else; 277 parSettings.SetLimits(plow,pup);; 278 }; 279 ; 280 // set the parameter step size (by default are set to 0.3 of value); 281 // if function provides meaningful error values; 282 double err = f1->GetParError(i);; 283 if ( err > 0); 284 parSettings.SetStepSize(err);; 285 else if (plow < pup && TMath::Finite(plow) && TMath::Finite(pup) ) { // in case of limits improve step sizes; 286 double step = 0.1 * (pup - plow);; 287 // check if value is not too close to limit otherwise trim value; 288 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 289 step = (pup - parSettings.Value() ) / 2;; 290 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 291 step = (parSettings.Value() - plow ) / 2;; 292 ; 293 parSettings.SetStepSize(step);; 294 }; 295 ; 296 ; 297 }; 298 ; 299 // needed for setting precision ?; 300 // - Compute sum of squares of errors in the bin range; 301 // should maybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fi",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:11667,Availability,error,errors,11667,"etUpperLimit(pup);; 276 else; 277 parSettings.SetLimits(plow,pup);; 278 }; 279 ; 280 // set the parameter step size (by default are set to 0.3 of value); 281 // if function provides meaningful error values; 282 double err = f1->GetParError(i);; 283 if ( err > 0); 284 parSettings.SetStepSize(err);; 285 else if (plow < pup && TMath::Finite(plow) && TMath::Finite(pup) ) { // in case of limits improve step sizes; 286 double step = 0.1 * (pup - plow);; 287 // check if value is not too close to limit otherwise trim value; 288 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 289 step = (pup - parSettings.Value() ) / 2;; 290 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 291 step = (parSettings.Value() - plow ) / 2;; 292 ; 293 parSettings.SetStepSize(step);; 294 }; 295 ; 296 ; 297 }; 298 ; 299 // needed for setting precision ?; 300 // - Compute sum of squares of errors in the bin range; 301 // should maybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 f",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:11911,Availability,toler,tolerance,11911,"etUpperLimit(pup);; 276 else; 277 parSettings.SetLimits(plow,pup);; 278 }; 279 ; 280 // set the parameter step size (by default are set to 0.3 of value); 281 // if function provides meaningful error values; 282 double err = f1->GetParError(i);; 283 if ( err > 0); 284 parSettings.SetStepSize(err);; 285 else if (plow < pup && TMath::Finite(plow) && TMath::Finite(pup) ) { // in case of limits improve step sizes; 286 double step = 0.1 * (pup - plow);; 287 // check if value is not too close to limit otherwise trim value; 288 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 289 step = (pup - parSettings.Value() ) / 2;; 290 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 291 step = (parSettings.Value() - plow ) / 2;; 292 ; 293 parSettings.SetStepSize(step);; 294 }; 295 ; 296 ; 297 }; 298 ; 299 // needed for setting precision ?; 300 // - Compute sum of squares of errors in the bin range; 301 // should maybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 f",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:12304,Availability,robust,robust,12304,"Settings.Value() ) / 2;; 290 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 291 step = (parSettings.Value() - plow ) / 2;; 292 ; 293 parSettings.SetStepSize(step);; 294 }; 295 ; 296 ; 297 }; 298 ; 299 // needed for setting precision ?; 300 // - Compute sum of squares of errors in the bin range; 301 // should maybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 fitConfig.SetMinimizer(""Linear"","""");; 329 }; 330 else {; 331 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 332 }; 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use optio",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:12680,Availability,toler,tolerance,12680,"aybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 fitConfig.SetMinimizer(""Linear"","""");; 329 }; 330 else {; 331 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 332 }; 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:12702,Availability,robust,robust,12702,"aybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 fitConfig.SetMinimizer(""Linear"","""");; 329 }; 330 else {; 331 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 332 }; 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:13911,Availability,error,errors,13911," 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPo",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:27224,Availability,error,errors,27224,"placeAll(""MULTIPROC"","""");; 716 // }; 717 ; 718 if (opt.Contains(""SERIAL"")) {; 719 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kSequential;; 720 opt.ReplaceAll(""SERIAL"","""");; 721 }; 722 ; 723 if (opt.Contains(""MULTITHREAD"")) {; 724 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 725 opt.ReplaceAll(""MULTITHREAD"","""");; 726 }; 727 ; 728 if (opt.Contains(""I"")) fitOption.Integral= 1; // integral of function in the bin (no sense for graph); 729 if (opt.Contains(""W"")) fitOption.W1 = 1; // all non-empty bins or points have weight =1 (for chi2 fit); 730 if (opt.Contains(""WW"")) fitOption.W1 = 2; //all bins have weight=1, even empty bins; 731 if (opt.Contains(""L"")) fitOption.Like = 1;; 732 if (opt.Contains(""X"")) fitOption.Chi2 = 1;; 733 if (opt.Contains(""P"")) {; 734 fitOption.PChi2 = 1;; 735 if (fitOption.W1) { // option contains also w is a weighted Pearson chi2 fit; 736 fitOption.PChi2 = 2;; 737 fitOption.W1 = 0; // does not make sense to have errors=1 in Pearson chi2 fits; 738 }; 739 }; 740 ; 741 // specific likelihood fit options; 742 if (fitOption.Like == 1) {; 743 //if (opt.Contains(""LL"")) fitOption.Like = 2;; 744 if (opt.Contains(""W"")){ fitOption.Like = 2; fitOption.W1=0;}// (weighted likelihood); 745 if (opt.Contains(""MULTI"")) {; 746 if (fitOption.Like == 2) fitOption.Like = 6; // weighted multinomial; 747 else fitOption.Like = 4; // multinomial likelihood fit instead of Poisson; 748 opt.ReplaceAll(""MULTI"","""");; 749 }; 750 // give precedence for likelihood options; 751 if (fitOption.Chi2 || fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.C",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:28130,Availability,robust,robust,28130,"7 fitOption.W1 = 0; // does not make sense to have errors=1 in Pearson chi2 fits; 738 }; 739 }; 740 ; 741 // specific likelihood fit options; 742 if (fitOption.Like == 1) {; 743 //if (opt.Contains(""LL"")) fitOption.Like = 2;; 744 if (opt.Contains(""W"")){ fitOption.Like = 2; fitOption.W1=0;}// (weighted likelihood); 745 if (opt.Contains(""MULTI"")) {; 746 if (fitOption.Like == 2) fitOption.Like = 6; // weighted multinomial; 747 else fitOption.Like = 4; // multinomial likelihood fit instead of Poisson; 748 opt.ReplaceAll(""MULTI"","""");; 749 }; 750 // give precedence for likelihood options; 751 if (fitOption.Chi2 || fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when not running in multiple threads; 782 if (gGlobalMutex || !ROOT::IsImplicitMTEnabled()) {; 783 fitOption.User = 1;; 784 } else {; 785 Warning(""FitOptionsMake"",""Cannot use User (U) fit option when running in mul",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:28211,Availability,robust,robust,28211,"7 fitOption.W1 = 0; // does not make sense to have errors=1 in Pearson chi2 fits; 738 }; 739 }; 740 ; 741 // specific likelihood fit options; 742 if (fitOption.Like == 1) {; 743 //if (opt.Contains(""LL"")) fitOption.Like = 2;; 744 if (opt.Contains(""W"")){ fitOption.Like = 2; fitOption.W1=0;}// (weighted likelihood); 745 if (opt.Contains(""MULTI"")) {; 746 if (fitOption.Like == 2) fitOption.Like = 6; // weighted multinomial; 747 else fitOption.Like = 4; // multinomial likelihood fit instead of Poisson; 748 opt.ReplaceAll(""MULTI"","""");; 749 }; 750 // give precedence for likelihood options; 751 if (fitOption.Chi2 || fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when not running in multiple threads; 782 if (gGlobalMutex || !ROOT::IsImplicitMTEnabled()) {; 783 fitOption.User = 1;; 784 } else {; 785 Warning(""FitOptionsMake"",""Cannot use User (U) fit option when running in mul",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:28785,Availability,error,error,28785,"fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when not running in multiple threads; 782 if (gGlobalMutex || !ROOT::IsImplicitMTEnabled()) {; 783 fitOption.User = 1;; 784 } else {; 785 Warning(""FitOptionsMake"",""Cannot use User (U) fit option when running in multi-thread mode. The option is ignored"");; 786 fitOption.User = 0;; 787 }; 788 }; 789 if (opt.Contains(""Q"")) fitOption.Quiet = 1;; 790 if (opt.Contains(""V"")) {fitOption.Verbose = 1; fitOption.Quiet = 0;}; 791 ; 792 ; 793 if (opt.Contains(""E"")) fitOption.Errors = 1;; 794 if (opt.Contains(""R"")) fitOption.Range = 1;; 795 if (opt.Contains(""G"")) fitOption.Gradient= 1;; 796 if (opt.Contains(""M"")) fitOption.More = 1;; 797 if (opt.Contains(""N"")) fitOption.Nostore = 1;; 798 if (opt.Contains(""0"")) fitOption.Nograph = 1;; 799 if (opt.Contains(""+"")) fitOption.Plus = 1;; 800 if (opt.Contains(""B"")) fitOption.Bound = 1;; 8",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:28863,Availability,error,errors,28863," Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when not running in multiple threads; 782 if (gGlobalMutex || !ROOT::IsImplicitMTEnabled()) {; 783 fitOption.User = 1;; 784 } else {; 785 Warning(""FitOptionsMake"",""Cannot use User (U) fit option when running in multi-thread mode. The option is ignored"");; 786 fitOption.User = 0;; 787 }; 788 }; 789 if (opt.Contains(""Q"")) fitOption.Quiet = 1;; 790 if (opt.Contains(""V"")) {fitOption.Verbose = 1; fitOption.Quiet = 0;}; 791 ; 792 ; 793 if (opt.Contains(""E"")) fitOption.Errors = 1;; 794 if (opt.Contains(""R"")) fitOption.Range = 1;; 795 if (opt.Contains(""G"")) fitOption.Gradient= 1;; 796 if (opt.Contains(""M"")) fitOption.More = 1;; 797 if (opt.Contains(""N"")) fitOption.Nostore = 1;; 798 if (opt.Contains(""0"")) fitOption.Nograph = 1;; 799 if (opt.Contains(""+"")) fitOption.Plus = 1;; 800 if (opt.Contains(""B"")) fitOption.Bound = 1;; 801 if (opt.Contains(""C"")) fitOption.Nochisq = 1;; 802 if (opt.Contains(""F"")) fitOpti",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:32869,Availability,error,error,32869,"->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*fitfunc, dim) ) );; 856 ; 857 // parameter setting is done automaticaly in the Fitter class; 858 // need only to set limits; 859 int npar = fitfunc->GetNpar();; 860 for (int i = 0; i < npar; ++i) {; 861 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 862 double plow,pup;; 863 fitfunc->GetParLimits(i,plow,pup);; 864 // this is a limitation of TF1 interface - cannot fix a parameter to zero value; 865 if (plow*pup != 0 && plow >= pup) {; 866 parSettings.Fix();; 867 }; 868 else if (plow < pup ) {; 869 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 870 parSettings.SetLowerLimit(plow);; 871 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 872 parSettings.SetUpperLimit(pup);; 873 else; 874 parSettings.SetLimits(plow,pup);; 875 }; 876 ; 877 // set the parameter step size (by default are set to 0.3 of value); 878 // if function provides meaningful error values; 879 double err = fitfunc->GetParError(i);; 880 if ( err > 0); 881 parSettings.SetStepSize(err);; 882 else if (plow < pup && TMath::Finite(plow) && TMath::Finite(pup) ) { // in case of limits improve step sizes; 883 double step = 0.1 * (pup - plow);; 884 // check if value is not too close to limit otherwise trim value; 885 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 886 step = (pup - parSettings.Value() ) / 2;; 887 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 888 step = (parSettings.Value() - plow ) / 2;; 889 ; 890 parSettings.SetStepSize(step);; 891 }; 892 ; 893 }; 894 ; 895 fitConfig.SetMinimizerOptions(minOption);; 896 ; 897 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 898 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 899 ; 900 // more; 901 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 902 ; 903 // chech if Minos or more options; 904 if (fitOption.Err",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:39563,Availability,error,error,39563," // create range and minimizer options with default values; 1018// ROOT::Fit::DataRange range(2);; 1019// ROOT::Math::MinimizerOptions minOption;; 1020// return ROOT::Fit::FitObject(this, f2 , fitOption , minOption, goption, range);; 1021// }; 1022 ; 1023 ; 1024// function to compute the simple chi2 for graphs and histograms; 1025 ; 1026 ; 1027double ROOT::Fit::Chisquare(const TH1 & h1, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type) {; 1028 return HFit::ComputeChi2(h1,f1,useRange, type);; 1029}; 1030 ; 1031double ROOT::Fit::Chisquare(const TGraph & g, TF1 & f1, bool useRange) {; 1032 return HFit::ComputeChi2(g,f1, useRange, ROOT::Fit::EChisquareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.fUseEmpty = (type != ROOT::Fit::EChisquareType::kNeyman); // use empty bin when not using Neyman chisquare (observed error); 1041 opt.fExpErrors = (type == ROOT::Fit::EChisquareType::kPearson);; 1042 opt.fErrors1 = (type == ROOT::Fit::EChisquareType::kPearson); // not using observed errors in Pearson chi2; 1043 ; 1044 ROOT::Fit::DataRange range;; 1045 // get range of function; 1046 if (useRange) HFit::GetFunctionRange(f1,range);; 1047 // fill the data set; 1048 ROOT::Fit::BinData data(opt,range);; 1049 ROOT::Fit::FillData(data, &obj, &f1);; 1050 if (data.Size() == 0 ) {; 1051 Warning(""Chisquare"",""data set is empty - return -1"");; 1052 return -1;; 1053 }; 1054 ROOT::Math::WrappedMultiTF1 wf1(f1);; 1055 if (type == ROOT::Fit::EChisquareType::kPLikeRatio) {; 1056 // use the poisson log-lokelihood (Baker-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:39730,Availability,error,errors,39730," histograms; 1025 ; 1026 ; 1027double ROOT::Fit::Chisquare(const TH1 & h1, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type) {; 1028 return HFit::ComputeChi2(h1,f1,useRange, type);; 1029}; 1030 ; 1031double ROOT::Fit::Chisquare(const TGraph & g, TF1 & f1, bool useRange) {; 1032 return HFit::ComputeChi2(g,f1, useRange, ROOT::Fit::EChisquareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.fUseEmpty = (type != ROOT::Fit::EChisquareType::kNeyman); // use empty bin when not using Neyman chisquare (observed error); 1041 opt.fExpErrors = (type == ROOT::Fit::EChisquareType::kPearson);; 1042 opt.fErrors1 = (type == ROOT::Fit::EChisquareType::kPearson); // not using observed errors in Pearson chi2; 1043 ; 1044 ROOT::Fit::DataRange range;; 1045 // get range of function; 1046 if (useRange) HFit::GetFunctionRange(f1,range);; 1047 // fill the data set; 1048 ROOT::Fit::BinData data(opt,range);; 1049 ROOT::Fit::FillData(data, &obj, &f1);; 1050 if (data.Size() == 0 ) {; 1051 Warning(""Chisquare"",""data set is empty - return -1"");; 1052 return -1;; 1053 }; 1054 ROOT::Math::WrappedMultiTF1 wf1(f1);; 1055 if (type == ROOT::Fit::EChisquareType::kPLikeRatio) {; 1056 // use the poisson log-lokelihood (Baker-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:40998,Availability,error,error,40998,"a(data, &obj, &f1);; 1050 if (data.Size() == 0 ) {; 1051 Warning(""Chisquare"",""data set is empty - return -1"");; 1052 return -1;; 1053 }; 1054 ROOT::Math::WrappedMultiTF1 wf1(f1);; 1055 if (type == ROOT::Fit::EChisquareType::kPLikeRatio) {; 1056 // use the poisson log-lokelihood (Baker-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBackCompFitter.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TF1.h; TF2.h; TF3.h; TFitResultPtr.h; TFitResult.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Flo",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:41264,Availability,error,error,41264,"r-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBackCompFitter.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TF1.h; TF2.h; TF3.h; TFitResultPtr.h; TFitResult.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist r",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:44564,Availability,error,error,44564,"tr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; TGraph2D.h; TGraph.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; THnBase.h; TList.h; TMath.h; TMultiGraph.h; kCanDelete@ kCanDeleteDefinition TObject.h:367; TROOT.h; gROOTMutexR__EXTERN TVirtualMutex * gROOTMutexDefinition TROOT.h:63; gGlobalMutexR__EXTERN TVirtualMutex * gGlobalMutexDefinition TVirtualMutex.h:30; R__LOCKGUARD#define R__LOCKGUARD(mutex)Definition TVirtualMutex.h:95; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; UnBinData.h; WrappedMultiTF1.h; WrappedTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsign",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46023,Availability,error,errors,46023,".Definition DataRange.h:35; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer pack",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46198,Availability,error,error,46198,"te icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-t",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46359,Availability,error,errors,46359,"nge size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer con",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46741,Availability,error,error,46741,"ion of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46876,Availability,error,errorsDefinition,46876,"tMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:47782,Availability,error,errors,47782,"tionDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::Parametersconst std::vector< double > & Parameters() constparameter values (return std::vector)Definition FitResult.h:167; ROOT::Fit::FitResult::Ndfunsigned int Ndf() constNumber of degree of freedom.Definition FitResult.h:156; ROOT::Fit::FitResult::Chi2double Chi2() constReturn the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentati...Definition FitResult.h:153; ROOT::Fit::FitResult::Printvoid Print(std::ostream &os, bool covmat=false) constprint the result and optionally covariance matrix and correlationsDefinition FitResult.cxx:389; ROOT::Fit::FitResult::PrintCovMatrixvoid PrintCovMatrix(std::ostream &os) constprint error matrix and correlationsDefinition FitResult.cxx:447; ROOT::Fit::FitResult::Statusint Status() constminimizer status codeDefinition FitResult.h:128; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definiti",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:48524,Availability,error,error,48524," parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::Parametersconst std::vector< double > & Parameters() constparameter values (return std::vector)Definition FitResult.h:167; ROOT::Fit::FitResult::Ndfunsigned int Ndf() constNumber of degree of freedom.Definition FitResult.h:156; ROOT::Fit::FitResult::Chi2double Chi2() constReturn the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentati...Definition FitResult.h:153; ROOT::Fit::FitResult::Printvoid Print(std::ostream &os, bool covmat=false) constprint the result and optionally covariance matrix and correlationsDefinition FitResult.cxx:389; ROOT::Fit::FitResult::PrintCovMatrixvoid PrintCovMatrix(std::ostream &os) constprint error matrix and correlationsDefinition FitResult.cxx:447; ROOT::Fit::FitResult::Statusint Status() constminimizer status codeDefinition FitResult.h:128; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Valuedouble Value() constreturn parameter valueDefinition ParameterSettings.h:90; ROOT::Fit::ParameterSettings::SetUpperLimitvoid SetUpperLimit(double up)set a single upper limitDefinition ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:50525,Availability,toler,toleranceDefinition,50525,n ParameterSettings.h:125; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Fit::ParameterSettings::SetLowerLimitvoid SetLowerLimit(double low)set a single lower limitDefinition ParameterSettings.h:132; ROOT::Fit::PoissonLikelihoodFCNclass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish ...Definition PoissonLikelihoodFCN.h:46; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::MinimizerOptions::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition MinimizerOptions.h:219; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::SetMethodCallvirtual void SetMethodCall(TMethodCall,MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:53031,Availability,error,errors,53031,"class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::GetNparvirtual Int_t GetNpar() constDefinition TF1.h:509; TF1::SetParErrorsvirtual void SetParErrors(const Double_t *errors)Set errors for all active parameters when calling this function, the array errors must have at least ...Definition TF1.cxx:3490; TF1::SetParentvirtual void SetParent(TObject *p=nullptr)Definition TF1.h:706; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::SetNumberFitPointsvirtual void SetNumberFitPoints(Int_t npfits)Definition TF1.h:652; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::IsLinearvirtual Bool_t IsLinear() constDefinition TF1.h:630; TF1::IsVectorizedbool IsVectorized()Definition TF1.h:467; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Savevirtual void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax)Save values of function in arra",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:53042,Availability,error,errors,53042,"class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::GetNparvirtual Int_t GetNpar() constDefinition TF1.h:509; TF1::SetParErrorsvirtual void SetParErrors(const Double_t *errors)Set errors for all active parameters when calling this function, the array errors must have at least ...Definition TF1.cxx:3490; TF1::SetParentvirtual void SetParent(TObject *p=nullptr)Definition TF1.h:706; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::SetNumberFitPointsvirtual void SetNumberFitPoints(Int_t npfits)Definition TF1.h:652; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::IsLinearvirtual Bool_t IsLinear() constDefinition TF1.h:630; TF1::IsVectorizedbool IsVectorized()Definition TF1.h:467; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Savevirtual void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax)Save values of function in arra",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:53113,Availability,error,errors,53113,"class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::GetNparvirtual Int_t GetNpar() constDefinition TF1.h:509; TF1::SetParErrorsvirtual void SetParErrors(const Double_t *errors)Set errors for all active parameters when calling this function, the array errors must have at least ...Definition TF1.cxx:3490; TF1::SetParentvirtual void SetParent(TObject *p=nullptr)Definition TF1.h:706; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::SetNumberFitPointsvirtual void SetNumberFitPoints(Int_t npfits)Definition TF1.h:652; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::IsLinearvirtual Bool_t IsLinear() constDefinition TF1.h:630; TF1::IsVectorizedbool IsVectorized()Definition TF1.h:467; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Savevirtual void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax)Save values of function in arra",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:63063,Availability,mask,mask,63063,"nitExpovoid InitExpo(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for an exponential function given the fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::EChisquareTypeEChisquareTypeDefinition HFitInterface.h:53; ROOT::Fit::EChisquareType::kPLikeRatio@ kPLikeRatio; ROOT::Fit::EChisquareType::kNeyman@ kNeyman; ROOT::Fit::EChisquareType::kPearson@ kPearson; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::EExecutionPolicy::kMultiThread@ kMultiThread; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Foption_tDefinition Foption.h:24; Foption_t::Rangeint RangeDefinition Foption.h:39; Foption_t::Nographint NographDefinition Foption.h:42; Foption_t::Quietint QuietDefinition Foption.h:29; Foption_t::Likeint LikeDefinition Foption.h:34; Foption_t::W1int W1Definition Foption.h:36; Foption_t::Gradientint GradientDefinition Foption.h:40; Foption_t::ExecPolicyROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:64753,Availability,error,errors,64753,"49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:64789,Availability,error,errors,64789,"ustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordi",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:65254,Availability,error,error,65254,"; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitImpl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:65499,Availability,error,errors,65499,"; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitImpl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:65785,Availability,error,errors,65785,"; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitImpl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:65818,Availability,avail,available,65818,"; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitImpl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:17527,Deployability,update,update,17527,"::kCanDeleteLast);; 431 if (userFcn) {; 432 bcfitter->SetFCN(userFcn);; 433 // for interpreted FCN functions; 434 if (lastFitter->GetMethodCall() ) bcfitter->SetMethodCall(lastFitter->GetMethodCall() );; 435 }; 436 ; 437 // delete last fitter if it has been created here before; 438 if (lastFitter) {; 439 TBackCompFitter * lastBCFitter = dynamic_cast<TBackCompFitter *> (lastFitter);; 440 if (lastBCFitter && lastBCFitter->TestBit(TBackCompFitter::kCanDeleteLast) ); 441 delete lastBCFitter;; 442 }; 443 //N.B= this might create a memory leak if user does not delete the fitter they create; 444 TVirtualFitter::SetFitter( bcfitter );; 445 }; 446 ; 447 if (fitOption.StoreResult); 448 {; 449 TString name = ""TFitResult-"";; 450 name = name + h1->GetName() + ""-"" + f1->GetName();; 451 TString title = ""TFitResult-"";; 452 title += h1->GetTitle();; 453 tfr->SetName(name);; 454 tfr->SetTitle(title);; 455 return TFitResultPtr(tfr);; 456 }; 457 else; 458 return TFitResultPtr(iret);; 459}; 460 ; 461 ; 462void HFit::GetDrawingRange(TH1 * h1, ROOT::Fit::DataRange & range) {; 463 // get range from histogram and update the DataRange class; 464 // if a ranges already exist in that dimension use that one; 465 ; 466 Int_t ndim = GetDimension(h1);; 467 ; 468 double xmin = 0, xmax = 0, ymin = 0, ymax = 0, zmin = 0, zmax = 0;; 469 if (range.Size(0) == 0) {; 470 TAxis & xaxis = *(h1->GetXaxis());; 471 Int_t hxfirst = xaxis.GetFirst();; 472 Int_t hxlast = xaxis.GetLast();; 473 Double_t binwidx = xaxis.GetBinWidth(hxlast);; 474 xmin = xaxis.GetBinLowEdge(hxfirst);; 475 xmax = xaxis.GetBinLowEdge(hxlast) +binwidx;; 476 range.AddRange(xmin,xmax);; 477 }; 478 ; 479 if (ndim > 1) {; 480 if (range.Size(1) == 0) {; 481 TAxis & yaxis = *(h1->GetYaxis());; 482 Int_t hyfirst = yaxis.GetFirst();; 483 Int_t hylast = yaxis.GetLast();; 484 Double_t binwidy = yaxis.GetBinWidth(hylast);; 485 ymin = yaxis.GetBinLowEdge(hyfirst);; 486 ymax = yaxis.GetBinLowEdge(hylast) +binwidy;; 487 range.AddRange(1,ymin,ymax);; 4",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:21052,Deployability,update,update,21052,"ge(x1,y1,x2,y2);; 530 if (x1 < xmin) xmin = x1;; 531 if (x2 > xmax) xmax = x2;; 532 }; 533 range.AddRange(xmin,xmax);; 534 }; 535}; 536void HFit::GetDrawingRange(TGraph2D * gr, ROOT::Fit::DataRange & range) {; 537 // get range for graph2D (used sub-set histogram); 538 // N.B. : this is different than in previous implementation of TGraph2D::Fit. There range used was always(0,0); 539 // cannot use TGraph2D::GetHistogram which makes an interpolation; 540 //TH1 * h1 = gr->GetHistogram();; 541 //if (h1) HFit::GetDrawingRange(h1, range);; 542 // not very efficient (t.b.i.); 543 if (range.Size(0) == 0) {; 544 double xmin = gr->GetXmin();; 545 double xmax = gr->GetXmax();; 546 range.AddRange(0,xmin,xmax);; 547 }; 548 if (range.Size(1) == 0) {; 549 double ymin = gr->GetYmin();; 550 double ymax = gr->GetYmax();; 551 range.AddRange(1,ymin,ymax);; 552 }; 553}; 554 ; 555void HFit::GetDrawingRange(THnBase * s1, ROOT::Fit::DataRange & range) {; 556 // get range from histogram and update the DataRange class; 557 // if a ranges already exist in that dimension use that one; 558 ; 559 Int_t ndim = GetDimension(s1);; 560 ; 561 for ( int i = 0; i < ndim; ++i ) {; 562 if ( range.Size(i) == 0 ) {; 563 TAxis *axis = s1->GetAxis(i);; 564 range.AddRange(i, axis->GetXmin(), axis->GetXmax());; 565 }; 566 }; 567}; 568 ; 569template<class FitObject>; 570void HFit::StoreAndDrawFitFunction(FitObject * h1, TF1 * f1, const ROOT::Fit::DataRange & range, bool delOldFunction, bool drawFunction, const char *goption) {; 571// - Store fitted function in histogram functions list and draw; 572// should have separate functions for 1,2,3d ? t.b.d in case; 573 ; 574#ifdef DEBUG; 575 std::cout <<""draw and store fit function "" << f1->GetName() << std::endl;; 576#endif; 577 ; 578 ; 579 Int_t ndim = GetDimension(h1);; 580 double xmin = 0, xmax = 0, ymin = 0, ymax = 0, zmin = 0, zmax = 0;; 581 if (range.Size(0) ) range.GetRange(0,xmin,xmax);; 582 if (range.Size(1) ) range.GetRange(1,ymin,ymax);; 583 if (range.Size(",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:45693,Deployability,configurat,configuration,45693,"rDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)a",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:20627,Energy Efficiency,efficient,efficient,20627," where range used was from data xmin to xmax.; 517 TH1 * h1 = mg->GetHistogram();; 518 if (h1) {; 519 HFit::GetDrawingRange(h1, range);; 520 }; 521 else if (range.Size(0) == 0) {; 522 // compute range from all the TGraph's belonging to the MultiGraph; 523 double xmin = std::numeric_limits<double>::infinity();; 524 double xmax = -std::numeric_limits<double>::infinity();; 525 TIter next(mg->GetListOfGraphs() );; 526 TGraph * g = nullptr;; 527 while ( (g = (TGraph*) next() ) ) {; 528 double x1 = 0, x2 = 0, y1 = 0, y2 = 0;; 529 g->ComputeRange(x1,y1,x2,y2);; 530 if (x1 < xmin) xmin = x1;; 531 if (x2 > xmax) xmax = x2;; 532 }; 533 range.AddRange(xmin,xmax);; 534 }; 535}; 536void HFit::GetDrawingRange(TGraph2D * gr, ROOT::Fit::DataRange & range) {; 537 // get range for graph2D (used sub-set histogram); 538 // N.B. : this is different than in previous implementation of TGraph2D::Fit. There range used was always(0,0); 539 // cannot use TGraph2D::GetHistogram which makes an interpolation; 540 //TH1 * h1 = gr->GetHistogram();; 541 //if (h1) HFit::GetDrawingRange(h1, range);; 542 // not very efficient (t.b.i.); 543 if (range.Size(0) == 0) {; 544 double xmin = gr->GetXmin();; 545 double xmax = gr->GetXmax();; 546 range.AddRange(0,xmin,xmax);; 547 }; 548 if (range.Size(1) == 0) {; 549 double ymin = gr->GetYmin();; 550 double ymax = gr->GetYmax();; 551 range.AddRange(1,ymin,ymax);; 552 }; 553}; 554 ; 555void HFit::GetDrawingRange(THnBase * s1, ROOT::Fit::DataRange & range) {; 556 // get range from histogram and update the DataRange class; 557 // if a ranges already exist in that dimension use that one; 558 ; 559 Int_t ndim = GetDimension(s1);; 560 ; 561 for ( int i = 0; i < ndim; ++i ) {; 562 if ( range.Size(i) == 0 ) {; 563 TAxis *axis = s1->GetAxis(i);; 564 range.AddRange(i, axis->GetXmin(), axis->GetXmax());; 565 }; 566 }; 567}; 568 ; 569template<class FitObject>; 570void HFit::StoreAndDrawFitFunction(FitObject * h1, TF1 * f1, const ROOT::Fit::DataRange & range, bool delOldFun",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:52027,Energy Efficiency,allocate,allocated,52027,"tLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::SetMethodCallvirtual void SetMethodCall(TMethodCall *m)For using interpreted function passed by the user.Definition TBackCompFitter.h:88; TBackCompFitter::SetFCNvoid SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)) overrideOverride setFCN to use the Adapter to Minuit2 FCN interface To set the address of the minimization fu...Definition TBackCompFitter.cxx:732; TBackCompFitter::kCanDeleteLast@ kCanDeleteLastDefinition TBackCompFitter.h:53; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::GetNparvirtual Int_t GetNpar() constDefinition TF1.h:509; TF1::SetParE",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:63229,Energy Efficiency,power,power,63229,"rface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::EChisquareTypeEChisquareTypeDefinition HFitInterface.h:53; ROOT::Fit::EChisquareType::kPLikeRatio@ kPLikeRatio; ROOT::Fit::EChisquareType::kNeyman@ kNeyman; ROOT::Fit::EChisquareType::kPearson@ kPearson; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::EExecutionPolicy::kMultiThread@ kMultiThread; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Foption_tDefinition Foption.h:24; Foption_t::Rangeint RangeDefinition Foption.h:39; Foption_t::Nographint NographDefinition Foption.h:42; Foption_t::Quietint QuietDefinition Foption.h:29; Foption_t::Likeint LikeDefinition Foption.h:34; Foption_t::W1int W1Definition Foption.h:36; Foption_t::Gradientint GradientDefinition Foption.h:40; Foption_t::ExecPolicyROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Defin",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:4515,Integrability,rout,routines,4515,"11 f1->GetName(), f1->GetNdim(), dim);; 112 return -5;; 113 }; 114 ; 115 return 0;; 116 ; 117}; 118 ; 119 ; 120void HFit::GetFunctionRange(const TF1 & f1, ROOT::Fit::DataRange & range) {; 121 // get the range form the function and fill and return the DataRange object; 122 Double_t fxmin, fymin, fzmin, fxmax, fymax, fzmax;; 123 f1.GetRange(fxmin, fymin, fzmin, fxmax, fymax, fzmax);; 124 // support only one range - so add only if was not set before; 125 if (range.Size(0) == 0) range.AddRange(0,fxmin,fxmax);; 126 if (range.Size(1) == 0) range.AddRange(1,fymin,fymax);; 127 if (range.Size(2) == 0) range.AddRange(2,fzmin,fzmax);; 128 return;; 129}; 130 ; 131 ; 132template<class FitObject>; 133TFitResultPtr HFit::Fit(FitObject * h1, TF1 *f1 , Foption_t & fitOption , const ROOT::Math::MinimizerOptions & minOption, const char *goption, ROOT::Fit::DataRange & range); 134{; 135 // perform fit of histograms, or graphs using new fitting classes; 136 // use same routines for fitting both graphs and histograms; 137 ; 138#ifdef DEBUG; 139 printf(""fit function %s\n"",f1->GetName() );; 140#endif; 141 ; 142 // replacement function using new fitter; 143 int hdim = HFit::GetDimension(h1);; 144 int iret = HFit::CheckFitFunction(f1, hdim);; 145 if (iret != 0) return iret;; 146 ; 147 ; 148 ; 149 // integral option is not supported in this case; 150 if (f1->GetNdim() < hdim ) {; 151 if (fitOption.Integral) Info(""Fit"",""Ignore Integral option. Model function dimension is less than the data object dimension"");; 152 if (fitOption.Like) Info(""Fit"",""Ignore Likelihood option. Model function dimension is less than the data object dimension"");; 153 fitOption.Integral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fit",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:12224,Integrability,depend,depending,12224," close to limit otherwise trim value; 288 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 289 step = (pup - parSettings.Value() ) / 2;; 290 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 291 step = (parSettings.Value() - plow ) / 2;; 292 ; 293 parSettings.SetStepSize(step);; 294 }; 295 ; 296 ; 297 }; 298 ; 299 // needed for setting precision ?; 300 // - Compute sum of squares of errors in the bin range; 301 // should maybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 fitConfig.SetMinimizer(""Linear"","""");; 329 }; 330 else {; 331 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 332 }; 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:25329,Integrability,depend,depending,25329,"new1 = f1;; 632 }; 633 fnew1->SetParent( h1 );; 634 fnew1->SetRange(xmin,xmax);; 635 fnew1->Save(xmin,xmax,0,0,0,0);; 636 if (!drawFunction) fnew1->SetBit(TF1::kNotDraw);; 637 fnew1->AddToGlobalList(false);; 638 } else if (ndim < 3) {; 639 if (!reuseOldFunction) {; 640 fnew2 = (TF2*)f1->IsA()->New();; 641 R__ASSERT(fnew2);; 642 f1->Copy(*fnew2);; 643 funcList->Add(fnew2);; 644 }; 645 else {; 646 fnew2 = dynamic_cast<TF2*>(f1);; 647 R__ASSERT(fnew2);; 648 }; 649 fnew2->SetRange(xmin,ymin,xmax,ymax);; 650 fnew2->SetParent( h1 );; 651 fnew2->Save(xmin,xmax,ymin,ymax,0,0);; 652 if (!drawFunction) fnew2->SetBit(TF1::kNotDraw);; 653 fnew2->AddToGlobalList(false);; 654 } else {; 655 if (!reuseOldFunction) {; 656 fnew3 = (TF3*)f1->IsA()->New();; 657 R__ASSERT(fnew3);; 658 f1->Copy(*fnew3);; 659 funcList->Add(fnew3);; 660 }; 661 else {; 662 fnew3 = dynamic_cast<TF3*>(f1);; 663 R__ASSERT(fnew3);; 664 }; 665 fnew3->SetRange(xmin,ymin,zmin,xmax,ymax,zmax);; 666 fnew3->SetParent( h1 );; 667 fnew3->Save(xmin,xmax,ymin,ymax,zmin,zmax);; 668 if (!drawFunction) fnew3->SetBit(TF1::kNotDraw);; 669 fnew3->AddToGlobalList(false);; 670 }; 671 if (h1->TestBit(kCanDelete)) return;; 672 // draw only in case of histograms; 673 if (drawFunction && ndim < 3 && h1->InheritsFrom(TH1::Class() ) ) {; 674 // no need to re-draw the histogram if the histogram is already in the pad; 675 // in that case the function will be just drawn (if option N is not set); 676 if (!gPad || (gPad && gPad->GetListOfPrimitives()->FindObject(h1) == nullptr ) ); 677 h1->Draw(goption);; 678 }; 679 if (gPad) gPad->Modified(); // this is not in TH1 code (needed ??); 680 ; 681 return;; 682}; 683 ; 684 ; 685void ROOT::Fit::FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption) {; 686 // - Decode list of options into fitOption (used by both TGraph and TH1); 687 // works for both histograms and graph depending on the enum FitObjectType defined in HFit; 688 if(ROOT::IsImplicitMTEnabled()) {; 689 fitOption.",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:31669,Integrability,wrap,wrapper,31669,"; 809 Info(""CheckGraphFitOptions"",""L (Log Likelihood fit) is an invalid option when fitting a graph. It is ignored"");; 810 foption.Like = 0;; 811 }; 812 if (foption.Integral) {; 813 Info(""CheckGraphFitOptions"",""I (use function integral) is an invalid option when fitting a graph. It is ignored"");; 814 foption.Integral = 0;; 815 }; 816 return;; 817}; 818 ; 819// implementation of unbin fit function (defined in HFitInterface); 820 ; 821TFitResultPtr ROOT::Fit::UnBinFit(ROOT::Fit::UnBinData * data, TF1 * fitfunc, Foption_t & fitOption , const ROOT::Math::MinimizerOptions & minOption) {; 822 // do unbin fit, ownership of fitdata is passed later to the TBackFitter class; 823 ; 824 // create a shared pointer to the fit data to managed it; 825 std::shared_ptr<ROOT::Fit::UnBinData> fitdata(data);; 826 ; 827#ifdef DEBUG; 828 printf(""tree data size is %d \n"",fitdata->Size());; 829 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 830 if (fitdata->NDim() == 1) printf("" x[%d] = %f \n"", i,*(fitdata->Coords(i) ) );; 831 }; 832#endif; 833 if (fitdata->Size() == 0 ) {; 834 Warning(""Fit"",""Fit data is empty "");; 835 return -1;; 836 }; 837 ; 838 // create an empty TFitResult; 839 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 840 // create the fitter; 841 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(tfr) );; 842 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 843 ; 844 // dimension is given by data because TF1 pointer can have wrong one; 845 unsigned int dim = fitdata->NDim();; 846 ; 847 // set the fit function; 848 // if option grad is specified use gradient; 849 // need to create a wrapper for an automatic normalized TF1 ???; 850 if ( fitOption.Gradient ) {; 851 assert ( (int) dim == fitfunc->GetNdim() );; 852 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*fitfunc) );; 853 }; 854 else; 855 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*fitfunc, dim) ) );; 856 ; 857 // parameter setting is done",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:32357,Integrability,interface,interface,32357,"w ROOT::Fit::Fitter(tfr) );; 842 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 843 ; 844 // dimension is given by data because TF1 pointer can have wrong one; 845 unsigned int dim = fitdata->NDim();; 846 ; 847 // set the fit function; 848 // if option grad is specified use gradient; 849 // need to create a wrapper for an automatic normalized TF1 ???; 850 if ( fitOption.Gradient ) {; 851 assert ( (int) dim == fitfunc->GetNdim() );; 852 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*fitfunc) );; 853 }; 854 else; 855 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*fitfunc, dim) ) );; 856 ; 857 // parameter setting is done automaticaly in the Fitter class; 858 // need only to set limits; 859 int npar = fitfunc->GetNpar();; 860 for (int i = 0; i < npar; ++i) {; 861 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 862 double plow,pup;; 863 fitfunc->GetParLimits(i,plow,pup);; 864 // this is a limitation of TF1 interface - cannot fix a parameter to zero value; 865 if (plow*pup != 0 && plow >= pup) {; 866 parSettings.Fix();; 867 }; 868 else if (plow < pup ) {; 869 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 870 parSettings.SetLowerLimit(plow);; 871 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 872 parSettings.SetUpperLimit(pup);; 873 else; 874 parSettings.SetLimits(plow,pup);; 875 }; 876 ; 877 // set the parameter step size (by default are set to 0.3 of value); 878 // if function provides meaningful error values; 879 double err = fitfunc->GetParError(i);; 880 if ( err > 0); 881 parSettings.SetStepSize(err);; 882 else if (plow < pup && TMath::Finite(plow) && TMath::Finite(pup) ) { // in case of limits improve step sizes; 883 double step = 0.1 * (pup - plow);; 884 // check if value is not too close to limit otherwise trim value; 885 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 886 step = (pup - parSettings.Value() ) / 2;; 887 else if ( parSettings.V",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:41138,Integrability,message,messages,41138,"::WrappedMultiTF1 wf1(f1);; 1055 if (type == ROOT::Fit::EChisquareType::kPLikeRatio) {; 1056 // use the poisson log-lokelihood (Baker-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBackCompFitter.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TF1.h; TF2.h; TF3.h; TFitResultPtr.h; TFitResult.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:50122,Integrability,interface,interface,50122,"ouble up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Valuedouble Value() constreturn parameter valueDefinition ParameterSettings.h:90; ROOT::Fit::ParameterSettings::SetUpperLimitvoid SetUpperLimit(double up)set a single upper limitDefinition ParameterSettings.h:125; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Fit::ParameterSettings::SetLowerLimitvoid SetLowerLimit(double low)set a single lower limitDefinition ParameterSettings.h:132; ROOT::Fit::PoissonLikelihoodFCNclass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish ...Definition PoissonLikelihoodFCN.h:46; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::MinimizerOptions::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition MinimizerOptions.h:219; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAx",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:50673,Integrability,interface,interface,50673,::ParameterSettings::SetLowerLimitvoid SetLowerLimit(double low)set a single lower limitDefinition ParameterSettings.h:132; ROOT::Fit::PoissonLikelihoodFCNclass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish ...Definition PoissonLikelihoodFCN.h:46; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::MinimizerOptions::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition MinimizerOptions.h:219; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::SetMethodCallvirtual void SetMethodCall(TMethodCall *m)For using interpreted function passed by the user.Definition TBackCompFitter.h:88; TBackCompFitter::SetFCNvoid SetFCN(void(*fcn),MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:51746,Integrability,interface,interface,51746,"i-dimensions...Definition WrappedMultiTF1.h:48; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::SetMethodCallvirtual void SetMethodCall(TMethodCall *m)For using interpreted function passed by the user.Definition TBackCompFitter.h:88; TBackCompFitter::SetFCNvoid SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)) overrideOverride setFCN to use the Adapter to Minuit2 FCN interface To set the address of the minimization fu...Definition TBackCompFitter.cxx:732; TBackCompFitter::kCanDeleteLast@ kCanDeleteLastDefinition TBackCompFitter.h:53; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::Set",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:14020,Modifiability,extend,extended,14020,"itConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cas",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:14074,Modifiability,extend,extended,14074,"f(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 394 if ( int( fitResult.Errors().size()) >= f1->GetNpar() ); 395 f1->SetParErrors( &(fitResult.Errors().front()",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:14111,Modifiability,extend,extended,14111,"f(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 394 if ( int( fitResult.Errors().size()) >= f1->GetNpar() ); 395 f1->SetParErrors( &(fitResult.Errors().front()",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:14280,Modifiability,extend,extended,14280,"f(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 394 if ( int( fitResult.Errors().size()) >= f1->GetNpar() ); 395 f1->SetParErrors( &(fitResult.Errors().front()",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:25864,Modifiability,variab,variable,25864,"ives()->FindObject(h1) == nullptr ) ); 677 h1->Draw(goption);; 678 }; 679 if (gPad) gPad->Modified(); // this is not in TH1 code (needed ??); 680 ; 681 return;; 682}; 683 ; 684 ; 685void ROOT::Fit::FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption) {; 686 // - Decode list of options into fitOption (used by both TGraph and TH1); 687 // works for both histograms and graph depending on the enum FitObjectType defined in HFit; 688 if(ROOT::IsImplicitMTEnabled()) {; 689 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 690 }; 691 ; 692 if (option == nullptr) return;; 693 if (!option[0]) return;; 694 ; 695 TString opt = option;; 696 opt.ToUpper();; 697 ; 698 // parse firt the specific options; 699 if (type == EFitObjectType::kHistogram) {; 700 ; 701 if (opt.Contains(""WIDTH"")) {; 702 fitOption.BinVolume = 1; // scale content by the bin width; 703 if (opt.Contains(""NORMWIDTH"")) {; 704 // for variable bins: scale content by the bin width normalized by a reference value (typically the minimum bin); 705 // this option is for variable bin widths; 706 fitOption.BinVolume = 2;; 707 opt.ReplaceAll(""NORMWIDTH"","""");; 708 }; 709 else; 710 opt.ReplaceAll(""WIDTH"","""");; 711 }; 712 ; 713 // if (opt.Contains(""MULTIPROC"")) {; 714 // fitOption.ExecPolicy = ROOT::Fit::kMultiprocess;; 715 // opt.ReplaceAll(""MULTIPROC"","""");; 716 // }; 717 ; 718 if (opt.Contains(""SERIAL"")) {; 719 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kSequential;; 720 opt.ReplaceAll(""SERIAL"","""");; 721 }; 722 ; 723 if (opt.Contains(""MULTITHREAD"")) {; 724 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 725 opt.ReplaceAll(""MULTITHREAD"","""");; 726 }; 727 ; 728 if (opt.Contains(""I"")) fitOption.Integral= 1; // integral of function in the bin (no sense for graph); 729 if (opt.Contains(""W"")) fitOption.W1 = 1; // all non-empty bins or points have weight =1 (for chi2 fit); 730 if (opt.Contains(""WW"")) fitOption.W1 = 2; //all bins have weight=1, even empty bins; 731 if (opt.Contain",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:25997,Modifiability,variab,variable,25997,"ives()->FindObject(h1) == nullptr ) ); 677 h1->Draw(goption);; 678 }; 679 if (gPad) gPad->Modified(); // this is not in TH1 code (needed ??); 680 ; 681 return;; 682}; 683 ; 684 ; 685void ROOT::Fit::FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption) {; 686 // - Decode list of options into fitOption (used by both TGraph and TH1); 687 // works for both histograms and graph depending on the enum FitObjectType defined in HFit; 688 if(ROOT::IsImplicitMTEnabled()) {; 689 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 690 }; 691 ; 692 if (option == nullptr) return;; 693 if (!option[0]) return;; 694 ; 695 TString opt = option;; 696 opt.ToUpper();; 697 ; 698 // parse firt the specific options; 699 if (type == EFitObjectType::kHistogram) {; 700 ; 701 if (opt.Contains(""WIDTH"")) {; 702 fitOption.BinVolume = 1; // scale content by the bin width; 703 if (opt.Contains(""NORMWIDTH"")) {; 704 // for variable bins: scale content by the bin width normalized by a reference value (typically the minimum bin); 705 // this option is for variable bin widths; 706 fitOption.BinVolume = 2;; 707 opt.ReplaceAll(""NORMWIDTH"","""");; 708 }; 709 else; 710 opt.ReplaceAll(""WIDTH"","""");; 711 }; 712 ; 713 // if (opt.Contains(""MULTIPROC"")) {; 714 // fitOption.ExecPolicy = ROOT::Fit::kMultiprocess;; 715 // opt.ReplaceAll(""MULTIPROC"","""");; 716 // }; 717 ; 718 if (opt.Contains(""SERIAL"")) {; 719 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kSequential;; 720 opt.ReplaceAll(""SERIAL"","""");; 721 }; 722 ; 723 if (opt.Contains(""MULTITHREAD"")) {; 724 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 725 opt.ReplaceAll(""MULTITHREAD"","""");; 726 }; 727 ; 728 if (opt.Contains(""I"")) fitOption.Integral= 1; // integral of function in the bin (no sense for graph); 729 if (opt.Contains(""W"")) fitOption.W1 = 1; // all non-empty bins or points have weight =1 (for chi2 fit); 730 if (opt.Contains(""WW"")) fitOption.W1 = 2; //all bins have weight=1, even empty bins; 731 if (opt.Contain",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:34130,Modifiability,extend,extended,34130,"pup - plow);; 884 // check if value is not too close to limit otherwise trim value; 885 if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 886 step = (pup - parSettings.Value() ) / 2;; 887 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 888 step = (parSettings.Value() - plow ) / 2;; 889 ; 890 parSettings.SetStepSize(step);; 891 }; 892 ; 893 }; 894 ; 895 fitConfig.SetMinimizerOptions(minOption);; 896 ; 897 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 898 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 899 ; 900 // more; 901 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 902 ; 903 // chech if Minos or more options; 904 if (fitOption.Errors) {; 905 // run Hesse and Minos; 906 fitConfig.SetParabErrors(true);; 907 fitConfig.SetMinosErrors(true);; 908 }; 909 // use weight correction; 910 if ( (fitOption.Like & 2) == 2); 911 fitConfig.SetWeightCorrection(true);; 912 ; 913 bool extended = (fitOption.Like & 1) == 1;; 914 ; 915 bool fitok = false;; 916 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 917 if ( !fitok && !fitOption.Quiet ); 918 Warning(""UnBinFit"",""Abnormal termination of minimization."");; 919 ; 920 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 921 // one could set directly the fit result in TF1; 922 int iret = fitResult.Status();; 923 if (!fitResult.IsEmpty() ) {; 924 // set in fitfunc the result of the fit; 925 fitfunc->SetNDF(fitResult.Ndf() );; 926 fitfunc->SetNumberFitPoints(fitdata->Size() );; 927 ; 928 assert( (Int_t)fitResult.Parameters().size() >= fitfunc->GetNpar() );; 929 fitfunc->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 930 if ( int( fitResult.Errors().size()) >= fitfunc->GetNpar() ); 931 fitfunc->SetParErrors( &(fitResult.Errors().front()) );; 932 ; 933 }; 934 ; 935 // store fitting result in the backward compatible TVirtualFitter object; 936 // lock in ca",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:34243,Modifiability,extend,extended,34243,"if ( parSettings.Value() < pup && pup - parSettings.Value() < 2 * step ); 886 step = (pup - parSettings.Value() ) / 2;; 887 else if ( parSettings.Value() > plow && parSettings.Value() - plow < 2 * step ); 888 step = (parSettings.Value() - plow ) / 2;; 889 ; 890 parSettings.SetStepSize(step);; 891 }; 892 ; 893 }; 894 ; 895 fitConfig.SetMinimizerOptions(minOption);; 896 ; 897 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 898 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 899 ; 900 // more; 901 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 902 ; 903 // chech if Minos or more options; 904 if (fitOption.Errors) {; 905 // run Hesse and Minos; 906 fitConfig.SetParabErrors(true);; 907 fitConfig.SetMinosErrors(true);; 908 }; 909 // use weight correction; 910 if ( (fitOption.Like & 2) == 2); 911 fitConfig.SetWeightCorrection(true);; 912 ; 913 bool extended = (fitOption.Like & 1) == 1;; 914 ; 915 bool fitok = false;; 916 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 917 if ( !fitok && !fitOption.Quiet ); 918 Warning(""UnBinFit"",""Abnormal termination of minimization."");; 919 ; 920 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 921 // one could set directly the fit result in TF1; 922 int iret = fitResult.Status();; 923 if (!fitResult.IsEmpty() ) {; 924 // set in fitfunc the result of the fit; 925 fitfunc->SetNDF(fitResult.Ndf() );; 926 fitfunc->SetNumberFitPoints(fitdata->Size() );; 927 ; 928 assert( (Int_t)fitResult.Parameters().size() >= fitfunc->GetNpar() );; 929 fitfunc->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 930 if ( int( fitResult.Errors().size()) >= fitfunc->GetNpar() ); 931 fitfunc->SetParErrors( &(fitResult.Errors().front()) );; 932 ; 933 }; 934 ; 935 // store fitting result in the backward compatible TVirtualFitter object; 936 // lock in case running in a multi-thread enabled mode; 937 {; 938 R__LOCKGUARD(gROOTMutex);; 939 TVi",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:45693,Modifiability,config,configuration,45693,"rDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)a",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:55377,Modifiability,inherit,inheritance,55377,"if the fu...Definition TF1.cxx:847; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::Savevoid Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax) overrideSave values of function in array fSave.Definition TF2.cxx:796; TF2::SetRangevoid SetRange(Double_t xmin, Double_t xmax) overrideInitialize the upper and lower bounds to draw the function.Definition TF2.h:146; TF3A 3-Dim function with parameters.Definition TF3.h:28; TF3::Savevoid Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax) overrideSave values of function in array fSave.Definition TF3.cxx:551; TF3::SetRangevoid SetRange(Double_t xmin, Double_t xmax) overrideInitialize the upper and lower bounds to draw the function.Definition TF3.h:143; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::GetHistogramvirtual TH1F * GetHistogram() constReturns a pointer to the histogram used to draw the axis Takes into account the two following cases.Definition TGraph.cxx:1428; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Classstatic TClass * Class(); TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinitio",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:57752,Modifiability,inherit,inherits,57752,"emove object from the list.Definition TList.cxx:820; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::GetListOfGraphsTList * GetListOfGraphs() constDefinition TMultiGraph.h:68; TMultiGraph::GetHistogramTH1F * GetHistogram()Returns a pointer to the histogram used to draw the axis.Definition TMultiGraph.cxx:1015; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; TVirtualFitter::SetFitOptionvirtual void SetFitOption(Foption_t option)Definition TVirtualFitter.h:97; TVirtualFitter::SetObjectFitvirtual void SetObjectFit(TObject *ob",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:4435,Performance,perform,perform,4435,"11 f1->GetName(), f1->GetNdim(), dim);; 112 return -5;; 113 }; 114 ; 115 return 0;; 116 ; 117}; 118 ; 119 ; 120void HFit::GetFunctionRange(const TF1 & f1, ROOT::Fit::DataRange & range) {; 121 // get the range form the function and fill and return the DataRange object; 122 Double_t fxmin, fymin, fzmin, fxmax, fymax, fzmax;; 123 f1.GetRange(fxmin, fymin, fzmin, fxmax, fymax, fzmax);; 124 // support only one range - so add only if was not set before; 125 if (range.Size(0) == 0) range.AddRange(0,fxmin,fxmax);; 126 if (range.Size(1) == 0) range.AddRange(1,fymin,fymax);; 127 if (range.Size(2) == 0) range.AddRange(2,fzmin,fzmax);; 128 return;; 129}; 130 ; 131 ; 132template<class FitObject>; 133TFitResultPtr HFit::Fit(FitObject * h1, TF1 *f1 , Foption_t & fitOption , const ROOT::Math::MinimizerOptions & minOption, const char *goption, ROOT::Fit::DataRange & range); 134{; 135 // perform fit of histograms, or graphs using new fitting classes; 136 // use same routines for fitting both graphs and histograms; 137 ; 138#ifdef DEBUG; 139 printf(""fit function %s\n"",f1->GetName() );; 140#endif; 141 ; 142 // replacement function using new fitter; 143 int hdim = HFit::GetDimension(h1);; 144 int iret = HFit::CheckFitFunction(f1, hdim);; 145 if (iret != 0) return iret;; 146 ; 147 ; 148 ; 149 // integral option is not supported in this case; 150 if (f1->GetNdim() < hdim ) {; 151 if (fitOption.Integral) Info(""Fit"",""Ignore Integral option. Model function dimension is less than the data object dimension"");; 152 if (fitOption.Like) Info(""Fit"",""Ignore Likelihood option. Model function dimension is less than the data object dimension"");; 153 fitOption.Integral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fit",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:13844,Performance,perform,perform,13844," 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPo",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:27899,Performance,perform,perform,27899,"if (opt.Contains(""X"")) fitOption.Chi2 = 1;; 733 if (opt.Contains(""P"")) {; 734 fitOption.PChi2 = 1;; 735 if (fitOption.W1) { // option contains also w is a weighted Pearson chi2 fit; 736 fitOption.PChi2 = 2;; 737 fitOption.W1 = 0; // does not make sense to have errors=1 in Pearson chi2 fits; 738 }; 739 }; 740 ; 741 // specific likelihood fit options; 742 if (fitOption.Like == 1) {; 743 //if (opt.Contains(""LL"")) fitOption.Like = 2;; 744 if (opt.Contains(""W"")){ fitOption.Like = 2; fitOption.W1=0;}// (weighted likelihood); 745 if (opt.Contains(""MULTI"")) {; 746 if (fitOption.Like == 2) fitOption.Like = 6; // weighted multinomial; 747 else fitOption.Like = 4; // multinomial likelihood fit instead of Poisson; 748 opt.ReplaceAll(""MULTI"","""");; 749 }; 750 // give precedence for likelihood options; 751 if (fitOption.Chi2 || fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:29171,Performance,multi-thread,multi-thread,29171," robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.Contains(""H=0."")) {; 764 int start = opt.Index(""H=0."");; 765 int numpos = start + strlen(""H=0."");; 766 int numlen = 0;; 767 int len = opt.Length();; 768 while( (numpos+numlen<len) && isdigit(opt[numpos+numlen]) ) numlen++;; 769 TString num = opt(numpos,numlen);; 770 opt.Remove(start+strlen(""H""),strlen(""=0."")+numlen);; 771 h = atof(num.Data());; 772 h*=TMath::Power(10, -numlen);; 773 }; 774 ; 775 if (opt.Contains(""H"")) { fitOption.Robust = 1; fitOption.hRobust = h; }; 776 if (opt.Contains(""T"")) fitOption.NoErrX = 1; // no error in X; 777 if (opt.Contains(""W"")) fitOption.W1 = 1; // ignorer all point errors when fitting; 778 }; 779 ; 780 if (opt.Contains(""U"")) {; 781 // user option can work only when not running in multiple threads; 782 if (gGlobalMutex || !ROOT::IsImplicitMTEnabled()) {; 783 fitOption.User = 1;; 784 } else {; 785 Warning(""FitOptionsMake"",""Cannot use User (U) fit option when running in multi-thread mode. The option is ignored"");; 786 fitOption.User = 0;; 787 }; 788 }; 789 if (opt.Contains(""Q"")) fitOption.Quiet = 1;; 790 if (opt.Contains(""V"")) {fitOption.Verbose = 1; fitOption.Quiet = 0;}; 791 ; 792 ; 793 if (opt.Contains(""E"")) fitOption.Errors = 1;; 794 if (opt.Contains(""R"")) fitOption.Range = 1;; 795 if (opt.Contains(""G"")) fitOption.Gradient= 1;; 796 if (opt.Contains(""M"")) fitOption.More = 1;; 797 if (opt.Contains(""N"")) fitOption.Nostore = 1;; 798 if (opt.Contains(""0"")) fitOption.Nograph = 1;; 799 if (opt.Contains(""+"")) fitOption.Plus = 1;; 800 if (opt.Contains(""B"")) fitOption.Bound = 1;; 801 if (opt.Contains(""C"")) fitOption.Nochisq = 1;; 802 if (opt.Contains(""F"")) fitOption.Minuit = 1;; 803 if (opt.Contains(""S"")) fitOption.StoreResult = 1;; 804 ; 805}; 806 ; 807void HFit::CheckGraphFitOptions(Foption_t & foption) {; 808 if (foption.Like) {; 809 Info(""CheckGraphFitOptions"",""L (Log Likelihood fit) is an invalid option when fi",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:35136,Performance,multi-thread,multi-thread,35136,"bnormal termination of minimization."");; 919 ; 920 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 921 // one could set directly the fit result in TF1; 922 int iret = fitResult.Status();; 923 if (!fitResult.IsEmpty() ) {; 924 // set in fitfunc the result of the fit; 925 fitfunc->SetNDF(fitResult.Ndf() );; 926 fitfunc->SetNumberFitPoints(fitdata->Size() );; 927 ; 928 assert( (Int_t)fitResult.Parameters().size() >= fitfunc->GetNpar() );; 929 fitfunc->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 930 if ( int( fitResult.Errors().size()) >= fitfunc->GetNpar() ); 931 fitfunc->SetParErrors( &(fitResult.Errors().front()) );; 932 ; 933 }; 934 ; 935 // store fitting result in the backward compatible TVirtualFitter object; 936 // lock in case running in a multi-thread enabled mode; 937 {; 938 R__LOCKGUARD(gROOTMutex);; 939 TVirtualFitter * lastFitter = TVirtualFitter::GetFitter();; 940 TBackCompFitter * bcfitter = new TBackCompFitter(fitter, fitdata);; 941 // cannot use anymore now fitdata (given away ownership); 942 fitdata = nullptr;; 943 bcfitter->SetFitOption(fitOption);; 944 bcfitter->SetUserFunc(fitfunc);; 945 // delete previous fitter and replace with the new one; 946 if (lastFitter) delete lastFitter;; 947 TVirtualFitter::SetFitter( bcfitter );; 948 ; 949 // print results; 950 if (fitOption.Verbose) fitResult.PrintCovMatrix(std::cout);; 951 else if (!fitOption.Quiet) fitResult.Print(std::cout);; 952 }; 953 ; 954 ; 955 if (fitOption.StoreResult); 956 {; 957 TString name = ""TFitResult-"";; 958 name = name + ""UnBinData-"" + fitfunc->GetName();; 959 TString title = ""TFitResult-"";; 960 title += name;; 961 tfr->SetName(name);; 962 tfr->SetTitle(title);; 963 return TFitResultPtr(tfr);; 964 }; 965 else; 966 return TFitResultPtr(iret);; 967}; 968 ; 969 ; 970// implementations of ROOT::Fit::FitObject functions (defined in HFitInterface) in terms of the template HFit::Fit; 971 ; 972TFitResultPtr ROOT::Fit::FitObject(TH1 * h1, TF1 *f1 , Foption",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:46048,Performance,perform,performed,46048,".Definition DataRange.h:35; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::Pa...Definition FitConfig.h:47; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::SetMinosErrorsvoid SetMinosErrors(bool on=true)set Minos errors computation to be performed after fittingDefinition FitConfig.h:229; ROOT::Fit::FitConfig::SetNormErrorsvoid SetNormErrors(bool on=true)set the option to normalize the error on the result according to chi2/ndfDefinition FitConfig.h:223; ROOT::Fit::FitConfig::NormalizeErrorsbool NormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer pack",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:48725,Performance,perform,performing,48725,"itResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::Parametersconst std::vector< double > & Parameters() constparameter values (return std::vector)Definition FitResult.h:167; ROOT::Fit::FitResult::Ndfunsigned int Ndf() constNumber of degree of freedom.Definition FitResult.h:156; ROOT::Fit::FitResult::Chi2double Chi2() constReturn the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentati...Definition FitResult.h:153; ROOT::Fit::FitResult::Printvoid Print(std::ostream &os, bool covmat=false) constprint the result and optionally covariance matrix and correlationsDefinition FitResult.cxx:389; ROOT::Fit::FitResult::PrintCovMatrixvoid PrintCovMatrix(std::ostream &os) constprint error matrix and correlationsDefinition FitResult.cxx:447; ROOT::Fit::FitResult::Statusint Status() constminimizer status codeDefinition FitResult.h:128; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Valuedouble Value() constreturn parameter valueDefinition ParameterSettings.h:90; ROOT::Fit::ParameterSettings::SetUpperLimitvoid SetUpperLimit(double up)set a single upper limitDefinition ParameterSettings.h:125; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Fit::ParameterSettings::SetLowerLimitvoid SetLowerLimit(double low)set a single low",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:62834,Performance,multi-thread,multi-threading,62834,"tTypeDefinition HFitInterface.h:48; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; ROOT::Fit::InitExpovoid InitExpo(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for an exponential function given the fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::EChisquareTypeEChisquareTypeDefinition HFitInterface.h:53; ROOT::Fit::EChisquareType::kPLikeRatio@ kPLikeRatio; ROOT::Fit::EChisquareType::kNeyman@ kNeyman; ROOT::Fit::EChisquareType::kPearson@ kPearson; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::EExecutionPolicy::kMultiThread@ kMultiThread; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Foption_tDefinition Foption.h:24; Foption_t::Rangeint RangeDefinition Foption.h:39; Foption_t::Nographint NographDefinition Foption.h:42; Foption_t::Quietint QuietDefinition Foption.h:29; Foption_t::Likeint LikeDefinition Foption.h:34; Foption_t::W1int W1Definition Foption.h:36; Foption_t::Gradientint GradientDefinition Foption.h:40; Foption_t::ExecPolicyROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robus",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:23207,Safety,avoid,avoid,23207,"Range in x = [ "" << xmin << "" , "" << xmax << "" ]"" << std::endl;; 589#endif; 590 ; 591 TList * funcList = h1->GetListOfFunctions();; 592 if (funcList == nullptr){; 593 Error(""StoreAndDrawFitFunction"",""Function list has not been created - cannot store the fitted function"");; 594 return;; 595 }; 596 ; 597 // delete the function in the list only if; 598 // the function we are fitting is not in that list; 599 // If this is the case we re-use that function object and; 600 // we do not create a new one (if delOldFunction is true); 601 bool reuseOldFunction = false;; 602 if (delOldFunction) {; 603 TIter next(funcList, kIterBackward);; 604 TObject *obj;; 605 while ((obj = next())) {; 606 if (obj->InheritsFrom(TF1::Class())) {; 607 if (obj != f1) {; 608 funcList->Remove(obj);; 609 delete obj;; 610 }; 611 else {; 612 reuseOldFunction = true;; 613 }; 614 }; 615 }; 616 }; 617 ; 618 TF1 *fnew1 = nullptr;; 619 TF2 *fnew2 = nullptr;; 620 TF3 *fnew3 = nullptr;; 621 ; 622 // copy TF1 using TClass to avoid slicing in case of derived classes; 623 if (ndim < 2) {; 624 if (!reuseOldFunction) {; 625 fnew1 = (TF1*)f1->IsA()->New();; 626 R__ASSERT(fnew1);; 627 f1->Copy(*fnew1);; 628 funcList->Add(fnew1);; 629 }; 630 else {; 631 fnew1 = f1;; 632 }; 633 fnew1->SetParent( h1 );; 634 fnew1->SetRange(xmin,xmax);; 635 fnew1->Save(xmin,xmax,0,0,0,0);; 636 if (!drawFunction) fnew1->SetBit(TF1::kNotDraw);; 637 fnew1->AddToGlobalList(false);; 638 } else if (ndim < 3) {; 639 if (!reuseOldFunction) {; 640 fnew2 = (TF2*)f1->IsA()->New();; 641 R__ASSERT(fnew2);; 642 f1->Copy(*fnew2);; 643 funcList->Add(fnew2);; 644 }; 645 else {; 646 fnew2 = dynamic_cast<TF2*>(f1);; 647 R__ASSERT(fnew2);; 648 }; 649 fnew2->SetRange(xmin,ymin,xmax,ymax);; 650 fnew2->SetParent( h1 );; 651 fnew2->Save(xmin,xmax,ymin,ymax,0,0);; 652 if (!drawFunction) fnew2->SetBit(TF1::kNotDraw);; 653 fnew2->AddToGlobalList(false);; 654 } else {; 655 if (!reuseOldFunction) {; 656 fnew3 = (TF3*)f1->IsA()->New();; 657 R__ASSERT(fnew3);; 658 f",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:47316,Security,access,access,47316,"ormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::Parametersconst std::vector< double > & Parameters() constparameter values (return std::vector)Definition FitResult.h:167; ROOT::Fit::FitResult::Ndfunsigned int Ndf() constNumber of degree of freedom.Definition FitResult.h:156; ROOT::Fit::FitResult::Chi2double Chi2() constReturn the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentati...Definition FitResult.h:153; ROOT::Fit::FitResult::Printvoid Print(std::ostr",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:6305,Testability,log,log-likelihood,6305,"ear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:14915,Testability,assert,assert,14915,"ght correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 394 if ( int( fitResult.Errors().size()) >= f1->GetNpar() ); 395 f1->SetParErrors( &(fitResult.Errors().front()) );; 396 ; 397 ; 398 }; 399 ; 400// - Store fitted function in histogram functions list and draw; 401 if (!fitOption.Nostore) {; 402 HFit::GetDrawingRange(h1, range);; 403 HFit::StoreAndDrawFitFunction(h1, f1, range, !fitOption.Plus, !fitOption.Nograph, goption);; 404 }; 405 ; 406 // print the result; 407 // if using Fitter class must be done here; 408 // use old style Minuit for TMinuit and if no corrections have been applied; 409 if (!fitOption.Quiet) {; 410 R__LOCKGUARD(gROOTMutex);; 411 if (fitter->GetMinimizer() && fitConfig.MinimizerType() == ""Minuit"" &&; 412 !fitConfig.NormalizeErrors() && fitOption.Like <= 1) {; 413 fitter->GetMinimizer()->PrintResults(); // use old style Minuit; 414 }; 415 else {; 416 /",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:31751,Testability,assert,assert,31751,"fitdata->NDim() == 1) printf("" x[%d] = %f \n"", i,*(fitdata->Coords(i) ) );; 831 }; 832#endif; 833 if (fitdata->Size() == 0 ) {; 834 Warning(""Fit"",""Fit data is empty "");; 835 return -1;; 836 }; 837 ; 838 // create an empty TFitResult; 839 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 840 // create the fitter; 841 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(tfr) );; 842 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 843 ; 844 // dimension is given by data because TF1 pointer can have wrong one; 845 unsigned int dim = fitdata->NDim();; 846 ; 847 // set the fit function; 848 // if option grad is specified use gradient; 849 // need to create a wrapper for an automatic normalized TF1 ???; 850 if ( fitOption.Gradient ) {; 851 assert ( (int) dim == fitfunc->GetNdim() );; 852 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*fitfunc) );; 853 }; 854 else; 855 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*fitfunc, dim) ) );; 856 ; 857 // parameter setting is done automaticaly in the Fitter class; 858 // need only to set limits; 859 int npar = fitfunc->GetNpar();; 860 for (int i = 0; i < npar; ++i) {; 861 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 862 double plow,pup;; 863 fitfunc->GetParLimits(i,plow,pup);; 864 // this is a limitation of TF1 interface - cannot fix a parameter to zero value; 865 if (plow*pup != 0 && plow >= pup) {; 866 parSettings.Fix();; 867 }; 868 else if (plow < pup ) {; 869 if (!TMath::Finite(pup) && TMath::Finite(plow) ); 870 parSettings.SetLowerLimit(plow);; 871 else if (!TMath::Finite(plow) && TMath::Finite(pup) ); 872 parSettings.SetUpperLimit(pup);; 873 else; 874 parSettings.SetLimits(plow,pup);; 875 }; 876 ; 877 // set the parameter step size (by default are set to 0.3 of value); 878 // if function provides meaningful error values; 879 double err = fitfunc->GetParError(i);; 880 if ( err > 0); 881 parSettings.SetStepSize(err);; 882 else",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:34722,Testability,assert,assert,34722,"rOptions().SetPrintLevel(0);; 899 ; 900 // more; 901 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 902 ; 903 // chech if Minos or more options; 904 if (fitOption.Errors) {; 905 // run Hesse and Minos; 906 fitConfig.SetParabErrors(true);; 907 fitConfig.SetMinosErrors(true);; 908 }; 909 // use weight correction; 910 if ( (fitOption.Like & 2) == 2); 911 fitConfig.SetWeightCorrection(true);; 912 ; 913 bool extended = (fitOption.Like & 1) == 1;; 914 ; 915 bool fitok = false;; 916 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 917 if ( !fitok && !fitOption.Quiet ); 918 Warning(""UnBinFit"",""Abnormal termination of minimization."");; 919 ; 920 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 921 // one could set directly the fit result in TF1; 922 int iret = fitResult.Status();; 923 if (!fitResult.IsEmpty() ) {; 924 // set in fitfunc the result of the fit; 925 fitfunc->SetNDF(fitResult.Ndf() );; 926 fitfunc->SetNumberFitPoints(fitdata->Size() );; 927 ; 928 assert( (Int_t)fitResult.Parameters().size() >= fitfunc->GetNpar() );; 929 fitfunc->SetParameters( const_cast<double*>(&(fitResult.Parameters().front())));; 930 if ( int( fitResult.Errors().size()) >= fitfunc->GetNpar() ); 931 fitfunc->SetParErrors( &(fitResult.Errors().front()) );; 932 ; 933 }; 934 ; 935 // store fitting result in the backward compatible TVirtualFitter object; 936 // lock in case running in a multi-thread enabled mode; 937 {; 938 R__LOCKGUARD(gROOTMutex);; 939 TVirtualFitter * lastFitter = TVirtualFitter::GetFitter();; 940 TBackCompFitter * bcfitter = new TBackCompFitter(fitter, fitdata);; 941 // cannot use anymore now fitdata (given away ownership); 942 fitdata = nullptr;; 943 bcfitter->SetFitOption(fitOption);; 944 bcfitter->SetUserFunc(fitfunc);; 945 // delete previous fitter and replace with the new one; 946 if (lastFitter) delete lastFitter;; 947 TVirtualFitter::SetFitter( bcfitter );; 948 ; 949 // print results; 950 if (fitOption.Verbose) ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:40236,Testability,log,log-lokelihood,40236,"uareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.fUseEmpty = (type != ROOT::Fit::EChisquareType::kNeyman); // use empty bin when not using Neyman chisquare (observed error); 1041 opt.fExpErrors = (type == ROOT::Fit::EChisquareType::kPearson);; 1042 opt.fErrors1 = (type == ROOT::Fit::EChisquareType::kPearson); // not using observed errors in Pearson chi2; 1043 ; 1044 ROOT::Fit::DataRange range;; 1045 // get range of function; 1046 if (useRange) HFit::GetFunctionRange(f1,range);; 1047 // fill the data set; 1048 ROOT::Fit::BinData data(opt,range);; 1049 ROOT::Fit::FillData(data, &obj, &f1);; 1050 if (data.Size() == 0 ) {; 1051 Warning(""Chisquare"",""data set is empty - return -1"");; 1052 return -1;; 1053 }; 1054 ROOT::Math::WrappedMultiTF1 wf1(f1);; 1055 if (type == ROOT::Fit::EChisquareType::kPLikeRatio) {; 1056 // use the poisson log-lokelihood (Baker-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBackCompFitter.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218;",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:49808,Testability,log,log,49808,"ing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::Valuedouble Value() constreturn parameter valueDefinition ParameterSettings.h:90; ROOT::Fit::ParameterSettings::SetUpperLimitvoid SetUpperLimit(double up)set a single upper limitDefinition ParameterSettings.h:125; ROOT::Fit::ParameterSettings::Fixvoid Fix()fix the parameterDefinition ParameterSettings.h:116; ROOT::Fit::ParameterSettings::SetLowerLimitvoid SetLowerLimit(double low)set a single lower limitDefinition ParameterSettings.h:132; ROOT::Fit::PoissonLikelihoodFCNclass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish ...Definition PoissonLikelihoodFCN.h:46; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition MinimizerOptions.h:210; ROOT::Math::MinimizerOptions::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition MinimizerOptions.h:219; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:38802,Usability,simpl,simple,38802,"ions not valid for graphs; 993 HFit::CheckGraphFitOptions(foption);; 994 // TMultiGraph fitting; 995 return HFit::Fit(gr,f1,foption,moption,goption,range);; 996}; 997 ; 998TFitResultPtr ROOT::Fit::FitObject(TGraph2D * gr, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 999 // exclude options not valid for graphs; 1000 HFit::CheckGraphFitOptions(foption);; 1001 // TGraph2D fitting; 1002 return HFit::Fit(gr,f1,foption,moption,goption,range);; 1003}; 1004 ; 1005TFitResultPtr ROOT::Fit::FitObject(THnBase * s1, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 1006 // sparse histogram fitting; 1007 return HFit::Fit(s1,f1,foption,moption,goption,range);; 1008}; 1009 ; 1010 ; 1011 ; 1012// Int_t TGraph2D::DoFit(TF2 *f2 ,Option_t *option ,Option_t *goption) {; 1013// // internal graph2D fitting methods; 1014// Foption_t fitOption;; 1015// ROOT::Fit::FitOptionsMake(option,fitOption);; 1016 ; 1017// // create range and minimizer options with default values; 1018// ROOT::Fit::DataRange range(2);; 1019// ROOT::Math::MinimizerOptions minOption;; 1020// return ROOT::Fit::FitObject(this, f2 , fitOption , minOption, goption, range);; 1021// }; 1022 ; 1023 ; 1024// function to compute the simple chi2 for graphs and histograms; 1025 ; 1026 ; 1027double ROOT::Fit::Chisquare(const TH1 & h1, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type) {; 1028 return HFit::ComputeChi2(h1,f1,useRange, type);; 1029}; 1030 ; 1031double ROOT::Fit::Chisquare(const TGraph & g, TF1 & f1, bool useRange) {; 1032 return HFit::ComputeChi2(g,f1, useRange, ROOT::Fit::EChisquareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitImpl_8cxx_source.html:64607,Usability,simpl,simple,64607,"ROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinV",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:1624,Availability,error,error,1624,"*****************************/; 10 ; 11// Implementation file for class TH1Interface; 12 ; 13#include ""HFitInterface.h""; 14 ; 15#include ""Fit/BinData.h""; 16#include ""Fit/SparseData.h""; 17#include ""Fit/FitResult.h""; 18#include ""Math/IParamFunction.h""; 19 ; 20#include <vector>; 21 ; 22#include <cassert>; 23#include <cmath>; 24 ; 25#include ""TH1.h""; 26#include ""THnBase.h""; 27#include ""TF1.h""; 28#include ""TGraph2D.h""; 29#include ""TGraph.h""; 30#include ""TGraphErrors.h""; 31// #include ""TGraphErrors.h""; 32// #include ""TGraphBentErrors.h""; 33// #include ""TGraphAsymmErrors.h""; 34#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:1675,Availability,error,error,1675,"*****************************/; 10 ; 11// Implementation file for class TH1Interface; 12 ; 13#include ""HFitInterface.h""; 14 ; 15#include ""Fit/BinData.h""; 16#include ""Fit/SparseData.h""; 17#include ""Fit/FitResult.h""; 18#include ""Math/IParamFunction.h""; 19 ; 20#include <vector>; 21 ; 22#include <cassert>; 23#include <cmath>; 24 ; 25#include ""TH1.h""; 26#include ""THnBase.h""; 27#include ""TF1.h""; 28#include ""TGraph2D.h""; 29#include ""TGraph.h""; 30#include ""TGraphErrors.h""; 31// #include ""TGraphErrors.h""; 32// #include ""TGraphBentErrors.h""; 33// #include ""TGraphAsymmErrors.h""; 34#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:1771,Availability,error,error,1771,"e ""THnBase.h""; 27#include ""TF1.h""; 28#include ""TGraph2D.h""; 29#include ""TGraph.h""; 30#include ""TGraphErrors.h""; 31// #include ""TGraphErrors.h""; 32// #include ""TGraphBentErrors.h""; 33// #include ""TGraphAsymmErrors.h""; 34#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhi",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2030,Availability,error,errors,2030,"4#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2174,Availability,error,error,2174,"def DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetNa",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2264,Availability,error,error,2264,"namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetName());; 92 }; 93 // consider only range defined with-in histogram not oustide. Always exclude underflow/",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2283,Availability,error,error,2283,"ons; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetName());; 92 }; 93 // consider only range defined with-in histogram not oustide. Always exclude underflow/overflow; 94 hxfirst = std::min( std::max( ilow, hxfirst), hxlast+1) ;; 95 hxla",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2344,Availability,error,errors,2344,"ons; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetName());; 92 }; 93 // consider only range defined with-in histogram not oustide. Always exclude underflow/overflow; 94 hxfirst = std::min( std::max( ilow, hxfirst), hxlast+1) ;; 95 hxla",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2396,Availability,error,error,2396,"x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetName());; 92 }; 93 // consider only range defined with-in histogram not oustide. Always exclude underflow/overflow; 94 hxfirst = std::min( std::max( ilow, hxfirst), hxlast+1) ;; 95 hxlast = std::max( std::min( ihigh, hxlast), hxfirst-1) ;; 96 // exclude bins where range coverage is less than half bin width; 97 if (hxfirst < hxlast) {; 98 if ( axis->GetBinCenter(hxfirst) < xlow) hxfirst++;; 99 if ( axis->GetB",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:2418,Availability,error,error,2418,"x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetName());; 92 }; 93 // consider only range defined with-in histogram not oustide. Always exclude underflow/overflow; 94 hxfirst = std::min( std::max( ilow, hxfirst), hxlast+1) ;; 95 hxlast = std::max( std::min( ihigh, hxlast), hxfirst-1) ;; 96 // exclude bins where range coverage is less than half bin width; 97 if (hxfirst < hxlast) {; 98 if ( axis->GetBinCenter(hxfirst) < xlow) hxfirst++;; 99 if ( axis->GetB",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:7790,Availability,error,error,7790,"ypedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <= hzlast; ++binz) {; 212 if (useBinEdges) {; 213 x[2] = zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 }",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:7879,Availability,error,error,7879,"ypedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <= hzlast; ++binz) {; 212 if (useBinEdges) {; 213 x[2] = zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 }",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:8005,Availability,error,error,8005,"ypedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <= hzlast; ++binz) {; 212 if (useBinEdges) {; 213 x[2] = zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 }",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:8105,Availability,error,error,8105,"ypedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <= hzlast; ++binz) {; 212 if (useBinEdges) {; 213 x[2] = zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 }",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:8228,Availability,error,error,8228," binz = hzfirst; binz <= hzlast; ++binz) {; 212 if (useBinEdges) {; 213 x[2] = zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 } else {; 239 if (fitOpt.fErrors1); 240 dv.Add( x, value );; 241 else; 242 dv.Add( x, value, error );; 243 if (useBinEdges) {; 244 dv.AddBinUpEdge( s );; 245 }; 246 }; 247 ; 248 ; 249#ifdef DEBUG; 250 std::cout << ""bin "" << binx << "" add point "" << x[0] << "" "" << hfit->GetBinContent(binx) << std::endl;; 251#endif; 252 ; 253 } // end loop on z bins; 254 } // end loop on y bins; 255 } // end loop on x axis; 256 ; 257 ; 258#ifdef DEBUG; 259 std::cout << ""THFitInterface::FillData: Hist FitData size is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 2",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:8301,Availability,error,error,8301,"= zaxis->GetBinLowEdge(binz);; 214 s[2] = zaxis->GetBinUpEdge(binz);; 215 }; 216 else; 217 x[2] = zaxis->GetBinCenter(binz);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 } else {; 239 if (fitOpt.fErrors1); 240 dv.Add( x, value );; 241 else; 242 dv.Add( x, value, error );; 243 if (useBinEdges) {; 244 dv.AddBinUpEdge( s );; 245 }; 246 }; 247 ; 248 ; 249#ifdef DEBUG; 250 std::cout << ""bin "" << binx << "" add point "" << x[0] << "" "" << hfit->GetBinContent(binx) << std::endl;; 251#endif; 252 ; 253 } // end loop on z bins; 254 } // end loop on y bins; 255 } // end loop on x axis; 256 ; 257 ; 258#ifdef DEBUG; 259 std::cout << ""THFitInterface::FillData: Hist FitData size is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:8408,Availability,error,error,8408,"z);; 218 ; 219 // need to evaluate function to know about rejected points; 220 // hugly but no other solutions; 221 if (func != nullptr) {; 222 TF1::RejectPoint(false);; 223 (*func)( &x[0] ); // evaluate using stored function parameters; 224 if (TF1::RejectedPoint() ) continue;; 225 }; 226 ; 227 ; 228 double value = hfit->GetBinContent(binx, biny, binz);; 229 double error = hfit->GetBinError(binx, biny, binz);; 230 if (!HFitInterface::AdjustError(fitOpt,error,value) ) continue;; 231 ; 232 if (ndim == hdim -1) {; 233 // case of fitting a function with dimension -1; 234 // point error is bin width y / sqrt(N) where N is the number of entries in the bin; 235 // normalization of error will be wrong - but they will be rescaled in the fit; 236 if (hdim == 2) dv.Add( x, x[1], yaxis->GetBinWidth(biny) / error );; 237 if (hdim == 3) dv.Add( x, x[2], zaxis->GetBinWidth(binz) / error );; 238 } else {; 239 if (fitOpt.fErrors1); 240 dv.Add( x, value );; 241 else; 242 dv.Add( x, value, error );; 243 if (useBinEdges) {; 244 dv.AddBinUpEdge( s );; 245 }; 246 }; 247 ; 248 ; 249#ifdef DEBUG; 250 std::cout << ""bin "" << binx << "" add point "" << x[0] << "" "" << hfit->GetBinContent(binx) << std::endl;; 251#endif; 252 ; 253 } // end loop on z bins; 254 } // end loop on y bins; 255 } // end loop on x axis; 256 ; 257 ; 258#ifdef DEBUG; 259 std::cout << ""THFitInterface::FillData: Hist FitData size is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 double valxmax = valxmin;; 277 ; 278 for (unsigned int i = 1; i < n; ++ i) {; 279 double val;; 280 double x = *(data.GetP",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:15545,Availability,error,errors,15545," = binwidthx*n/4;; 437 ; 438 if (rmsy > 0); 439 rmsy = std::sqrt(rmsy);; 440 else; 441 rmsy = binwidthy*n/4;; 442 ; 443 ; 444 //if the distribution is really gaussian, the best approximation; 445 //is binwidx*allcha/(sqrtpi*rmsx); 446 //However, in case of non-gaussian tails, this underestimates; 447 //the normalisation constant. In this case the maximum value; 448 //is a better approximation.; 449 //We take the average of both quantities; 450 ; 451 double constant = 0.5 * (valmax+ binwidthx*allcha/(sqrtpi*rmsx))*; 452 (valmax+ binwidthy*allcha/(sqrtpi*rmsy));; 453 ; 454 f1->SetParameter(0,constant);; 455 f1->SetParameter(1,meanx);; 456 f1->SetParameter(2,rmsx);; 457 f1->SetParLimits(2,0,10*rmsx);; 458 f1->SetParameter(3,meany);; 459 f1->SetParameter(4,rmsy);; 460 f1->SetParLimits(4,0,10*rmsy);; 461 ; 462#ifdef DEBUG; 463 std::cout << ""2D Gaussian initial par values""; 464 << constant << "" ""; 465 << meanx << "" ""; 466 << rmsx; 467 << meany << "" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:15621,Availability,error,errors,15621," = binwidthx*n/4;; 437 ; 438 if (rmsy > 0); 439 rmsy = std::sqrt(rmsy);; 440 else; 441 rmsy = binwidthy*n/4;; 442 ; 443 ; 444 //if the distribution is really gaussian, the best approximation; 445 //is binwidx*allcha/(sqrtpi*rmsx); 446 //However, in case of non-gaussian tails, this underestimates; 447 //the normalisation constant. In this case the maximum value; 448 //is a better approximation.; 449 //We take the average of both quantities; 450 ; 451 double constant = 0.5 * (valmax+ binwidthx*allcha/(sqrtpi*rmsx))*; 452 (valmax+ binwidthy*allcha/(sqrtpi*rmsy));; 453 ; 454 f1->SetParameter(0,constant);; 455 f1->SetParameter(1,meanx);; 456 f1->SetParameter(2,rmsx);; 457 f1->SetParLimits(2,0,10*rmsx);; 458 f1->SetParameter(3,meany);; 459 f1->SetParameter(4,rmsy);; 460 f1->SetParLimits(4,0,10*rmsy);; 461 ; 462#ifdef DEBUG; 463 std::cout << ""2D Gaussian initial par values""; 464 << constant << "" ""; 465 << meanx << "" ""; 466 << rmsx; 467 << meany << "" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:15657,Availability,error,errors,15657," = binwidthx*n/4;; 437 ; 438 if (rmsy > 0); 439 rmsy = std::sqrt(rmsy);; 440 else; 441 rmsy = binwidthy*n/4;; 442 ; 443 ; 444 //if the distribution is really gaussian, the best approximation; 445 //is binwidx*allcha/(sqrtpi*rmsx); 446 //However, in case of non-gaussian tails, this underestimates; 447 //the normalisation constant. In this case the maximum value; 448 //is a better approximation.; 449 //We take the average of both quantities; 450 ; 451 double constant = 0.5 * (valmax+ binwidthx*allcha/(sqrtpi*rmsx))*; 452 (valmax+ binwidthy*allcha/(sqrtpi*rmsy));; 453 ; 454 f1->SetParameter(0,constant);; 455 f1->SetParameter(1,meanx);; 456 f1->SetParameter(2,rmsx);; 457 f1->SetParLimits(2,0,10*rmsx);; 458 f1->SetParameter(3,meany);; 459 f1->SetParameter(4,rmsy);; 460 f1->SetParLimits(4,0,10*rmsy);; 461 ; 462#ifdef DEBUG; 463 std::cout << ""2D Gaussian initial par values""; 464 << constant << "" ""; 465 << meanx << "" ""; 466 << rmsx; 467 << meany << "" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:15833,Availability,error,errors,15833,"er(1,meanx);; 456 f1->SetParameter(2,rmsx);; 457 f1->SetParLimits(2,0,10*rmsx);; 458 f1->SetParameter(3,meany);; 459 f1->SetParameter(4,rmsy);; 460 f1->SetParLimits(4,0,10*rmsy);; 461 ; 462#ifdef DEBUG; 463 std::cout << ""2D Gaussian initial par values""; 464 << constant << "" ""; 465 << meanx << "" ""; 466 << rmsx; 467 << meany << "" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 // case of asymmetric errors (by default fAsymErrors is true); 501 else if ( ( eyl != nullptr && eyh != nullptr) && fitOpt.fAsymErrors) {; 502 // check also if that all errors are non zero's; 503 int i = 0;; 504 bool zeroErrorX = true;; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = Bi",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:15983,Availability,error,errors,15983,""" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 // case of asymmetric errors (by default fAsymErrors is true); 501 else if ( ( eyl != nullptr && eyh != nullptr) && fitOpt.fAsymErrors) {; 502 // check also if that all errors are non zero's; 503 int i = 0;; 504 bool zeroErrorX = true;; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 52",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:16181,Availability,error,errors,16181,""" ""; 468 << rmsy; 469 << std::endl;; 470#endif; 471 ; 472}; 473 ; 474// filling fit data from TGraph objects; 475 ; 476BinData::ErrorType GetDataType(const TGraph * gr, DataOptions & fitOpt) {; 477 // get type of data for TGraph objects; 478 double *ex = gr->GetEX();; 479 double *ey = gr->GetEY();; 480 double * eyl = gr->GetEYlow();; 481 double * eyh = gr->GetEYhigh();; 482 ; 483 ; 484 // default case for graphs (when they have errors); 485 BinData::ErrorType type = BinData::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 // case of asymmetric errors (by default fAsymErrors is true); 501 else if ( ( eyl != nullptr && eyh != nullptr) && fitOpt.fAsymErrors) {; 502 // check also if that all errors are non zero's; 503 int i = 0;; 504 bool zeroErrorX = true;; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 52",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:16328,Availability,error,errors,16328,"Data::kValueError;; 486 // if all errors are zero set option of using errors to 1; 487 if (fitOpt.fErrors1 || ( ey == nullptr && ( eyl == nullptr || eyh == nullptr ) ) ) {; 488 type = BinData::kNoError;; 489 }; 490 // need to treat case when all errors are zero; 491 // note that by default fitOpt.fCoordError is true; 492 else if ( ex != nullptr && fitOpt.fCoordErrors) {; 493 // check that all errors are not zero; 494 int i = 0;; 495 while (i < gr->GetN() && type != BinData::kCoordError) {; 496 if (ex[i] > 0) type = BinData::kCoordError;; 497 ++i;; 498 }; 499 }; 500 // case of asymmetric errors (by default fAsymErrors is true); 501 else if ( ( eyl != nullptr && eyh != nullptr) && fitOpt.fAsymErrors) {; 502 // check also if that all errors are non zero's; 503 int i = 0;; 504 bool zeroErrorX = true;; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 528 int i = 0;; 529 bool zeroError = true;; 530 while (i < gr->GetN() && zeroError) {; 531 if (ey[i] > 0) zeroError = false;; 532 ++i;; 533 }; 534 if (zeroError) type = BinData::kNoError;; 535 }; 536 ; 537 ; 538#ifdef DEBUG; 539 std::cout << ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:17029,Availability,error,errors,17029,"; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 528 int i = 0;; 529 bool zeroError = true;; 530 while (i < gr->GetN() && zeroError) {; 531 if (ey[i] > 0) zeroError = false;; 532 ++i;; 533 }; 534 if (zeroError) type = BinData::kNoError;; 535 }; 536 ; 537 ; 538#ifdef DEBUG; 539 std::cout << ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data for TGraph2D object; 547 double *ex = gr->GetEX();; 548 double *ey = gr->GetEY();; 549 double *ez = gr->GetEZ();; 550 ; 551 // default case for graphs (when they have errors); 552 BinData::ErrorType type = BinData::kValueError;; 553 // if all errors are zero set option of using errors to 1; 554 if (fitOpt.fErrors1 || ez == nullptr ) {; 555 type = BinData::kNoError;; 556 }; 557 else if ( ex != nullptr && ey!=nullptr && fitOpt.fCoordErrors) {; 558 // check that all errors are not zero; 559 int i = 0;; 560 while (i < gr->GetN() && type != BinData::kCoordError) {; 561 if (ex[i] > 0 || ey[i] > 0) type = BinData::kCoordError;; 562 ++i;; 563 }; 564 }; 565 ; 566 ; 567#ifdef DEBUG; 568 std::cout << ""type is "" << type << "" graph2D type is "" << gr->IsA()->GetName() << std::endl;; 569#endif; 570 ; 571 retur",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:17756,Availability,error,errors,17756,"; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 528 int i = 0;; 529 bool zeroError = true;; 530 while (i < gr->GetN() && zeroError) {; 531 if (ey[i] > 0) zeroError = false;; 532 ++i;; 533 }; 534 if (zeroError) type = BinData::kNoError;; 535 }; 536 ; 537 ; 538#ifdef DEBUG; 539 std::cout << ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data for TGraph2D object; 547 double *ex = gr->GetEX();; 548 double *ey = gr->GetEY();; 549 double *ez = gr->GetEZ();; 550 ; 551 // default case for graphs (when they have errors); 552 BinData::ErrorType type = BinData::kValueError;; 553 // if all errors are zero set option of using errors to 1; 554 if (fitOpt.fErrors1 || ez == nullptr ) {; 555 type = BinData::kNoError;; 556 }; 557 else if ( ex != nullptr && ey!=nullptr && fitOpt.fCoordErrors) {; 558 // check that all errors are not zero; 559 int i = 0;; 560 while (i < gr->GetN() && type != BinData::kCoordError) {; 561 if (ex[i] > 0 || ey[i] > 0) type = BinData::kCoordError;; 562 ++i;; 563 }; 564 }; 565 ; 566 ; 567#ifdef DEBUG; 568 std::cout << ""type is "" << type << "" graph2D type is "" << gr->IsA()->GetName() << std::endl;; 569#endif; 570 ; 571 retur",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:17832,Availability,error,errors,17832,"; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 528 int i = 0;; 529 bool zeroError = true;; 530 while (i < gr->GetN() && zeroError) {; 531 if (ey[i] > 0) zeroError = false;; 532 ++i;; 533 }; 534 if (zeroError) type = BinData::kNoError;; 535 }; 536 ; 537 ; 538#ifdef DEBUG; 539 std::cout << ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data for TGraph2D object; 547 double *ex = gr->GetEX();; 548 double *ey = gr->GetEY();; 549 double *ez = gr->GetEZ();; 550 ; 551 // default case for graphs (when they have errors); 552 BinData::ErrorType type = BinData::kValueError;; 553 // if all errors are zero set option of using errors to 1; 554 if (fitOpt.fErrors1 || ez == nullptr ) {; 555 type = BinData::kNoError;; 556 }; 557 else if ( ex != nullptr && ey!=nullptr && fitOpt.fCoordErrors) {; 558 // check that all errors are not zero; 559 int i = 0;; 560 while (i < gr->GetN() && type != BinData::kCoordError) {; 561 if (ex[i] > 0 || ey[i] > 0) type = BinData::kCoordError;; 562 ++i;; 563 }; 564 }; 565 ; 566 ; 567#ifdef DEBUG; 568 std::cout << ""type is "" << type << "" graph2D type is "" << gr->IsA()->GetName() << std::endl;; 569#endif; 570 ; 571 retur",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:17868,Availability,error,errors,17868,"; 505 bool zeroErrorY = true;; 506 while (i < gr->GetN() && (zeroErrorX || zeroErrorY)) {; 507 double e2X = ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) );; 508 double e2Y = eyl[i] + eyh[i];; 509 zeroErrorX &= (e2X <= 0);; 510 zeroErrorY &= (e2Y <= 0);; 511 ++i;; 512 }; 513 if (zeroErrorX && zeroErrorY); 514 type = BinData::kNoError;; 515 else if (!zeroErrorX && zeroErrorY); 516 type = BinData::kCoordError;; 517 else if (zeroErrorX && !zeroErrorY) {; 518 type = BinData::kAsymError;; 519 fitOpt.fCoordErrors = false;; 520 }; 521 else {; 522 type = BinData::kAsymError;; 523 }; 524 }; 525 ; 526 // need to look also a case when all errors in y are zero; 527 if ( ey != nullptr && type != BinData::kCoordError ) {; 528 int i = 0;; 529 bool zeroError = true;; 530 while (i < gr->GetN() && zeroError) {; 531 if (ey[i] > 0) zeroError = false;; 532 ++i;; 533 }; 534 if (zeroError) type = BinData::kNoError;; 535 }; 536 ; 537 ; 538#ifdef DEBUG; 539 std::cout << ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data for TGraph2D object; 547 double *ex = gr->GetEX();; 548 double *ey = gr->GetEY();; 549 double *ez = gr->GetEZ();; 550 ; 551 // default case for graphs (when they have errors); 552 BinData::ErrorType type = BinData::kValueError;; 553 // if all errors are zero set option of using errors to 1; 554 if (fitOpt.fErrors1 || ez == nullptr ) {; 555 type = BinData::kNoError;; 556 }; 557 else if ( ex != nullptr && ey!=nullptr && fitOpt.fCoordErrors) {; 558 // check that all errors are not zero; 559 int i = 0;; 560 while (i < gr->GetN() && type != BinData::kCoordError) {; 561 if (ex[i] > 0 || ey[i] > 0) type = BinData::kCoordError;; 562 ++i;; 563 }; 564 }; 565 ; 566 ; 567#ifdef DEBUG; 568 std::cout << ""type is "" << type << "" graph2D type is "" << gr->IsA()->GetName() << std::endl;; 569#endif; 570 ; 571 retur",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:18057,Availability,error,errors,18057,"<< ""type is "" << type << "" graph type is "" << gr->IsA()->GetName() << std::endl;; 540#endif; 541 ; 542 return type;; 543}; 544 ; 545BinData::ErrorType GetDataType(const TGraph2D * gr, const DataOptions & fitOpt) {; 546 // get type of data for TGraph2D object; 547 double *ex = gr->GetEX();; 548 double *ey = gr->GetEY();; 549 double *ez = gr->GetEZ();; 550 ; 551 // default case for graphs (when they have errors); 552 BinData::ErrorType type = BinData::kValueError;; 553 // if all errors are zero set option of using errors to 1; 554 if (fitOpt.fErrors1 || ez == nullptr ) {; 555 type = BinData::kNoError;; 556 }; 557 else if ( ex != nullptr && ey!=nullptr && fitOpt.fCoordErrors) {; 558 // check that all errors are not zero; 559 int i = 0;; 560 while (i < gr->GetN() && type != BinData::kCoordError) {; 561 if (ex[i] > 0 || ey[i] > 0) type = BinData::kCoordError;; 562 ++i;; 563 }; 564 }; 565 ; 566 ; 567#ifdef DEBUG; 568 std::cout << ""type is "" << type << "" graph2D type is "" << gr->IsA()->GetName() << std::endl;; 569#endif; 570 ; 571 return type;; 572}; 573 ; 574 ; 575 ; 576void DoFillData ( BinData & dv, const TGraph * gr, BinData::ErrorType type, TF1 * func ) {; 577 // internal method to do the actual filling of the data; 578 // given a graph and a multigraph; 579 ; 580 // get fit option; 581 DataOptions & fitOpt = dv.Opt();; 582 ; 583 int nPoints = gr->GetN();; 584 double *gx = gr->GetX();; 585 double *gy = gr->GetY();; 586 ; 587 const DataRange & range = dv.Range();; 588 bool useRange = ( range.Size(0) > 0);; 589 double xmin = 0;; 590 double xmax = 0;; 591 range.GetRange(xmin,xmax);; 592 ; 593 dv.Initialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 6",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:19773,Availability,error,errors,19773,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:19939,Availability,error,errorY,19939,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:19990,Availability,error,error,19990,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20039,Availability,error,errors,20039,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20087,Availability,error,error,20087,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20186,Availability,error,errorY,20186,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20233,Availability,error,errorY,20233,"; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20340,Availability,error,errorY,20340,"; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20415,Availability,error,error,20415,"; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20434,Availability,error,errors,20434,"; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20453,Availability,error,errorX,20453,"; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20682,Availability,error,errorX,20682,"n parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20790,Availability,error,error,20790,"cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < n",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20833,Availability,error,errorY,20833,"cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < n",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:20939,Availability,error,error,20939,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21027,Availability,error,errorY,21027,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21073,Availability,error,error,21073,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21093,Availability,error,errorX,21093,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21107,Availability,error,errorY,21107,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21202,Availability,error,errors,21202,"s; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21236,Availability,error,errorX,21236,"< ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h1->GetBinContent(i)); 687 {; 688 int x,y,z;; 689 h1->GetBinXYZ(i, x, y, z);; 690 ; 691// std::cout << ""FILLDATA: h1("" << i << "")""; 692// << ""["" << h1->GetXaxis()->GetBinLowEdge(x) << ""-"" << h1->GetXaxis()->GetBinUpEdge(x) << ""]"";; 693// if",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21333,Availability,error,errors,21333,"< ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h1->GetBinContent(i)); 687 {; 688 int x,y,z;; 689 h1->GetBinXYZ(i, x, y, z);; 690 ; 691// std::cout << ""FILLDATA: h1("" << i << "")""; 692// << ""["" << h1->GetXaxis()->GetBinLowEdge(x) << ""-"" << h1->GetXaxis()->GetBinUpEdge(x) << ""]"";; 693// if",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21367,Availability,error,errorX,21367,"sym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h1->GetBinContent(i)); 687 {; 688 int x,y,z;; 689 h1->GetBinXYZ(i, x, y, z);; 690 ; 691// std::cout << ""FILLDATA: h1("" << i << "")""; 692// << ""["" << h1->GetXaxis()->GetBinLowEdge(x) << ""-"" << h1->GetXaxis()->GetBinUpEdge(x) << ""]"";; 693// if ( dim >= 2 ); 694// std::cout << ""["" << h1->GetYaxis()->GetBinLowEdge(y) << ""-"" << h1->GetYaxis()->GetBinUpEdge(y) << ""]"";; 695// if ( dim >= 3 ); ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:21375,Availability,error,errorY,21375,"sym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < ncells; ++i ) {; 681// printf(""i: %d; OF: %d; UF: %d; C: %f\n""; 682// , i; 683// , h1->IsBinOverflow(i) , h1->IsBinUnderflow(i); 684// , h1->GetBinContent(i));; 685 if ( !( h1->IsBinOverflow(i) || h1->IsBinUnderflow(i) ); 686 && h1->GetBinContent(i)); 687 {; 688 int x,y,z;; 689 h1->GetBinXYZ(i, x, y, z);; 690 ; 691// std::cout << ""FILLDATA: h1("" << i << "")""; 692// << ""["" << h1->GetXaxis()->GetBinLowEdge(x) << ""-"" << h1->GetXaxis()->GetBinUpEdge(x) << ""]"";; 693// if ( dim >= 2 ); 694// std::cout << ""["" << h1->GetYaxis()->GetBinLowEdge(y) << ""-"" << h1->GetYaxis()->GetBinUpEdge(y) << ""]"";; 695// if ( dim >= 3 ); ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:26052,Availability,error,error,26052,"bin volume, because sparse bins are merged together; 777 //if (!dopt.fIntegral) dopt.fBinVolume = true;; 778 dopt.fBinVolume = true;; 779 dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:26081,Availability,error,errors,26081,"bin volume, because sparse bins are merged together; 777 //if (!dopt.fIntegral) dopt.fBinVolume = true;; 778 dopt.fBinVolume = true;; 779 dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:26188,Availability,error,errors,26188,"dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print()",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:26588,Availability,error,errors,26588,"illData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIt",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:27916,Availability,error,errors,27916,"or from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIter next(grList);; 848 ; 849 BinData::ErrorType type = BinData::kNoError;; 850 TGraph *gr = nullptr;; 851 while ((gr = (TGraph*) next())) {; 852 BinData::ErrorType t = GetDataType(gr,fitOpt);; 853 if (t > type ) type = t;; 854 }; 855 // adjust option according to type; 856 fitOpt.fErrors1 = (type == BinData::kNoError);; 857 // use coordinate or asym errors in case option is set and type is consistent; 858 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError);; 859 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 860 ; 861 ; 862#ifdef DEBUG; 863 std::cout << ""Fitting MultiGraph of type "" << type << std::endl;; 864#endif; 865 ; 866 // fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:29136,Availability,error,errors,29136,"// fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,fitOpt);; 887 // adjust option according to type; 888 fitOpt.fErrors1 = (type == BinData::kNoError);; 889 fitOpt.fCoordErrors = (type == BinData::kCoordError);; 890 fitOpt.fAsymErrors = false; // a TGraph2D with asymmetric errors does not exist; 891 ; 892 int nPoints = gr->GetN();; 893 double *gx = gr->GetX();; 894 double *gy = gr->GetY();; 895 double *gz = gr->GetZ();; 896 ; 897 // if all errors are zero set option of using errors to 1; 898 if ( gr->GetEZ() == nullptr) fitOpt.fErrors1 = true;; 899 ; 900 double x[2];; 901 double ex[2];; 902 ; 903 // look at data range; 904 const DataRange & range = dv.Range();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::Rej",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:29306,Availability,error,errors,29306,"// fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,fitOpt);; 887 // adjust option according to type; 888 fitOpt.fErrors1 = (type == BinData::kNoError);; 889 fitOpt.fCoordErrors = (type == BinData::kCoordError);; 890 fitOpt.fAsymErrors = false; // a TGraph2D with asymmetric errors does not exist; 891 ; 892 int nPoints = gr->GetN();; 893 double *gx = gr->GetX();; 894 double *gy = gr->GetY();; 895 double *gz = gr->GetZ();; 896 ; 897 // if all errors are zero set option of using errors to 1; 898 if ( gr->GetEZ() == nullptr) fitOpt.fErrors1 = true;; 899 ; 900 double x[2];; 901 double ex[2];; 902 ; 903 // look at data range; 904 const DataRange & range = dv.Range();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::Rej",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:29342,Availability,error,errors,29342,"// fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,fitOpt);; 887 // adjust option according to type; 888 fitOpt.fErrors1 = (type == BinData::kNoError);; 889 fitOpt.fCoordErrors = (type == BinData::kCoordError);; 890 fitOpt.fAsymErrors = false; // a TGraph2D with asymmetric errors does not exist; 891 ; 892 int nPoints = gr->GetN();; 893 double *gx = gr->GetX();; 894 double *gy = gr->GetY();; 895 double *gz = gr->GetZ();; 896 ; 897 // if all errors are zero set option of using errors to 1; 898 if ( gr->GetEZ() == nullptr) fitOpt.fErrors1 = true;; 899 ; 900 double x[2];; 901 double ex[2];; 902 ; 903 // look at data range; 904 const DataRange & range = dv.Range();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::Rej",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30479,Availability,error,errorZ,30479,"ange();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30550,Availability,error,errorZ,30550,"ange();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30640,Availability,error,errorZ,30640,"; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values err",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30715,Availability,error,error,30715,"; 911 range.GetRange(xmin,xmax,ymin,ymax);; 912 ; 913 dv.Initialize(nPoints,2, type);; 914 ; 915 for ( int i = 0; i < nPoints; ++i) {; 916 ; 917 x[0] = gx[i];; 918 x[1] = gy[i];; 919 ; 920 //if (fitOpt.fUseRange && HFitInterface::IsPointOutOfRange(func, x) ) continue;; 921 if (useRangeX && ( x[0] < xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values err",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30863,Availability,error,errorZ,30863,"xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:31025,Availability,error,errorZ,31025,"xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:31704,Availability,error,error,31704,"kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();; 980 gr->SetPoint(ipoint, x[0], (*func)(x) );; 981 }; 982 return true;; 983}; 984 ; 985 ; 986} // end namespace Fit; 987 ; 988} // end namespace ROOT; BinData.h; FitResult.h; HFitInterface.h; IParamFunction.h; d#define d(i)Definition RSha256.hxx:102; s1#define s1(x)Definition RSha256.hxx:91; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; SparseData.h; TClass.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in wa",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:32558,Availability,error,error,32558,"ts with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();; 980 gr->SetPoint(ipoint, x[0], (*func)(x) );; 981 }; 982 return true;; 983}; 984 ; 985 ; 986} // end namespace Fit; 987 ; 988} // end namespace ROOT; BinData.h; FitResult.h; HFitInterface.h; IParamFunction.h; d#define d(i)Definition RSha256.hxx:102; s1#define s1(x)Definition RSha256.hxx:91; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; SparseData.h; TClass.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TF1.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; typeOption_t",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:34733,Availability,error,error,34733,"GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TGraph2D.h; TGraphErrors.h; TGraph.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; THnBase.h; TList.h; TMultiGraph.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::BinData::AddBinUpEdgevoid AddBinUpEdge(const double *xup)add the bin width data, a pointer to an array with the bin upper edge information.Definition BinData.cxx:613; ROOT::Fit::BinData::GetErrorTypeErrorType GetErrorType() constretrieve the errortypeDefinition BinData.h:562; ROOT::Fit::BinData::Addvoid Add(double x, double y)add one dim data with only coordinate and valuesDefinition BinData.cxx:408; ROOT::Fit::BinData::Initializevoid Initialize(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)Preallocate a data set with given size, dimension and error type.Definition BinData.h:122; ROOT::Fit::BinData::ErrorTypeErrorTypeDefinition BinData.h:56; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::BinData::kValueEr",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:35025,Availability,error,errortypeDefinition,35025,"sym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TGraph2D.h; TGraphErrors.h; TGraph.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; THnBase.h; TList.h; TMultiGraph.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::BinData::AddBinUpEdgevoid AddBinUpEdge(const double *xup)add the bin width data, a pointer to an array with the bin upper edge information.Definition BinData.cxx:613; ROOT::Fit::BinData::GetErrorTypeErrorType GetErrorType() constretrieve the errortypeDefinition BinData.h:562; ROOT::Fit::BinData::Addvoid Add(double x, double y)add one dim data with only coordinate and valuesDefinition BinData.cxx:408; ROOT::Fit::BinData::Initializevoid Initialize(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)Preallocate a data set with given size, dimension and error type.Definition BinData.h:122; ROOT::Fit::BinData::ErrorTypeErrorTypeDefinition BinData.h:56; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::BinData::kValueError@ kValueErrorDefinition BinData.h:56; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:35357,Availability,error,error,35357,"nsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TGraph2D.h; TGraphErrors.h; TGraph.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; THnBase.h; TList.h; TMultiGraph.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::BinData::AddBinUpEdgevoid AddBinUpEdge(const double *xup)add the bin width data, a pointer to an array with the bin upper edge information.Definition BinData.cxx:613; ROOT::Fit::BinData::GetErrorTypeErrorType GetErrorType() constretrieve the errortypeDefinition BinData.h:562; ROOT::Fit::BinData::Addvoid Add(double x, double y)add one dim data with only coordinate and valuesDefinition BinData.cxx:408; ROOT::Fit::BinData::Initializevoid Initialize(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)Preallocate a data set with given size, dimension and error type.Definition BinData.h:122; ROOT::Fit::BinData::ErrorTypeErrorTypeDefinition BinData.h:56; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::BinData::kValueError@ kValueErrorDefinition BinData.h:56; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitData::Si",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:37079,Availability,error,error,37079,"nge is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constget the i-th range for given coordinate.Definition DataRange.h:104; ROOT::Fit::FitData::Sizeunsigned int Size() constreturn number of fit pointsDefinition FitData.h:293; ROOT::Fit::FitData::NDimunsigned int NDim() constreturn coordinate data dimensionDefinition FitData.h:301; ROOT::Fit::FitData::Optconst DataOptions & Opt() constaccess to optionsDefinition FitData.h:309; ROOT::Fit::FitData::Rangeconst DataRange & Range() constaccess to rangeDefinition FitData.h:321; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::SparseData::Addvoid Add(std::vector< double > &min, std::vector< double > &max, const double content, const double error=1.0)Adds a new bin specified by the vectors.Definition SparseData.cxx:241; ROOT::Math::IParametricFunctionMultiDimTempl< double >; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::FindFixBinvirtual Int_t FindFixBin(Double_t x) constFind bin number corresponding to abscissa x.Definition TAxis.cxx:419; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetBinUpEdgevirtual Double_t GetBinUpEdge(Int_t bin) co",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:39337,Availability,error,error,39337," points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::RejectedPointstatic Bool_t RejectedPoint()See TF1::RejectPoint above.Definition TF1.cxx:3692; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefiniti",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:39460,Availability,error,error,39460,"ange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::RejectedPointstatic Bool_t RejectedPoint()See TF1::RejectPoint above.Definition TF1.cxx:3692; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the e",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:39682,Availability,error,error,39682,"or parameter ipar.Definition TF1.cxx:3507; TF1::RejectedPointstatic Bool_t RejectedPoint()See TF1::RejectPoint above.Definition TF1.cxx:3692; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:39912,Availability,error,error,39912,":677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:40058,Availability,error,error,40058,"le_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::GetEYhighvirtual Double_t * GetEYhigh() cons",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:40206,Availability,error,error,40206,":513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::GetEYhighvirtual Double_t * GetEYhigh() constDefinition TGraph.h:145; TGraph::Setvirtual void Set(Int_t n)Set number of points in the graph Existing coordinates are preserved New coordinates ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:40428,Availability,error,error,40428,"etErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::GetEYhighvirtual Double_t * GetEYhigh() constDefinition TGraph.h:145; TGraph::Setvirtual void Set(Int_t n)Set number of points in the graph Existing coordinates are preserved New coordinates above fNpoints a...Definition TGraph.cxx:2277; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::GetBinErrorvirtual Double_t GetBinError(I",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:41425,Availability,error,error,41425,"onst overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::GetEYhighvirtual Double_t * GetEYhigh() constDefinition TGraph.h:145; TGraph::Setvirtual void Set(Int_t n)Set number of points in the graph Existing coordinates are preserved New coordinates above fNpoints a...Definition TGraph.cxx:2277; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetBinXYZvirtual void GetBinXYZ(Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) constReturn binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function abo...Definition TH1.cxx:4974; TH1::GetNcellsvirtual Int_t GetNcells() constDefinition TH1.h:300; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::IsBinUnderflowBool_t IsBinUnderflow(Int_t bin, Int_t axis=0) constReturn true if the bin is underflow.Definition TH1.cxx:5214; TH1::IsBinOverflowBool_t IsBinOverflow(Int_t bin, Int_t axis=0) constReturn true if the bin is overflow.Definition TH1.cxx:5182; TH1::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn bin lower edge for 1D histogram.Definition TH1.cxx:9152; TH1::GetBinContentvirtual Double_t GetBinContent(Int_",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:43796,Availability,error,error,43796,"() constDefinition TMultiGraph.h:68; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::HFitInterface::ExamineRangevoid ExamineRange(const TAxis *axis, std::pair< double, double > range, int &hxfirst, int &hxlast)Definition HFitInterface.cxx:79; ROOT::Fit::HFitInterface::AdjustErrorbool AdjustError(const DataOptions &option, double &error, double value=1)Definition HFitInterface.cxx:60; ROOT::Fit::HFitInterface::IsPointOutOfRangebool IsPointOutOfRange(const TF1 *func, const double *x)Definition HFitInterface.cxx:54; ROOT::Fit::Init2DGausvoid Init2DGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero t...Definition HFitInterface.cxx:388; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; ROOT::Fit::InitExpovoid InitExpo(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for an exponential function given the fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:45615,Availability,error,errors,45615,"OOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:45651,Availability,error,errors,45651,"tial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:45771,Availability,error,errors,45771,"tial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:45796,Availability,avail,available,45796,"tial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:46417,Availability,error,errors,46417,"tial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:46450,Availability,avail,available,46450,"tial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitInterface.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:6042,Energy Efficiency,efficient,efficient,6042," the function range ??); 140 // to check if inclusion/exclusion at end/point; 141 const DataRange & range = dv.Range();; 142 if (range.Size(0) != 0) {; 143 HFitInterface::ExamineRange( hfit->GetXaxis(), range(0), hxfirst, hxlast);; 144 if (range.Size(0) > 1 ) {; 145 Warning(""ROOT::Fit::FillData"",""support only one range interval for X coordinate"");; 146 }; 147 }; 148 ; 149 if (hfit->GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hzfirst, hzlast);; 157 if (range.Size(2) > 1 ); 158 Warning(""ROOT::Fit::FillData"",""support only one range interval for Z coordinate"");; 159 }; 160 ; 161 ; 162 int n = (hxlast-hxfirst+1)*(hylast-hyfirst+1)*(hzlast-hzfirst+1);; 163 ; 164#ifdef DEBUG; 165 std::cout << ""THFitInterface: ifirst = "" << hxfirst << "" ilast = "" << hxlast; 166 << "" total bins "" << n; 167 << std::endl;; 168#endif; 169 ; 170 // reserve n for more efficient usage; 171 //dv.Data().reserve(n);; 172 ; 173 int hdim = hfit->GetDimension();; 174 int ndim = hdim;; 175 // case of function dimension less than histogram; 176 if (func !=nullptr && func->GetNdim() == hdim-1) ndim = hdim-1;; 177 ; 178 assert( ndim > 0 );; 179 //typedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = x",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:9588,Safety,avoid,avoid,9588,"ze is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 double valxmax = valxmin;; 277 ; 278 for (unsigned int i = 1; i < n; ++ i) {; 279 double val;; 280 double x = *(data.GetPoint(i,val) );; 281 if (x < xmin) {; 282 xmin = x;; 283 valxmin = val;; 284 }; 285 else if (x > xmax) {; 286 xmax = x;; 287 valxmax = val;; 288 }; 289 }; 290 ; 291 // avoid negative values of valxmin/valxmax; 292 if (valxmin <= 0 && valxmax > 0 ) valxmin = valxmax;; 293 else if (valxmax <=0 && valxmin > 0) valxmax = valxmin;; 294 else if (valxmin <=0 && valxmax <= 0) { valxmin = 1; valxmax = 1; }; 295 ; 296 double slope = std::log( valxmax/valxmin) / (xmax - xmin);; 297 double constant = std::log(valxmin) - slope * xmin;; 298 f1->SetParameters(constant, slope);; 299}; 300 ; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Compute Initial values of parameters for a gaussian; 304/// derived from function H1InitGaus defined in TH1.cxx; 305 ; 306void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1); 307{; 308 ; 309 static const double sqrtpi = 2.506628;; 310 ; 311 // - Compute mean value and RMS of the data; 312 unsigned int n = data.Size();; 313 if (n == 0) return;; 314 double sumx = 0;; 315 double sumx2 = 0;; 316 double allcha = 0;; 317 double valmax = 0;; 318 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 319 // to avoid binwidth = 0 set arbitrarly to 1; 320 double binwidth = 1;; 321 if ( rangex > 0) binwidth = rangex;; 322 double x0 = 0;; 323 for (unsigned int i = 0; i < n; ++ i) {; 324 double val;; 325 doub",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:10616,Safety,avoid,avoid,10616,"<=0 && valxmin > 0) valxmax = valxmin;; 294 else if (valxmin <=0 && valxmax <= 0) { valxmin = 1; valxmax = 1; }; 295 ; 296 double slope = std::log( valxmax/valxmin) / (xmax - xmin);; 297 double constant = std::log(valxmin) - slope * xmin;; 298 f1->SetParameters(constant, slope);; 299}; 300 ; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Compute Initial values of parameters for a gaussian; 304/// derived from function H1InitGaus defined in TH1.cxx; 305 ; 306void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1); 307{; 308 ; 309 static const double sqrtpi = 2.506628;; 310 ; 311 // - Compute mean value and RMS of the data; 312 unsigned int n = data.Size();; 313 if (n == 0) return;; 314 double sumx = 0;; 315 double sumx2 = 0;; 316 double allcha = 0;; 317 double valmax = 0;; 318 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 319 // to avoid binwidth = 0 set arbitrarly to 1; 320 double binwidth = 1;; 321 if ( rangex > 0) binwidth = rangex;; 322 double x0 = 0;; 323 for (unsigned int i = 0; i < n; ++ i) {; 324 double val;; 325 double x = *(data.GetPoint(i,val) );; 326 sumx += val*x;; 327 sumx2 += val*x*x;; 328 allcha += val;; 329 if (val > valmax) valmax = val;; 330 if (i > 0) {; 331 double dx = x - x0;; 332 if (dx < binwidth) binwidth = dx;; 333 }; 334 x0 = x;; 335 }; 336 ; 337 if (allcha <= 0) return;; 338 double mean = sumx/allcha;; 339 double rms = sumx2/allcha - mean*mean;; 340 ; 341 ; 342 if (rms > 0); 343 rms = std::sqrt(rms);; 344 else; 345 rms = binwidth*n/4;; 346 ; 347 ; 348 //if the distribution is really gaussian, the best approximation; 349 //is binwidx*allcha/(sqrtpi*rms); 350 //However, in case of non-gaussian tails, this underestimates; 351 //the normalisation constant. In this case the maximum value; 352 //is a better approximation.; 353 //We take the average of both quantities; 354 ; 355// printf(""valmax %f other %f bw %f allcha %f rms %f \n"",valmax, binwidth*allcha/(sqrtpi*rms),; 356// binwi",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:13215,Safety,avoid,avoid,13215,"(2,0,10*rms);; 376 ; 377 ; 378#ifdef DEBUG; 379 std::cout << ""Gaussian initial par values"" << constant << "" "" << mean << "" "" << rms << std::endl;; 380#endif; 381 ; 382}; 383 ; 384////////////////////////////////////////////////////////////////////////////////; 385/// Compute Initial values of parameters for a gaussian; 386/// derived from function H1InitGaus defined in TH1.cxx; 387 ; 388void Init2DGaus(const ROOT::Fit::BinData & data, TF1 * f1); 389{; 390 ; 391 static const double sqrtpi = 2.506628;; 392 ; 393 // - Compute mean value and RMS of the data; 394 unsigned int n = data.Size();; 395 if (n == 0) return;; 396 double sumx = 0, sumy = 0;; 397 double sumx2 = 0, sumy2 = 0;; 398 double allcha = 0;; 399 double valmax = 0;; 400 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 401 double rangey = data.Coords(n-1)[1] - data.Coords(0)[1];; 402 // to avoid binwidthx = 0 set arbitrarly to 1; 403 double binwidthx = 1, binwidthy = 1;; 404 if ( rangex > 0) binwidthx = rangex;; 405 if ( rangey > 0) binwidthy = rangey;; 406 double x0 = 0, y0 = 0;; 407 for (unsigned int i = 0; i < n; ++i) {; 408 double val;; 409 const double *coords = data.GetPoint(i,val);; 410 double x = coords[0], y = coords[1];; 411 sumx += val*x;; 412 sumy += val*y;; 413 sumx2 += val*x*x;; 414 sumy2 += val*y*y;; 415 allcha += val;; 416 if (val > valmax) valmax = val;; 417 if (i > 0) {; 418 double dx = x - x0;; 419 if (dx < binwidthx) binwidthx = dx;; 420 double dy = y - y0;; 421 if (dy < binwidthy) binwidthy = dy;; 422 }; 423 x0 = x;; 424 y0 = y;; 425 }; 426 ; 427 if (allcha <= 0) return;; 428 double meanx = sumx/allcha, meany = sumy/allcha;; 429 double rmsx = sumx2/allcha - meanx*meanx;; 430 double rmsy = sumy2/allcha - meany*meany;; 431 ; 432 ; 433 if (rmsx > 0); 434 rmsx = std::sqrt(rmsx);; 435 else; 436 rmsx = binwidthx*n/4;; 437 ; 438 if (rmsy > 0); 439 rmsy = std::sqrt(rmsy);; 440 else; 441 rmsy = binwidthy*n/4;; 442 ; 443 ; 444 //if the distribution is really gaussian, the best approximatio",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:19808,Safety,avoid,avoid,19808,"ialize(nPoints,1, type);; 594 ; 595#ifdef DEBUG; 596 std::cout << ""DoFillData: graph npoints = "" << nPoints << "" type "" << type << std::endl;; 597 if (func) {; 598 double a1,a2; func->GetRange(a1,a2); std::cout << ""func range "" << a1 << "" "" << a2 << std::endl;; 599 }; 600#endif; 601 ; 602 double x[1];; 603 for ( int i = 0; i < nPoints; ++i) {; 604 ; 605 x[0] = gx[i];; 606 ; 607 ; 608 if (useRange && ( x[0] < xmin || x[0] > xmax) ) continue;; 609 ; 610 // need to evaluate function to know about rejected points; 611 // hugly but no other solutions; 612 if (func) {; 613 TF1::RejectPoint(false);; 614 (*func)( x ); // evaluate using stored function parameters; 615 if (TF1::RejectedPoint() ) continue;; 616 }; 617 ; 618 ; 619 if (fitOpt.fErrors1); 620 dv.Add( gx[i], gy[i] );; 621 ; 622 // for the errors use the getters by index to avoid cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skip",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:4297,Testability,assert,assert,4297," end namespace HFitInterface; 105 ; 106 ; 107void FillData(BinData & dv, const TH1 * hfit, TF1 * func); 108{; 109 // Function to fill the binned Fit data structure from a TH1; 110 // The dimension of the data is the same of the histogram dimension; 111 // The function pointer is need in case of integral is used and to reject points; 112 // rejected in the function; 113 ; 114 // the TF1 pointer cannot be constant since EvalPar and InitArgs are not const methods; 115 ; 116 // get fit option; 117 const DataOptions & fitOpt = dv.Opt();; 118 ; 119 ; 120 // store instead of bin center the bin edges; 121 bool useBinEdges = fitOpt.fIntegral || fitOpt.fBinVolume;; 122 ; 123 assert(hfit != nullptr);; 124 ; 125 //std::cout << ""creating Fit Data from histogram "" << hfit->GetName() << std::endl;; 126 ; 127 int hxfirst = hfit->GetXaxis()->GetFirst();; 128 int hxlast = hfit->GetXaxis()->GetLast();; 129 ; 130 int hyfirst = hfit->GetYaxis()->GetFirst();; 131 int hylast = hfit->GetYaxis()->GetLast();; 132 ; 133 int hzfirst = hfit->GetZaxis()->GetFirst();; 134 int hzlast = hfit->GetZaxis()->GetLast();; 135 ; 136 // function by default has same range (use that one if requested otherwise use data one); 137 ; 138 ; 139 // get the range (add the function range ??); 140 // to check if inclusion/exclusion at end/point; 141 const DataRange & range = dv.Range();; 142 if (range.Size(0) != 0) {; 143 HFitInterface::ExamineRange( hfit->GetXaxis(), range(0), hxfirst, hxlast);; 144 if (range.Size(0) > 1 ) {; 145 Warning(""ROOT::Fit::FillData"",""support only one range interval for X coordinate"");; 146 }; 147 }; 148 ; 149 if (hfit->GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hz",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:6288,Testability,assert,assert,6288,"GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hzfirst, hzlast);; 157 if (range.Size(2) > 1 ); 158 Warning(""ROOT::Fit::FillData"",""support only one range interval for Z coordinate"");; 159 }; 160 ; 161 ; 162 int n = (hxlast-hxfirst+1)*(hylast-hyfirst+1)*(hzlast-hzfirst+1);; 163 ; 164#ifdef DEBUG; 165 std::cout << ""THFitInterface: ifirst = "" << hxfirst << "" ilast = "" << hxlast; 166 << "" total bins "" << n; 167 << std::endl;; 168#endif; 169 ; 170 // reserve n for more efficient usage; 171 //dv.Data().reserve(n);; 172 ; 173 int hdim = hfit->GetDimension();; 174 int ndim = hdim;; 175 // case of function dimension less than histogram; 176 if (func !=nullptr && func->GetNdim() == hdim-1) ndim = hdim-1;; 177 ; 178 assert( ndim > 0 );; 179 //typedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = xaxis->GetBinLowEdge(binx);; 197 s[0] = xaxis->GetBinUpEdge(binx);; 198 }; 199 else; 200 x[0] = xaxis->GetBinCenter(binx);; 201 ; 202 ; 203 for ( biny = hyfirst; biny <= hylast; ++biny) {; 204 if (useBinEdges) {; 205 x[1] = yaxis->GetBinLowEdge(biny);; 206 s[1] = yaxis->GetBinUpEdge(biny);; 207 }; 208 else; 209 x[1] = yaxis->GetBinCenter(biny);; 210 ; 211 for ( binz = hzfirst; binz <=",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:9852,Testability,log,log,9852,"ze is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 double valxmax = valxmin;; 277 ; 278 for (unsigned int i = 1; i < n; ++ i) {; 279 double val;; 280 double x = *(data.GetPoint(i,val) );; 281 if (x < xmin) {; 282 xmin = x;; 283 valxmin = val;; 284 }; 285 else if (x > xmax) {; 286 xmax = x;; 287 valxmax = val;; 288 }; 289 }; 290 ; 291 // avoid negative values of valxmin/valxmax; 292 if (valxmin <= 0 && valxmax > 0 ) valxmin = valxmax;; 293 else if (valxmax <=0 && valxmin > 0) valxmax = valxmin;; 294 else if (valxmin <=0 && valxmax <= 0) { valxmin = 1; valxmax = 1; }; 295 ; 296 double slope = std::log( valxmax/valxmin) / (xmax - xmin);; 297 double constant = std::log(valxmin) - slope * xmin;; 298 f1->SetParameters(constant, slope);; 299}; 300 ; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Compute Initial values of parameters for a gaussian; 304/// derived from function H1InitGaus defined in TH1.cxx; 305 ; 306void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1); 307{; 308 ; 309 static const double sqrtpi = 2.506628;; 310 ; 311 // - Compute mean value and RMS of the data; 312 unsigned int n = data.Size();; 313 if (n == 0) return;; 314 double sumx = 0;; 315 double sumx2 = 0;; 316 double allcha = 0;; 317 double valmax = 0;; 318 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 319 // to avoid binwidth = 0 set arbitrarly to 1; 320 double binwidth = 1;; 321 if ( rangex > 0) binwidth = rangex;; 322 double x0 = 0;; 323 for (unsigned int i = 0; i < n; ++ i) {; 324 double val;; 325 doub",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:9919,Testability,log,log,9919,"ze is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 double valxmax = valxmin;; 277 ; 278 for (unsigned int i = 1; i < n; ++ i) {; 279 double val;; 280 double x = *(data.GetPoint(i,val) );; 281 if (x < xmin) {; 282 xmin = x;; 283 valxmin = val;; 284 }; 285 else if (x > xmax) {; 286 xmax = x;; 287 valxmax = val;; 288 }; 289 }; 290 ; 291 // avoid negative values of valxmin/valxmax; 292 if (valxmin <= 0 && valxmax > 0 ) valxmin = valxmax;; 293 else if (valxmax <=0 && valxmin > 0) valxmax = valxmin;; 294 else if (valxmin <=0 && valxmax <= 0) { valxmin = 1; valxmax = 1; }; 295 ; 296 double slope = std::log( valxmax/valxmin) / (xmax - xmin);; 297 double constant = std::log(valxmin) - slope * xmin;; 298 f1->SetParameters(constant, slope);; 299}; 300 ; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Compute Initial values of parameters for a gaussian; 304/// derived from function H1InitGaus defined in TH1.cxx; 305 ; 306void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1); 307{; 308 ; 309 static const double sqrtpi = 2.506628;; 310 ; 311 // - Compute mean value and RMS of the data; 312 unsigned int n = data.Size();; 313 if (n == 0) return;; 314 double sumx = 0;; 315 double sumx2 = 0;; 316 double allcha = 0;; 317 double valmax = 0;; 318 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 319 // to avoid binwidth = 0 set arbitrarly to 1; 320 double binwidth = 1;; 321 if ( rangex > 0) binwidth = rangex;; 322 double x0 = 0;; 323 for (unsigned int i = 0; i < n; ++ i) {; 324 double val;; 325 doub",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:25773,Testability,assert,assert,25773," axis->GetXmin();; 769 xmax[i] = axis->GetXmax();; 770 }; 771 ; 772 // Put default options, needed for the likelihood fitting of sparse; 773 // data.; 774 ROOT::Fit::DataOptions& dopt = dv.Opt();; 775 //dopt.fUseEmpty = true;; 776 // when using sparse data need to set option to use normalized bin volume, because sparse bins are merged together; 777 //if (!dopt.fIntegral) dopt.fBinVolume = true;; 778 dopt.fBinVolume = true;; 779 dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 82",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:27042,Testability,assert,assert,27042,"n is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIter next(grList);; 848 ; 849 BinData::ErrorType type = BinData::kNoError;; 850 TGraph *gr = nullptr;; 851 while ((gr = (TGraph*) next())) {; 852 BinData::ErrorType t = GetDataType(gr,fitOpt);; 853 if (t > type ) type = t;; 854 }; 855 // adjust option according to type; 856 fitOpt.fErrors1 = (type == BinData::kNoError);; 857 // use coordinate or asym errors in case option is set and type is consistent; 858 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError);; 859 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 860 ; 861 ; 862#ifdef DEBUG; 863 std::cout << ""Fitting MultiGraph of type "" << type << s",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:27121,Testability,assert,assert,27121,"n is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIter next(grList);; 848 ; 849 BinData::ErrorType type = BinData::kNoError;; 850 TGraph *gr = nullptr;; 851 while ((gr = (TGraph*) next())) {; 852 BinData::ErrorType t = GetDataType(gr,fitOpt);; 853 if (t > type ) type = t;; 854 }; 855 // adjust option according to type; 856 fitOpt.fErrors1 = (type == BinData::kNoError);; 857 // use coordinate or asym errors in case option is set and type is consistent; 858 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError);; 859 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 860 ; 861 ; 862#ifdef DEBUG; 863 std::cout << ""Fitting MultiGraph of type "" << type << s",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:28777,Testability,assert,assert,28777,"itOpt);; 853 if (t > type ) type = t;; 854 }; 855 // adjust option according to type; 856 fitOpt.fErrors1 = (type == BinData::kNoError);; 857 // use coordinate or asym errors in case option is set and type is consistent; 858 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError);; 859 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 860 ; 861 ; 862#ifdef DEBUG; 863 std::cout << ""Fitting MultiGraph of type "" << type << std::endl;; 864#endif; 865 ; 866 // fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,fitOpt);; 887 // adjust option according to type; 888 fitOpt.fErrors1 = (type == BinData::kNoError);; 889 fitOpt.fCoordErrors = (type == BinData::kCoordError);; 890 fitOpt.fAsymErrors = false; // a TGraph2D with asymmetric errors does not exist; 891 ; 892 int nPoints = gr->GetN();; 893 double *gx = gr->GetX();; 894 double *gy = gr->GetY();; 895 double *gz = gr->GetZ();; 896 ; 897 // if all errors are zero set option of using errors to 1; 898 if ( gr->GetEZ() == nullptr) fitOpt.fErrors1 = true;; 899 ; 900 double x[2];; 901 double ex[2];; 902 ; 903 // look at data range; 904 const DataRange & range = dv.Range();; 905 bool useRangeX = ( range.Size(0) > 0);; 906 bool useRangeY = ( range.Size(1) > 0);; 907 double xmin = 0;; 908 double xmax = 0;; 909 double ymin = 0;; 910 double ymax = 0;; 911 range.GetRange(xmin,xmax,ymin,ymax);",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:30895,Testability,assert,assert,30895,"xmin || x[0] > xmax) ) continue;; 922 if (useRangeY && ( x[1] < ymin || x[1] > ymax) ) continue;; 923 ; 924 // need to evaluate function to know about rejected points; 925 // hugly but no other solutions; 926 if (func) {; 927 TF1::RejectPoint(false);; 928 (*func)( x ); // evaluate using stored function parameters; 929 if (TF1::RejectedPoint() ) continue;; 930 }; 931 ; 932 if (type == BinData::kNoError) {; 933 dv.Add( x, gz[i] );; 934 continue;; 935 }; 936 ; 937 double errorZ = gr->GetErrorZ(i);; 938 if (!HFitInterface::AdjustError(fitOpt,errorZ) ) continue;; 939 ; 940 if (type == BinData::kValueError) {; 941 dv.Add( x, gz[i], errorZ );; 942 }; 943 else if (type == BinData::kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:38358,Testability,test,tested,38358,"inCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition TAxis.cxx:518; TAxis::FindFixBinvirtual Int_t FindFixBin(Double_t x) constFind bin number corresponding to abscissa x.Definition TAxis.cxx:419; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetBinUpEdgevirtual Double_t GetBinUpEdge(Int_t bin) constReturn up edge of bin.Definition TAxis.cxx:528; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TF11-Dim function classDefinition TF1.h:233; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::RejectedPointstatic Bool_t RejectedPoint()See TF1::RejectPoint above.Definition TF1.cxx:3692; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8cxx_source.html:45469,Usability,simpl,simple,45469,"he fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Def",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
https://root.cern/doc/master/HFitInterface_8h.html:245,Integrability,depend,dependency,245,". ROOT: hist/hist/inc/HFitInterface.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Enumerations |; Functions ; HFitInterface.h File Reference. #include ""TFitResultPtr.h"". Include dependency graph for HFitInterface.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Fit;  Namespace for the fitting classes. ;  ; namespace  ROOT::Math;  . Enumerations; enum class  ROOT::Fit::EChisquareType { ROOT::Fit::kNeyman = 0; , ROOT::Fit::kPLikeRatio; , ROOT::Fit::kPearson; };  ; enum class  ROOT::Fit::EFitObjectType { ROOT::Fit::kHistogram; , ROOT::Fit::kGraph; };  . Functions; double ROOT::Fit::Chisquare (const TGraph &h1, TF1 &f1, bool useRange);  compute the chi2 value for a graph given a function (see TGraph::Chisquare) ;  ; double ROOT::Fit::Chisquare (const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type);  compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ;  ; void ROOT::Fit::FillData (BinData &dv, const TGraph *gr, TF1 *func=nullptr);  fill the data vector from a TGraph. ;  ; void ROOT::Fit::FillData (BinData &dv, const TGraph2D *gr, TF1 *func=nullptr);  fill the data vector from a TGraph2D. ;  ; void ROOT::Fit::FillData (BinData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1. ;  ; void ROOT::Fit::FillData (BinData &dv, const THnBase *hist, TF1 *func=nullptr);  fill the data vector from a THnBase. ;  ; void ROOT::Fit::FillData (BinData &dv, const TMultiGraph *gr, TF1 *func=nullptr);  fill the data vector from a TMultiGraph. ;  ; v",MatchSource.WIKI,doc/master/HFitInterface_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h.html
https://root.cern/doc/master/HFitInterface_8h.html:4236,Usability,simpl,simple,4236,"tion for a TH1 (called from TH1::Fit) ;  ; TFitResultPtr ROOT::Fit::FitObject (THnBase *s1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range);  fitting function for a THn / THnSparse (called from THnBase::Fit) ;  ; TFitResultPtr ROOT::Fit::FitObject (TMultiGraph *mg, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range);  fitting function for a MultiGraph (called from TMultiGraph::Fit) ;  ; void ROOT::Fit::FitOptionsMake (EFitObjectType type, const char *option, Foption_t &fitOption);  Decode list of options into fitOption. ;  ; bool ROOT::Fit::GetConfidenceIntervals (const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95);  compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr ;  ; void ROOT::Fit::Init2DGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; void ROOT::Fit::InitExpo (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ;  ; void ROOT::Fit::InitGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; TFitResultPtr ROOT::Fit::UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . histhistincHFitInterface.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h.html
https://root.cern/doc/master/HFitInterface_8h_source.html:8228,Availability,error,error,8228,"lor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TF11-Dim function classDefinition TF1.h:233; TF2A 2-Dim function with parameters.Definition TF2.h:29; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DGr",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
https://root.cern/doc/master/HFitInterface_8h_source.html:9328,Availability,error,error,9328,"range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TF11-Dim function classDefinition TF1.h:233; TF2A 2-Dim function with parameters.Definition TF2.h:29; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; THnBaseMultidimensional histogram base.Definition THnBase.h:43; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; MathNamespace for new Math classes and functions.; ROOT::Fit::FitObjectTFitResultPtr FitObject(TH1 *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)fitting function for a TH1 (called from TH1::Fit)Definition HFitImpl.cxx:972; ROOT::Fit::Chisquaredouble Chisquare(const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type)compute the chi2 value for an histogram given a function (see TH1::Chisquare for the ",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
https://root.cern/doc/master/HFitInterface_8h_source.html:637,Safety,avoid,avoid,637,". ROOT: hist/hist/inc/HFitInterface.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. HFitInterface.h. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Author: L. Moneta Thu Aug 31 10:40:20 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class HFitInterface; 12// set of free functions used to couple the ROOT data object with the fitting classes; 13 ; 14// avoid including this file when running CINT since free functions cannot be re-defined; 15 ; 16#ifndef ROOT_HFitInterface; 17#define ROOT_HFitInterface; 18 ; 19 ; 20class TH1;; 21class THnBase;; 22class TF1;; 23class TF2;; 24class TGraph;; 25class TGraphErrors;; 26class TGraph2D;; 27class TMultiGraph;; 28struct Foption_t;; 29 ; 30#include ""TFitResultPtr.h""; 31 ; 32namespace ROOT {; 33 ; 34 namespace Math {; 35 class MinimizerOptions;; 36 }; 37 ; 38 namespace Fit {; 39 ; 40 //class BinData;; 41 ; 42 class FitResult;; 43 class DataRange;; 44 class BinData;; 45 class UnBinData;; 46 class SparseData;; 47 ; 48 enum class EFitObjectType {; 49 kHistogram,; 50 kGraph; 51 };; 52 ; 53 enum class EChisquareType {; 54 kNeyman = 0,; 55 kPLikeRatio,; 56 kPearson; 57 };; 58 ; 59 ; 60 ; 61 /**; 62 Decode list of options into fitOption; 63 */; 64 void FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption);; 65 ; 66 /**; 67 fitting function for a TH1 (called from TH1::Fit); 68 */; 69 TFitResultPtr FitObject(TH1 * h1, TF1 *f1, Foption_t & option, const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range);; 70 ; 71 /**; 72 fitting function for a TGraph (called from TGraph::Fit); 73 */; 74 TFitResultPtr FitObject(TGraph * gr, TF1 *f1 , Foption_t & option , const ROOT::Math::MinimizerOptions & moption, co",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
https://root.cern/doc/master/HFitInterface_8h_source.html:5270,Usability,simpl,simple,5270," void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func = nullptr);; 130 ; 131 ; 132 /**; 133 fill the data vector from a TGraph. Pass also the TF1 function which is; 134 needed in case to exclude points rejected by the function; 135 */; 136 void FillData ( BinData & dv, const TGraph * gr, TF1 * func = nullptr);; 137 /**; 138 fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 139 needed in case to exclude points rejected by the function; 140 */; 141 void FillData ( BinData & dv, const TMultiGraph * gr, TF1 * func = nullptr);; 142 ; 143 ; 144 /**; 145 compute initial parameter for an exponential function given the fit data; 146 Set the constant and slope assuming a simple exponential going through xmin and xmax; 147 of the data set; 148 */; 149 void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1);; 150 ; 151 ; 152 /**; 153 compute initial parameter for gaussian function given the fit data; 154 Set the sigma limits for zero top 10* initial rms values; 155 Set the initial parameter values in the TF1; 156 */; 157 void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1);; 158 ; 159 /**; 160 compute initial parameter for 2D gaussian function given the fit data; 161 Set the sigma limits for zero top 10* initial rms values; 162 Set the initial parameter values in the TF1; 163 */; 164 void Init2DGaus(const ROOT::Fit::BinData & data, TF1 * f1);; 165 ; 166 /**; 167 compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr; 168 */; 169 bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & r, TGraphErrors * gr, double cl = 0.95);; 170 ; 171 /**; 172 compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation); 173 */; 174 double Chisquare(const TH1 & h1, TF1 & f1, bool useRange, EChisquareType type);; 175 ; 176 /**; 177 compute the chi2 value for a graph given a function (see TGraph::Chisquare); 178 */; 179 double Chisquare(const TGraph & h1, TF1 & f1, bo",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
https://root.cern/doc/master/HistoModels_8hxx_source.html:7983,Availability,error,error,7983,", const char *title, int nbinsx, double xlow, double xup, int nbinsy,; 177 const double *ybins, const char *option = """");; 178 TProfile2DModel(const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy,; 179 const double *ybins, const char *option = """");; 180 std::shared_ptr<::TProfile2D> GetProfile() const;; 181};; 182 ; 183} // ns RDF; 184 ; 185} // ns ROOT; 186 ; 187#endif // ROOT_RDFHISTOMODELS; h#define h(i)Definition RSha256.hxx:106; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TString.h; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH3D3-D histogram with a double per channel (see TH1 documentation)Definition TH3.h:363; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfileProfile Histogram.Definition TProfile.h:32; TStringBasic string class.Definition TString.h:139; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ROOT::RDF::TH1DModel::fNameTString fNameDefinition HistoModels.hxx:31; ROOT::RDF::TH1DModel::~TH1DModel~TH1DModel()Definition RDFHistoModels.cxx:114; ROOT::RDF::TH1DModel::GetHistogramstd::shared_ptr<::TH1D > GetHistogram() constDefinition RDFHistoModels.cxx:103; ROOT::RDF::TH1DModel::fXUpdouble fXUpDefinition HistoModels.hxx:35; ROOT::RDF::TH1DModel::fNbinsXint fNbinsXDefinition HistoModels.hxx:33; ROOT::RDF::TH1DModel::TH1DModelTH1DModel()=default; ROOT::RDF::TH1DModel::fXLowdouble fXLowDefinition HistoModels.hxx:34; ROOT::RDF::TH1DModel::fBinXEdgesstd::vector<",MatchSource.WIKI,doc/master/HistoModels_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HistoModels_8hxx_source.html
https://root.cern/doc/master/histpalettecolor_8C.html:762,Availability,error,error,762,". ROOT: tutorials/hist/histpalettecolor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. histpalettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ; When one of these options is given to TH1::Draw the histogram get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; In this example five histograms are displayed with palette coloring for lines and and marker. The histograms are drawn with markers and error bars and one can see the color of each histogram is picked inside the default palette kBird. ; void histpalettecolor(); {; auto C = new TCanvas();; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""Histogram drawn with full circles"",100,-4,4);; auto h2 = new TH1F(""h2"",""Histogram drawn with full squares"",100,-4,4);; auto h3 = new TH1F(""h3"",""Histogram drawn with full triangles up"",100,-4,4);; auto h4 = new TH1F(""h4"",""Histogram drawn with full triangles down"",100,-4,4);; auto h5 = new TH1F(""h5"",""Histogram drawn with empty circles"",100,-4,4);; ; TRandom3 rng;; Double_t px,py;; for (Int_t i = 0; i < 25000; i++) {; rng.Rannor(px,py);; h1->Fill(px,10.);; h2->Fill(px, 8.);; h3->Fill(px, 6.);; h4->Fill(px, 4.);; h5->Fill(px, 2.);; }; ; h1->SetMarkerStyle(kFullCircle);; h2->SetMarkerStyle(kFullSquare);; h3->SetMarkerStyle(kFullTriangleUp);; h4->SetMarkerStyle(kFullTriangleDown);; h5->SetMarkerStyle(kOpenCircle);; ; h1->Draw(""PLC PMC"");; h2->Draw(""SAME PLC PMC"");; h3->Draw(""SAME PLC PMC"");; h4->Draw(""SAME PLC PMC"");; h5->Draw(""SAME PLC PMC"");; ; gPad->BuildLegend();; }; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDe",MatchSource.WIKI,doc/master/histpalettecolor_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/histpalettecolor_8C.html
https://root.cern/doc/master/histpalettecolor_8C.html:1256,Availability,down,down,1256,"stpalettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ; When one of these options is given to TH1::Draw the histogram get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; In this example five histograms are displayed with palette coloring for lines and and marker. The histograms are drawn with markers and error bars and one can see the color of each histogram is picked inside the default palette kBird. ; void histpalettecolor(); {; auto C = new TCanvas();; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""Histogram drawn with full circles"",100,-4,4);; auto h2 = new TH1F(""h2"",""Histogram drawn with full squares"",100,-4,4);; auto h3 = new TH1F(""h3"",""Histogram drawn with full triangles up"",100,-4,4);; auto h4 = new TH1F(""h4"",""Histogram drawn with full triangles down"",100,-4,4);; auto h5 = new TH1F(""h5"",""Histogram drawn with empty circles"",100,-4,4);; ; TRandom3 rng;; Double_t px,py;; for (Int_t i = 0; i < 25000; i++) {; rng.Rannor(px,py);; h1->Fill(px,10.);; h2->Fill(px, 8.);; h3->Fill(px, 6.);; h4->Fill(px, 4.);; h5->Fill(px, 2.);; }; ; h1->SetMarkerStyle(kFullCircle);; h2->SetMarkerStyle(kFullSquare);; h3->SetMarkerStyle(kFullTriangleUp);; h4->SetMarkerStyle(kFullTriangleDown);; h5->SetMarkerStyle(kOpenCircle);; ; h1->Draw(""PLC PMC"");; h2->Draw(""SAME PLC PMC"");; h3->Draw(""SAME PLC PMC"");; h4->Draw(""SAME PLC PMC"");; h5->Draw(""SAME PLC PMC"");; ; gPad->BuildLegend();; }; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kFullTriangleDown@ kFullTriangleDownDefinition TAttMarker.h:56; kFullSquare@ kFullSquareDefinition TAttMarker.h:55",MatchSource.WIKI,doc/master/histpalettecolor_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/histpalettecolor_8C.html
https://root.cern/doc/master/hlabels1_8C.html:634,Testability,test,test,634,". ROOT: tutorials/hist/hlabels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 1-D histograms with alphanumeric labels . ; TCanvas *hlabels1(); {; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",""Otto"",; ""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetTopMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",3,0,3);; h->SetStats(0);; h->SetFillColor(38);; h->SetCanExtend(TH1::kAllAxes);; for (Int_t i=0;i<5000;i++) {; Int_t r = gRandom->Rndm()*20;; h->Fill(people[r],1);; }; h->LabelsDeflate();; h->Draw();; TPaveText *pt = new TPaveText(0.7,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TPaveTextA",MatchSource.WIKI,doc/master/hlabels1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlabels1_8C.html
https://root.cern/doc/master/hlabels2_8C.html:830,Testability,test,test,830,". ROOT: tutorials/hist/hlabels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 2-D histograms with alphanumeric labels. . ; TCanvas *hlabels2(); {; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",""May"",; ""June"",""July"",""August"",""September"",""October"",""November"",; ""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",; ""Otto"",""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",; ""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,600,600);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",3,0,3,2,0,2);; h->SetCanExtend(TH1::kAllAxes);; h->SetStats(0);; gRandom->SetSeed();; for (Int_t i=0;i<15000;i++) {; Int_t rx = gRandom->Rndm()*nx;; Int_t ry = gRandom->Rndm()*ny;; h->Fill(people[ry],month[rx],1);; }; h->LabelsDeflate(""X"");; h->LabelsDeflate(""Y"");; h->LabelsOption(""v"");; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH2F2-D histogram with a float per channel (se",MatchSource.WIKI,doc/master/hlabels2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlabels2_8C.html
https://root.cern/doc/master/hlGraph2_8C.html:4099,Modifiability,variab,variables,4099,"@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV4virtual Double_t * GetV4()Definition TTree.h:582; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; yDouble_t y[n]Definition legend1.C:",MatchSource.WIKI,doc/master/hlGraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html
https://root.cern/doc/master/hlGraph2_8C.html:3613,Usability,simpl,simplification,3613,", ""Canvas2"", 505, 0, 600, 400);; ntuple->Draw(""TMath::Sqrt(px*px + py*py + pz*pz)>>histo(100, 0, 15)"", cut);; ; // Must be last; ntuple->Draw(""px:py:pz:i"", cut, ""goff"");; }; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; kRed@ kRedDefinition Rtypes.h:66; kBlack@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *op",MatchSource.WIKI,doc/master/hlGraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html
https://root.cern/doc/master/hlGraph2_8C.html:4056,Usability,simpl,simple,4056,"@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV4virtual Double_t * GetV4()Definition TTree.h:582; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; yDouble_t y[n]Definition legend1.C:",MatchSource.WIKI,doc/master/hlGraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html
https://root.cern/doc/master/hlHisto1_8C.html:465,Deployability,update,update,465,". ROOT: tutorials/hist/hlHisto1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlHisto1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; This tutorial demonstrates how the highlight mechanism can be used on an histogram. ; A 2D histogram is booked an filled with a random gaussian distribution. Then an highlight method is connected to the histogram. Moving the mouse on the histogram will update the histogram title in real time according to the highlighted bin.; ; TText *info = nullptr;; ; void HighlightTitle(TVirtualPad *pad, TObject *obj, Int_t xhb, Int_t yhb); {; auto h2 = dynamic_cast<TH2F*>(obj);; if (!h2) return;; if (!h2->IsHighlight()) { // after highlight disabled; h2->SetTitle(""Disable highlight"");; return;; }; if (info) info->SetTitle("""");; TString t;; t.Form(""bin[%02d, %02d] (%5.2f, %5.2f) content %g"", xhb, yhb,; h2->GetXaxis()->GetBinCenter(xhb), h2->GetYaxis()->GetBinCenter(yhb),; h2->GetBinContent(xhb, yhb));; h2->SetTitle(t.Data());; pad->Update();; }; ; void hlHisto1(); {; auto c1 = new TCanvas();; c1->HighlightConnect(""HighlightTitle(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto h2 = new TH2F(""h2"", """", 50, -5.0, 5.0, 50, -5.0, 5.0);; for (Int_t i = 0; i < 10000; i++) h2->Fill(gRandom->Gaus(), gRandom->Gaus());; h2->Draw();; ; info = new TText(0.0, -4.0, ""please move the mouse over the frame"");; info->SetTextAlign(22);; info->SetTextColor(kRed+1);; info->SetBit(kCannotPick);; info->Draw();; c1->Update();; ; // call after update to apply changes in the histogram painter; h2->SetHighlight();; }; Int_tint Int_tDefinition RtypesCore.h:45; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definitio",MatchSource.WIKI,doc/master/hlHisto1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto1_8C.html
https://root.cern/doc/master/hlHisto1_8C.html:1535,Deployability,update,update,1535,"e according to the highlighted bin.; ; TText *info = nullptr;; ; void HighlightTitle(TVirtualPad *pad, TObject *obj, Int_t xhb, Int_t yhb); {; auto h2 = dynamic_cast<TH2F*>(obj);; if (!h2) return;; if (!h2->IsHighlight()) { // after highlight disabled; h2->SetTitle(""Disable highlight"");; return;; }; if (info) info->SetTitle("""");; TString t;; t.Form(""bin[%02d, %02d] (%5.2f, %5.2f) content %g"", xhb, yhb,; h2->GetXaxis()->GetBinCenter(xhb), h2->GetYaxis()->GetBinCenter(yhb),; h2->GetBinContent(xhb, yhb));; h2->SetTitle(t.Data());; pad->Update();; }; ; void hlHisto1(); {; auto c1 = new TCanvas();; c1->HighlightConnect(""HighlightTitle(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto h2 = new TH2F(""h2"", """", 50, -5.0, 5.0, 50, -5.0, 5.0);; for (Int_t i = 0; i < 10000; i++) h2->Fill(gRandom->Gaus(), gRandom->Gaus());; h2->Draw();; ; info = new TText(0.0, -4.0, ""please move the mouse over the frame"");; info->SetTextAlign(22);; info->SetTextColor(kRed+1);; info->SetBit(kCannotPick);; info->Draw();; c1->Update();; ; // call after update to apply changes in the histogram painter; h2->SetHighlight();; }; Int_tint Int_tDefinition RtypesCore.h:45; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Drawvirtual void Draw(Option_t *option=",MatchSource.WIKI,doc/master/hlHisto1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto1_8C.html
https://root.cern/doc/master/hlHisto3_8C.html:7367,Modifiability,variab,variables,7367,"111; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::IsHighlightvirtual Bool_t IsHighlight() constDefinition TH1.h:338; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::GetSelectedRowsvirtual Long64_t GetSelectedRows()Definition TTree.h:553; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all object",MatchSource.WIKI,doc/master/hlHisto3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html
https://root.cern/doc/master/hlHisto3_8C.html:5211,Usability,simpl,simplification,5211,"on RSha256.hxx:105; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kGreen@ kGreenDefinition Rtypes.h:66; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TAttLine::GetLineColorvirtual Color_t GetLineColor() constReturn the line color.Definition TAttLine.h:33; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph.cxx:1566; TGraph::GetYaxisTAxis * GetYaxis() constGet y axis of the graph.Definition TGraph.cxx:1575; TGraph::Fin",MatchSource.WIKI,doc/master/hlHisto3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html
https://root.cern/doc/master/hlHisto3_8C.html:7324,Usability,simpl,simple,7324,"111; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::IsHighlightvirtual Bool_t IsHighlight() constDefinition TH1.h:338; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::GetSelectedRowsvirtual Long64_t GetSelectedRows()Definition TTree.h:553; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all object",MatchSource.WIKI,doc/master/hlHisto3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html
https://root.cern/doc/master/hlHisto4_8C.html:2105,Modifiability,config,configure,2105,"->Clone(""hz"");; hz->SetTitle(TString::Format(""%s (zoomed)"", hz->GetTitle()));; hz->SetStats(kFALSE);; hz->Draw();; Canvas2->Update();; hz->SetHighlight(kFALSE);; }; ; Int_t zf = hz->GetNbinsX()*0.05; // zoom factor; hz->GetXaxis()->SetRange(xhb-zf, xhb+zf);; ; Canvas2->Modified();; Canvas2->Update();; }; ; void hlHisto4(); {; auto Canvas1 = new TCanvas(""Canvas1"", """", 0, 0, 600, 400);; Canvas1->HighlightConnect(""HighlightZoom(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto f1 = new TF1(""f1"", ""x*gaus(0) + [3]*abs(sin(x)/x)"", -50.0, 50.0);; f1->SetParameters(20.0, 4.0, 1.0, 20.0);; auto h1 = new TH1F(""h1"", ""Test random numbers"", 200, -50.0, 50.0);; h1->FillRandom(""f1"", 100000);; h1->Draw();; h1->Fit(f1, ""Q"");; gStyle->SetGridColor(kGray);; Canvas1->SetGrid();; ; info = new TText(0.0, h1->GetMaximum()*0.7, ""please move the mouse over the frame"");; info->SetTextSize(0.04);; info->SetTextAlign(22);; info->SetTextColor(kRed-1);; info->SetBit(kCannotPick);; info->Draw();; ; Canvas1->Update();; ; // configure highlight at the end when histogram is already painted; h1->SetHighlight();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kGray@ kGrayDefinition Rtypes.h:65; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TAxis::SetRangevirtual void SetRange(Int_t first=0, Int_t last=0)Set the viewing range for the axis using bin numbers.Definition TAxis.cxx:1052; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classD",MatchSource.WIKI,doc/master/hlHisto4_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto4_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:1777,Availability,robust,robust,1777,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:1659,Integrability,interface,interface,1659,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:1793,Integrability,interface,interface,1793,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:855,Security,access,access,855,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:967,Security,access,access,967,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:1126,Security,access,access,1126,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:228,Usability,simpl,simplest,228,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimpleReader_8C.html:1769,Usability,simpl,simple,1769,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
https://root.cern/doc/master/hsimple_8C.html:6309,Modifiability,variab,variables,6309,"ile-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteInt_t Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Pr",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:578,Security,access,access,578,". ROOT: tutorials/hsimple.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimple.C File ReferenceTutorials. Detailed Description; This program creates : . a one dimensional histogram; a two dimensional histogram; a profile histogram; a memory-resident ntuple. These objects are filled with some random numbers and saved on a file. If get=1 the macro returns a pointer to the TFile of ""hsimple.root"" if this file exists, otherwise it is created. The file ""hsimple.root"" is created in $ROOTSYS/tutorials if the caller has write access to this directory, otherwise the file is created in $PWD. ; hsimple : Real Time = 0.08 seconds Cpu Time = 0.08 seconds; (TFile *) 0x55fa02b55090; ; #include <TFile.h>; #include <TNtuple.h>; #include <TH2.h>; #include <TProfile.h>; #include <TCanvas.h>; #include <TFrame.h>; #include <TROOT.h>; #include <TSystem.h>; #include <TRandom3.h>; #include <TBenchmark.h>; #include <TInterpreter.h>; ; TFile *hsimple(Int_t getFile=0); {; TString filename = ""hsimple.root"";; TString dir = gROOT->GetTutorialDir();; dir.ReplaceAll(""/./"",""/"");; TFile *hfile = nullptr;; if (getFile) {; // if the argument getFile =1 return the file ""hsimple.root""; // if the file does not exist, it is created; TString fullPath = dir+""hsimple.root"";; if (!gSystem->AccessPathName(fullPath,kFileExists)) {; hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials; if (hfile) return hfile;; }; //otherwise try $PWD/hsimple.root; if (!gSystem->AccessPathName(""hsimple.root"",kFileExists)) {; hfile = TFile::Open(""hsimple.root""); //in current dir; if (hfile) return hfile;; }; }; //no hsimple.root file found. Must generate it !; //generate hsimple.root in current directory if we have write access; if (gSystem->AccessPathName(""."",kWritePermission)) {; printf(""you must run the script in a directory with write access\n"");; return nullptr;; }; hfile = (TFile*)gROOT->FindObject(filename); if (hfile) hfile->Close();; hfile = new TFile(filename,""RECRE",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:1742,Security,access,access,1742,"de <TFile.h>; #include <TNtuple.h>; #include <TH2.h>; #include <TProfile.h>; #include <TCanvas.h>; #include <TFrame.h>; #include <TROOT.h>; #include <TSystem.h>; #include <TRandom3.h>; #include <TBenchmark.h>; #include <TInterpreter.h>; ; TFile *hsimple(Int_t getFile=0); {; TString filename = ""hsimple.root"";; TString dir = gROOT->GetTutorialDir();; dir.ReplaceAll(""/./"",""/"");; TFile *hfile = nullptr;; if (getFile) {; // if the argument getFile =1 return the file ""hsimple.root""; // if the file does not exist, it is created; TString fullPath = dir+""hsimple.root"";; if (!gSystem->AccessPathName(fullPath,kFileExists)) {; hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials; if (hfile) return hfile;; }; //otherwise try $PWD/hsimple.root; if (!gSystem->AccessPathName(""hsimple.root"",kFileExists)) {; hfile = TFile::Open(""hsimple.root""); //in current dir; if (hfile) return hfile;; }; }; //no hsimple.root file found. Must generate it !; //generate hsimple.root in current directory if we have write access; if (gSystem->AccessPathName(""."",kWritePermission)) {; printf(""you must run the script in a directory with write access\n"");; return nullptr;; }; hfile = (TFile*)gROOT->FindObject(filename); if (hfile) hfile->Close();; hfile = new TFile(filename,""RECREATE"",""Demo ROOT file with histograms"");; ; // Create some histograms, a profile histogram and an ntuple; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; TH2F *hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; TProfile *hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo ntuple"",""px:py:pz:random:i"");; ; gBenchmark->Start(""hsimple"");; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; c1->SetFillColor(42);; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(6);; c1->GetFrame()->SetBorderMode(-1);; ; ; // Fill histograms randomly; TRandom3 randomNum;; Floa",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:1862,Security,access,access,1862,"le = nullptr;; if (getFile) {; // if the argument getFile =1 return the file ""hsimple.root""; // if the file does not exist, it is created; TString fullPath = dir+""hsimple.root"";; if (!gSystem->AccessPathName(fullPath,kFileExists)) {; hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials; if (hfile) return hfile;; }; //otherwise try $PWD/hsimple.root; if (!gSystem->AccessPathName(""hsimple.root"",kFileExists)) {; hfile = TFile::Open(""hsimple.root""); //in current dir; if (hfile) return hfile;; }; }; //no hsimple.root file found. Must generate it !; //generate hsimple.root in current directory if we have write access; if (gSystem->AccessPathName(""."",kWritePermission)) {; printf(""you must run the script in a directory with write access\n"");; return nullptr;; }; hfile = (TFile*)gROOT->FindObject(filename); if (hfile) hfile->Close();; hfile = new TFile(filename,""RECREATE"",""Demo ROOT file with histograms"");; ; // Create some histograms, a profile histogram and an ntuple; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; TH2F *hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; TProfile *hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo ntuple"",""px:py:pz:random:i"");; ; gBenchmark->Start(""hsimple"");; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; c1->SetFillColor(42);; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(6);; c1->GetFrame()->SetBorderMode(-1);; ; ; // Fill histograms randomly; TRandom3 randomNum;; Float_t px, py, pz;; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; randomNum.Rannor(px,py);; pz = px*px + py*py;; Float_t rnd = randomNum.Rndm();; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; ntuple->Fill(px,py,pz,rnd,i);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; ",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:7200,Security,access,access,7200,"eWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; AuthorRene Brun ; Definition in file hsimple.C. tutorialshsimple.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:7234,Security,access,access,7234,"eWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; AuthorRene Brun ; Definition in file hsimple.C. tutorialshsimple.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8C.html:6266,Usability,simpl,simple,6266,"ile-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteInt_t Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Pr",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
https://root.cern/doc/master/hsimple_8py.html:3404,Modifiability,variab,variables,3404,"dm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen, Enric Tejedor ; Definition in file hsimple.py. tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
https://root.cern/doc/master/hsimple_8py.html:1756,Performance,cache,cache,1756,"Create a new ROOT binary machine independent file.; # Note that this file may contain any kind of ROOT objects, histograms,; # pictures, graphics objects, detector geometries, tracks, events, etc..; # This file is now becoming the current directory.; ; hfile = gROOT.FindObject( 'py-hsimple.root' ); if hfile:; hfile.Close(); hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); ; # Create some histograms, a profile histogram and an ntuple; hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); ; # Set canvas/frame attributes.; hpx.SetFillColor( 48 ); ; gBenchmark.Start( 'hsimple' ); ; # Initialize random number generator.; gRandom.SetSeed(); rannor, rndm = gRandom.Rannor, gRandom.Rndm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Not",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
https://root.cern/doc/master/hsimple_8py.html:2569,Performance,cache,cache,2569,"); ; # Set canvas/frame attributes.; hpx.SetFillColor( 48 ); ; gBenchmark.Start( 'hsimple' ); ; # Initialize random number generator.; gRandom.SetSeed(); rannor, rndm = gRandom.Rannor, gRandom.Rndm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); Autho",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
https://root.cern/doc/master/hsimple_8py.html:956,Safety,detect,detector,956,". ROOT: tutorials/pyroot/hsimple.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; hsimple.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This program creates : . a one dimensional histogram; a two dimensional histogram; a profile histogram; a memory-resident ntuple. These objects are filled with some random numbers and saved on a file. ; from ROOT import TCanvas, TFile, TProfile, TNtuple, TH1F, TH2F; from ROOT import gROOT, gBenchmark, gRandom, gSystem; import ctypes; ; # Create a new canvas, and customize it.; c1 = TCanvas( 'c1', 'Dynamic Filling Example', 200, 10, 700, 500 ); c1.SetFillColor( 42 ); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 6 ); c1.GetFrame().SetBorderMode( -1 ); ; # Create a new ROOT binary machine independent file.; # Note that this file may contain any kind of ROOT objects, histograms,; # pictures, graphics objects, detector geometries, tracks, events, etc..; # This file is now becoming the current directory.; ; hfile = gROOT.FindObject( 'py-hsimple.root' ); if hfile:; hfile.Close(); hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); ; # Create some histograms, a profile histogram and an ntuple; hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); ; # Set canvas/frame attributes.; hpx.SetFillColor( 48 ); ; gBenchmark.Start( 'hsimple' ); ; # Initialize random number generator.; gRandom.SetSeed(); rannor, rndm = gRandom.Rannor, gRandom.Rndm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
https://root.cern/doc/master/hsimple_8py.html:3361,Usability,simpl,simple,3361,"dm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen, Enric Tejedor ; Definition in file hsimple.py. tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
https://root.cern/doc/master/hsimple_8py_source.html:3773,Modifiability,variab,variables,3773,"os = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all objects in this file.; 96hpx.SetFillColor( 0 ); 97hfile.Write(); 98hpx.SetFillColor( 48 ); 99c1.Modified(); 100c1.Update(); 101 ; 102# Note that the file is automatically closed when application terminates; 103# or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2). tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
https://root.cern/doc/master/hsimple_8py_source.html:1989,Performance,cache,cache,1989,"te that this file may contain any kind of ROOT objects, histograms,; 30# pictures, graphics objects, detector geometries, tracks, events, etc..; 31# This file is now becoming the current directory.; 32 ; 33hfile = gROOT.FindObject( 'py-hsimple.root' ); 34if hfile:; 35 hfile.Close(); 36hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); 37 ; 38# Create some histograms, a profile histogram and an ntuple; 39hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); 40hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); 41hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); 42ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); 43 ; 44# Set canvas/frame attributes.; 45hpx.SetFillColor( 48 ); 46 ; 47gBenchmark.Start( 'hsimple' ); 48 ; 49# Initialize random number generator.; 50gRandom.SetSeed(); 51rannor, rndm = gRandom.Rannor, gRandom.Rndm; 52 ; 53# For speed, bind and cache the Fill member functions,; 54histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all object",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
https://root.cern/doc/master/hsimple_8py_source.html:2900,Performance,cache,cache,2900,"alize random number generator.; 50gRandom.SetSeed(); 51rannor, rndm = gRandom.Rannor, gRandom.Rndm; 52 ; 53# For speed, bind and cache the Fill member functions,; 54histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all objects in this file.; 96hpx.SetFillColor( 0 ); 97hfile.Write(); 98hpx.SetFillColor( 48 ); 99c1.Modified(); 100c1.Update(); 101 ; 102# Note that the file is automatically closed when application terminates; 103# or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
https://root.cern/doc/master/hsimple_8py_source.html:1136,Safety,detect,detector,1136,"; Searching...; No Matches. hsimple.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_pyroot; 3## \notebook -js; 4## This program creates :; 5## - a one dimensional histogram; 6## - a two dimensional histogram; 7## - a profile histogram; 8## - a memory-resident ntuple; 9##; 10## These objects are filled with some random numbers and saved on a file.; 11##; 12## \macro_image; 13## \macro_code; 14##; 15## \author Wim Lavrijsen, Enric Tejedor; 16 ; 17from ROOT import TCanvas, TFile, TProfile, TNtuple, TH1F, TH2F; 18from ROOT import gROOT, gBenchmark, gRandom, gSystem; 19import ctypes; 20 ; 21# Create a new canvas, and customize it.; 22c1 = TCanvas( 'c1', 'Dynamic Filling Example', 200, 10, 700, 500 ); 23c1.SetFillColor( 42 ); 24c1.GetFrame().SetFillColor( 21 ); 25c1.GetFrame().SetBorderSize( 6 ); 26c1.GetFrame().SetBorderMode( -1 ); 27 ; 28# Create a new ROOT binary machine independent file.; 29# Note that this file may contain any kind of ROOT objects, histograms,; 30# pictures, graphics objects, detector geometries, tracks, events, etc..; 31# This file is now becoming the current directory.; 32 ; 33hfile = gROOT.FindObject( 'py-hsimple.root' ); 34if hfile:; 35 hfile.Close(); 36hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); 37 ; 38# Create some histograms, a profile histogram and an ntuple; 39hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); 40hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); 41hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); 42ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); 43 ; 44# Set canvas/frame attributes.; 45hpx.SetFillColor( 48 ); 46 ; 47gBenchmark.Start( 'hsimple' ); 48 ; 49# Initialize random number generator.; 50gRandom.SetSeed(); 51rannor, rndm = gRandom.Rannor, gRandom.Rndm; 52 ; 53# For speed, bind and cache the Fill member functions,; 54histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exe",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
https://root.cern/doc/master/hsimple_8py_source.html:3730,Usability,simpl,simple,3730,"os = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all objects in this file.; 96hpx.SetFillColor( 0 ); 97hfile.Write(); 98hpx.SetFillColor( 48 ); 99c1.Modified(); 100c1.Update(); 101 ; 102# Note that the file is automatically closed when application terminates; 103# or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2). tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
https://root.cern/doc/master/hstackpads_8C.html:566,Testability,test,test,566,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hstackpads_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html
https://root.cern/doc/master/hstackpads_8C.html:678,Testability,test,test,678,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hstackpads_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html
https://root.cern/doc/master/hstackpads_8C.html:790,Testability,test,test,790,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hstackpads_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html
https://root.cern/doc/master/hstack_8C.html:1146,Availability,error,errors,1146,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
https://root.cern/doc/master/hstack_8C.html:390,Testability,test,test,390,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
https://root.cern/doc/master/hstack_8C.html:576,Testability,test,test,576,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
https://root.cern/doc/master/hstack_8C.html:764,Testability,test,test,764,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
https://root.cern/doc/master/hstack_8C_source.html:1337,Availability,error,errors,1337,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
https://root.cern/doc/master/hstack_8C_source.html:506,Testability,test,test,506,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
https://root.cern/doc/master/hstack_8C_source.html:710,Testability,test,test,710,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
https://root.cern/doc/master/hstack_8C_source.html:916,Testability,test,test,916,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
https://root.cern/doc/master/hsumTimer_8C.html:1407,Testability,test,test,1407,"ults This program is a variant of the tutorial ""hsum"". It illustrates the use of Timers. ; Float_t progressRatio = 0.;; TSlider *slider = nullptr;; TCanvas *c1 = nullptr;; ; void hsumUpdate(); {; // called when Timer times out; if (slider) slider->SetRange(0., progressRatio);; c1->Modified();; c1->Update();; }; ; void hsumTimer(Int_t nfill=100000); {; c1 = new TCanvas(""c1"",""The HSUM example"",200,10,600,400);; c1->SetGrid();; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; total->SetMaximum(nfill/20.);; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; ; slider = new TSlider(""slider"",""test"",4.2,0,4.6,0.8*total->GetMaximum(),38);; slider->SetFillColor(46);; ; // Create a TTimer (hsumUpdate called every 300 msec); TTimer timer(""hsumUpdate()"",300);; timer.TurnOn();; ; // Fill histograms randomly; Float_t xs1, xs2, xmain;; gRandom->SetSeed();; for (Int_t i=0; i<nfill; i++) {; progressRatio = i * 1. / nfill;; if (gSystem->ProcessEvents()) break;; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; }; timer.TurnOff();; hsumUpdate();; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gSystemR__EXTE",MatchSource.WIKI,doc/master/hsumTimer_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsumTimer_8C.html
https://root.cern/doc/master/hsum_8C.html:1540,Testability,test,test,1540,"->SetGrid();; ; gBenchmark->Start(""hsum"");; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; TSlider *slider = nullptr;; ; // Fill histograms randomly; gRandom->SetSeed();; const Int_t kUPDATE = 500;; Float_t xs1, xs2, xmain;; for ( Int_t i=0; i<10000; i++) {; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) {; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; slider = new TSlider(""slider"",; ""test"",4.2,0,4.6,total->GetMaximum(),38);; slider->SetFillColor(46);; }; if (slider) slider->SetRange(0., 1.*i/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showv",MatchSource.WIKI,doc/master/hsum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8C.html
https://root.cern/doc/master/hsum_8py.html:2124,Deployability,update,update,2124,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
https://root.cern/doc/master/hsum_8py.html:1164,Performance,cache,cache,1164,"escription; Simple example illustrating how to use the C++ interpreter . ; from ROOT import TCanvas, TH1F, TSlider; from ROOT import gROOT, gBenchmark, gRandom; ; # Create a new canvas, and customize it.; c1 = TCanvas( 'c1', 'The HSUM example', 200, 10, 600, 400 ); c1.SetGrid();; ; gBenchmark.Start( 'hsum' ); ; # Create some histograms.; total = TH1F( 'total', 'This is the total distribution', 100, -4, 4 ); main = TH1F( 'main', 'Main contributor', 100, -4, 4 ); s1 = TH1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidde",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
https://root.cern/doc/master/hsum_8py.html:2021,Performance,cache,cache,2021,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
https://root.cern/doc/master/hsum_8py.html:1834,Testability,test,test,1834,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
https://root.cern/doc/master/hsum_8py_source.html:2401,Deployability,update,update,2401,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
https://root.cern/doc/master/hsum_8py_source.html:1321,Performance,cache,cache,1321,"ijsen; 10 ; 11from ROOT import TCanvas, TH1F, TSlider; 12from ROOT import gROOT, gBenchmark, gRandom; 13 ; 14# Create a new canvas, and customize it.; 15c1 = TCanvas( 'c1', 'The HSUM example', 200, 10, 600, 400 ); 16c1.SetGrid();; 17 ; 18gBenchmark.Start( 'hsum' ); 19 ; 20# Create some histograms.; 21total = TH1F( 'total', 'This is the total distribution', 100, -4, 4 ); 22main = TH1F( 'main', 'Main contributor', 100, -4, 4 ); 23s1 = TH1F( 's1', 'This is the first signal', 100, -4, 4 ); 24s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); 25total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
https://root.cern/doc/master/hsum_8py_source.html:2286,Performance,cache,cache,2286,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
https://root.cern/doc/master/hsum_8py_source.html:2073,Testability,test,test,2073,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
https://root.cern/doc/master/htest_8C.html:642,Testability,test,test,642,". ROOT: tutorials/tree/htest.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. htest.C File ReferenceTutorials » Tree tutorials. Detailed Description; Save histograms in Tree branches ; To run this example, do root > .L htest.C; root > htw(); root > htr1(); root > htr2(); root > htr3(). ; void htw() {; // Create a Tree with a few branches of type histogram; // 25000 entries are filled in the Tree; // For each entry, the copy of 3 histograms is written; // The data base will contain 75000 histograms.; gBenchmark->Start(""hsimple"");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""t",MatchSource.WIKI,doc/master/htest_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/htest_8C.html
https://root.cern/doc/master/htest_8C.html:1649,Testability,test,test,1649,");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void ",MatchSource.WIKI,doc/master/htest_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/htest_8C.html
https://root.cern/doc/master/htest_8C.html:2000,Testability,test,test,2000,", pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void htest() {; htw();; htr1();; htr2();; htr3();; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TB",MatchSource.WIKI,doc/master/htest_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/htest_8C.html
https://root.cern/doc/master/htest_8C.html:2484,Testability,test,test,2484,"le *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void htest() {; htw();; htr1();; htr2();; htr3();; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this h",MatchSource.WIKI,doc/master/htest_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/htest_8C.html
https://root.cern/doc/master/hvector_8C.html:5844,Energy Efficiency,allocate,allocate,5844,"r *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; c1return c1Definition legend1.C:41; AuthorThe ROOT Team ; Definition in file hvector.C. tutorialstreehvector.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/hvector_8C.html:2511,Modifiability,variab,variable,2511,"r();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {; ; Long64_t tentry = t->LoadTree(i);; bvpx->GetEntry(tentry);; ; for (UInt_t j = 0; j < vpx->size(); ++j) {; ; h->Fill(vpx->at(j));; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) h->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; }; ; // Since we passed the address of a local variable we need; // to remove it.; t->ResetBranchAddresses();; }; ; ; void hvector(); {; gBenchmark->Start(""hvector"");; ; write();; read();; ; gBenchmark->Show(""hvector"");; }; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TFile.h; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; TFrame.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition T",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/hvector_8C.html:1171,Usability,clear,clear,1171,"ls. Detailed Description; Write and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < ",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/hvector_8C.html:1185,Usability,clear,clear,1185,"escription; Write and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {;",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/hvector_8C.html:1199,Usability,clear,clear,1199,"te and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {; ; Long64_t ten",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/hvector_8C.html:1215,Usability,clear,clear,1215,".h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {; ; Long64_t tentry = t->LoadTree(i);; bvpx->GetEntry(tentry);; ; for (UInt_t j = 0; j < vpx->size(); ++j) {; ;",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
https://root.cern/doc/master/Ifit_8C.html:366,Availability,error,errors,366,". ROOT: tutorials/fit/Ifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Ifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example of a program to fit non-equidistant data points ; The fitting function fcn is a simple chisquare function The data consists of 5 data points (arrays x,y,z) + the errors in errorsz More details on the various functions or parameters for these functions can be obtained in an interactive ROOT session with:; Root > TMinuit *minuit = new TMinuit(10);; TMinuitDefinition TMinuit.h:27; Root > minuit->mnhelp(""*"") to see the list of possible keywords; Root > minuit->mnhelp(""SET"") explains most parameters; ; **********; ** 1 **SET ERR 1; **********; PARAMETER DEFINITIONS:; NO. NAME VALUE STEP SIZE LIMITS; 1 a1 3.00000e+00 1.00000e-01 no limits; 2 a2 1.00000e+00 1.00000e-01 no limits; 3 a3 1.00000e-01 1.00000e-02 no limits; 4 a4 1.00000e-02 1.00000e-03 no limits; **********; ** 2 **MIGRAD 500 1; **********; FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.; START MIGRAD MINIMIZATION. STRATEGY 1. CONVERGENCE WHEN EDM .LT. 1.00e-03; FCN=90047.1 FROM MIGRAD STATUS=INITIATE 14 CALLS 15 TOTAL; EDM= unknown STRATEGY= 1 NO ERROR MATRIX ; EXT PARAMETER CURRENT GUESS STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 a1 3.00000e+00 1.00000e-01 1.00000e-01 2.81614e+05; 2 a2 1.00000e+00 1.00000e-01 1.00000e-01 -2.73395e+05; 3 a3 1.00000e-01 1.00000e-02 1.00000e-02 -3.08505e+05; 4 a4 1.00000e-02 1.00000e-03 1.00000e-03 3.53925e+05; MIGRAD MINIMIZATION HAS CONVERGED.; MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.; EIGENVALUES OF SECOND-DERIVATIVE MATRIX:; -6.7573e-05 7.2964e-05 4.1376e-02 3.9586e+00; MINUIT WARNING IN HESSE ; ============== MATRIX FORCED POS-DEF BY ADDING 0.004026 TO DIAGONAL.; FCN=10.3986 FROM HESSE STATUS=NOT POSDEF 23 CALLS 112 TOTAL; EDM=0.11462 STRATEGY= 1 ERR MATRIX NOT POS-DEF; EXT PARAMETER APPROXIMATE STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATI",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:376,Availability,error,errorsz,376,". ROOT: tutorials/fit/Ifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Ifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example of a program to fit non-equidistant data points ; The fitting function fcn is a simple chisquare function The data consists of 5 data points (arrays x,y,z) + the errors in errorsz More details on the various functions or parameters for these functions can be obtained in an interactive ROOT session with:; Root > TMinuit *minuit = new TMinuit(10);; TMinuitDefinition TMinuit.h:27; Root > minuit->mnhelp(""*"") to see the list of possible keywords; Root > minuit->mnhelp(""SET"") explains most parameters; ; **********; ** 1 **SET ERR 1; **********; PARAMETER DEFINITIONS:; NO. NAME VALUE STEP SIZE LIMITS; 1 a1 3.00000e+00 1.00000e-01 no limits; 2 a2 1.00000e+00 1.00000e-01 no limits; 3 a3 1.00000e-01 1.00000e-02 no limits; 4 a4 1.00000e-02 1.00000e-03 no limits; **********; ** 2 **MIGRAD 500 1; **********; FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.; START MIGRAD MINIMIZATION. STRATEGY 1. CONVERGENCE WHEN EDM .LT. 1.00e-03; FCN=90047.1 FROM MIGRAD STATUS=INITIATE 14 CALLS 15 TOTAL; EDM= unknown STRATEGY= 1 NO ERROR MATRIX ; EXT PARAMETER CURRENT GUESS STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 a1 3.00000e+00 1.00000e-01 1.00000e-01 2.81614e+05; 2 a2 1.00000e+00 1.00000e-01 1.00000e-01 -2.73395e+05; 3 a3 1.00000e-01 1.00000e-02 1.00000e-02 -3.08505e+05; 4 a4 1.00000e-02 1.00000e-03 1.00000e-03 3.53925e+05; MIGRAD MINIMIZATION HAS CONVERGED.; MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.; EIGENVALUES OF SECOND-DERIVATIVE MATRIX:; -6.7573e-05 7.2964e-05 4.1376e-02 3.9586e+00; MINUIT WARNING IN HESSE ; ============== MATRIX FORCED POS-DEF BY ADDING 0.004026 TO DIAGONAL.; FCN=10.3986 FROM HESSE STATUS=NOT POSDEF 23 CALLS 112 TOTAL; EDM=0.11462 STRATEGY= 1 ERR MATRIX NOT POS-DEF; EXT PARAMETER APPROXIMATE STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATI",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:3221,Availability,error,errorz,3221,"-06 4.51168e+00; 2 a2 8.11244e-01 2.53808e-01 5.62214e-06 -2.40912e+00; 3 a3 1.71311e-01 4.00479e-01 4.93858e-06 -2.98641e+00; 4 a4 1.01582e-01 1.60309e-01 4.18094e-06 3.54102e+00; EXTERNAL ERROR MATRIX. NDIM= 25 NPAR= 4 ERR DEF=1; 1.064e-02 1.057e-02 1.068e-02 2.336e-03 ; 1.057e-02 6.442e-02 -7.900e-02 -3.414e-02 ; 1.068e-02 -7.900e-02 1.604e-01 6.356e-02 ; 2.336e-03 -3.414e-02 6.356e-02 2.570e-02 ; PARAMETER CORRELATION COEFFICIENTS ; NO. GLOBAL 1 2 3 4; 1 0.99974 1.000 0.404 0.259 0.141; 2 0.99985 0.404 1.000 -0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for paramet",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:3759,Availability,error,errorz,3759,"-06 4.51168e+00; 2 a2 8.11244e-01 2.53808e-01 5.62214e-06 -2.40912e+00; 3 a3 1.71311e-01 4.00479e-01 4.93858e-06 -2.98641e+00; 4 a4 1.01582e-01 1.60309e-01 4.18094e-06 3.54102e+00; EXTERNAL ERROR MATRIX. NDIM= 25 NPAR= 4 ERR DEF=1; 1.064e-02 1.057e-02 1.068e-02 2.336e-03 ; 1.057e-02 6.442e-02 -7.900e-02 -3.414e-02 ; 1.068e-02 -7.900e-02 1.604e-01 6.356e-02 ; 2.336e-03 -3.414e-02 6.356e-02 2.570e-02 ; PARAMETER CORRELATION COEFFICIENTS ; NO. GLOBAL 1 2 3 4; 1 0.99974 1.000 0.404 0.259 0.141; 2 0.99985 0.404 1.000 -0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for paramet",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:3993,Availability,error,errors,3993,"TS ; NO. GLOBAL 1 2 3 4; 1 0.99974 1.000 0.404 0.259 0.141; 2 0.99985 0.404 1.000 -0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""M",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4019,Availability,error,error,4019,"TS ; NO. GLOBAL 1 2 3 4; 1 0.99974 1.000 0.404 0.259 0.141; 2 0.99985 0.404 1.000 -0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""M",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4034,Availability,error,errorz,4034,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4044,Availability,error,error,4044,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4052,Availability,error,errorz,4052,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4062,Availability,error,error,4062,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4070,Availability,error,errorz,4070,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4080,Availability,error,error,4080,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4088,Availability,error,errorz,4088,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4098,Availability,error,error,4098,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4106,Availability,error,errorz,4106,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:4116,Availability,error,error,4116,"0.777 -0.839; 3 0.99995 0.259 -0.777 1.000 0.990; 4 0.99980 0.141 -0.839 0.990 1.000; ; #include ""TMinuit.h""; ; float z[5],x[5],y[5],errorz[5];; ; //______________________________________________________________________________; double func(float x,float y,double *par); {; double value=( (par[0]*par[0])/(x*x)-1)/ ( par[1]+par[2]*y-par[3]*y*y);; return value;; }; ; //______________________________________________________________________________; void fcn(int &npar, double *gin, double &f, double *par, int iflag); {; const int nbins = 5;; int i;; ; //calculate chisquare; double chisq = 0;; double delta;; for (i=0;i<nbins; i++) {; delta = (z[i]-func(x[i],y[i],par))/errorz[i];; chisq += delta*delta;; }; f = chisq;; }; ; //______________________________________________________________________________; void Ifit(); {; // The z values; z[0]=1;; z[1]=0.96;; z[2]=0.89;; z[3]=0.85;; z[4]=0.78;; // The errors on z values; float error = 0.01;; errorz[0]=error;; errorz[1]=error;; errorz[2]=error;; errorz[3]=error;; errorz[4]=error;; // the x values; x[0]=1.5751;; x[1]=1.5825;; x[2]=1.6069;; x[3]=1.6339;; x[4]=1.6706;; // the y values; y[0]=1.0642;; y[1]=0.97685;; y[2]=1.13168;; y[3]=1.128654;; y[4]=1.44016;; ; TMinuit *gMinuit = new TMinuit(5); //initialize TMinuit with a maximum of 5 params; gMinuit->SetFCN(fcn);; ; double arglist[10];; int ierflg = 0;; ; arglist[0] = 1;; gMinuit->mnexcm(""SET ERR"", arglist ,1,ierflg);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/Ifit_8C.html:284,Usability,simpl,simple,284,". ROOT: tutorials/fit/Ifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Ifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example of a program to fit non-equidistant data points ; The fitting function fcn is a simple chisquare function The data consists of 5 data points (arrays x,y,z) + the errors in errorsz More details on the various functions or parameters for these functions can be obtained in an interactive ROOT session with:; Root > TMinuit *minuit = new TMinuit(10);; TMinuitDefinition TMinuit.h:27; Root > minuit->mnhelp(""*"") to see the list of possible keywords; Root > minuit->mnhelp(""SET"") explains most parameters; ; **********; ** 1 **SET ERR 1; **********; PARAMETER DEFINITIONS:; NO. NAME VALUE STEP SIZE LIMITS; 1 a1 3.00000e+00 1.00000e-01 no limits; 2 a2 1.00000e+00 1.00000e-01 no limits; 3 a3 1.00000e-01 1.00000e-02 no limits; 4 a4 1.00000e-02 1.00000e-03 no limits; **********; ** 2 **MIGRAD 500 1; **********; FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.; START MIGRAD MINIMIZATION. STRATEGY 1. CONVERGENCE WHEN EDM .LT. 1.00e-03; FCN=90047.1 FROM MIGRAD STATUS=INITIATE 14 CALLS 15 TOTAL; EDM= unknown STRATEGY= 1 NO ERROR MATRIX ; EXT PARAMETER CURRENT GUESS STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 a1 3.00000e+00 1.00000e-01 1.00000e-01 2.81614e+05; 2 a2 1.00000e+00 1.00000e-01 1.00000e-01 -2.73395e+05; 3 a3 1.00000e-01 1.00000e-02 1.00000e-02 -3.08505e+05; 4 a4 1.00000e-02 1.00000e-03 1.00000e-03 3.53925e+05; MIGRAD MINIMIZATION HAS CONVERGED.; MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.; EIGENVALUES OF SECOND-DERIVATIVE MATRIX:; -6.7573e-05 7.2964e-05 4.1376e-02 3.9586e+00; MINUIT WARNING IN HESSE ; ============== MATRIX FORCED POS-DEF BY ADDING 0.004026 TO DIAGONAL.; FCN=10.3986 FROM HESSE STATUS=NOT POSDEF 23 CALLS 112 TOTAL; EDM=0.11462 STRATEGY= 1 ERR MATRIX NOT POS-DEF; EXT PARAMETER APPROXIMATE STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATI",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
https://root.cern/doc/master/IFunction_8h_source.html:1145,Energy Efficiency,adapt,adapter,1145,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:7205,Energy Efficiency,efficient,efficient,7205,"he gradient of a; 158 multi-dimensional function.; 159 Three methods are provided:; 160 - Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; 161 - Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; 162 - FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/; 163 ; 164 @ingroup GenFunc; 165 */; 166 ; 167 template <class T>; 168 class IGradientFunctionMultiDimTempl : virtual public IBaseFunctionMultiDimTempl<T> {; 169 ; 170 public:; 171 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 172 typedef IGradientFunctionMultiDimTempl<T> BaseGrad;; 173 ; 174 ; 175 /// Evaluate all the vector of function derivatives (gradient) at a point x.; 176 /// Derived classes must re-implement it if more efficient than evaluating one at a time; 177 virtual void Gradient(const T *x, T *grad) const; 178 {; 179 unsigned int ndim = NDim();; 180 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 181 grad[icoord] = Derivative(x, icoord);; 182 }; 183 }; 184 ; 185 /// In some cases, the gradient algorithm will use information from the previous step, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Deri",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:8322,Energy Efficiency,efficient,efficient,8322," 179 unsigned int ndim = NDim();; 180 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 181 grad[icoord] = Derivative(x, icoord);; 182 }; 183 }; 184 ; 185 /// In some cases, the gradient algorithm will use information from the previous step, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Derived class should implement this method if performances play an important role and if it is faster to; 201 /// evaluate value and derivative at the same time; 202 virtual void FdF(const T *x, T &f, T *df) const; 203 {; 204 f = BaseFunc::operator()(x);; 205 Gradient(x, df);; 206 }; 207 ; 208 /// Return the partial derivative with respect to the passed coordinate.; 209 T Derivative(const T *x, unsigned int icoord = 0) const { return DoDerivative(x, icoord); }; 210 ; 211 /// In some cases, the derivative algorithm will use information from the previous step, these can be passed; 212 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 213 /// so that these can be passed forward again as well at the call site, if necessary.; 214 T Derivative(const T *x, unsigned int icoord, T *previous_grad, T *previous_g2,; 215 T *previous_gstep) const; 216 {; 217 return DoDeri",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:12084,Energy Efficiency,efficient,efficient,12084,"n, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class.; 289 virtual double DoDerivative(double x) const = 0;; 290 };; 291 ; 292 ; 293 ; 294 } // namespace Math; 295} // namespace ROOT; 296 ; 297#endif /* ROOT_Math_IFunction */; IFunctionfwd.h; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition ",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:507,Integrability,interface,interfaces,507,". ROOT: math/mathcore/inc/Math/IFunction.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. IFunction.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying f",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:1145,Integrability,adapter,adapter,1145,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:1183,Integrability,wrap,wrap,1183,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:1236,Integrability,interface,interface,1236,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:1978,Integrability,interface,interface,1978,"s in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtual method DoEval(const double *) for the; 55 function evaluation in addition to NDim() and Clone().; 56 ; 57 @ingroup GenFunc; 58 */; 59 ; 60 template<class T>; 61 class IBaseFunctionMultiDimTempl {; 62 ; 63 public:; 64 ; 65 typedef T BackendType;; 66 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 67 ; 68 virtual ~IBaseFunctionMultiDimTempl() = default;; 69 ; 70 /// Clone a function.; 71 /// Each derived class must implement their version of the Clone method.; 72 virtual IBaseFunctionMultiDimTempl<T> *Clone() const = 0;; 73 ; 74 /// Retrieve the dimension of the function.; 75 virtual unsigned int NDim() const = 0;; 76 ; 77 /// Evaluate the function at a point x[].; 78 /// Use the pure virtual private method DoEval which must be implemented by the sub-classes.; 79 T operator()(const T *x) const { return DoEval(x); }; 80 ; 81#ifdef LATER; 82",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:2058,Integrability,interface,interface,2058,"s in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtual method DoEval(const double *) for the; 55 function evaluation in addition to NDim() and Clone().; 56 ; 57 @ingroup GenFunc; 58 */; 59 ; 60 template<class T>; 61 class IBaseFunctionMultiDimTempl {; 62 ; 63 public:; 64 ; 65 typedef T BackendType;; 66 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 67 ; 68 virtual ~IBaseFunctionMultiDimTempl() = default;; 69 ; 70 /// Clone a function.; 71 /// Each derived class must implement their version of the Clone method.; 72 virtual IBaseFunctionMultiDimTempl<T> *Clone() const = 0;; 73 ; 74 /// Retrieve the dimension of the function.; 75 virtual unsigned int NDim() const = 0;; 76 ; 77 /// Evaluate the function at a point x[].; 78 /// Use the pure virtual private method DoEval which must be implemented by the sub-classes.; 79 T operator()(const T *x) const { return DoEval(x); }; 80 ; 81#ifdef LATER; 82",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:4003,Integrability,interface,interface,4003,"#ifdef LATER; 82 /// Template method to evaluate the function using the begin of an iterator.; 83 /// User is responsible to provide correct size for the iterator.; 84 template <class Iterator>; 85 T operator()(const Iterator it) const { return DoEval(&(*it)); }; 86#endif; 87 ; 88 // Indicate whether this class supports gradient calculations, i.e.,; 89 // if it inherits from ROOT::Math::IGradientFunctionMultiDim.; 90 virtual bool HasGradient() const { return false; }; 91 ; 92 private:; 93 ; 94 /// Implementation of the evaluation function. Must be implemented by derived classes.; 95 virtual T DoEval(const T *x) const = 0;; 96 };; 97 ; 98 ; 99//___________________________________________________________________________________; 100 /**; 101 Interface (abstract class) for generic functions objects of one-dimension; 102 Provides a method to evaluate the function given a value (simple double); 103 by implementing operator() (const double ).; 104 In addition it defines the interface for copying functions via the pure virtual method Clone().; 105 Derived classes must implement the pure virtual private method DoEval(double ) for the; 106 function evaluation in addition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ; 114 public:; 115 ; 116 typedef IBaseFunctionOneDim BaseFunc;; 117 ; 118 virtual ~IBaseFunctionOneDim() = default;; 119 ; 120 /// Clone a function.; 121 /// Each derived class will implement their version of the private DoClone method.; 122 virtual IBaseFunctionOneDim *Clone() const = 0;; 123 ; 124 /// Evaluate the function at a point x.; 125 /// Use the a pure virtual private method DoEval which must be implemented by sub-classes.; 126 double operator()(double x) const { return DoEval(x); }; 127 ; 128 /// Evaluate the function at a point x[].; 129 /// Compatible method with multi-dimensional functions.; 130 do",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:4221,Integrability,interface,interface,4221,"it inherits from ROOT::Math::IGradientFunctionMultiDim.; 90 virtual bool HasGradient() const { return false; }; 91 ; 92 private:; 93 ; 94 /// Implementation of the evaluation function. Must be implemented by derived classes.; 95 virtual T DoEval(const T *x) const = 0;; 96 };; 97 ; 98 ; 99//___________________________________________________________________________________; 100 /**; 101 Interface (abstract class) for generic functions objects of one-dimension; 102 Provides a method to evaluate the function given a value (simple double); 103 by implementing operator() (const double ).; 104 In addition it defines the interface for copying functions via the pure virtual method Clone().; 105 Derived classes must implement the pure virtual private method DoEval(double ) for the; 106 function evaluation in addition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ; 114 public:; 115 ; 116 typedef IBaseFunctionOneDim BaseFunc;; 117 ; 118 virtual ~IBaseFunctionOneDim() = default;; 119 ; 120 /// Clone a function.; 121 /// Each derived class will implement their version of the private DoClone method.; 122 virtual IBaseFunctionOneDim *Clone() const = 0;; 123 ; 124 /// Evaluate the function at a point x.; 125 /// Use the a pure virtual private method DoEval which must be implemented by sub-classes.; 126 double operator()(double x) const { return DoEval(x); }; 127 ; 128 /// Evaluate the function at a point x[].; 129 /// Compatible method with multi-dimensional functions.; 130 double operator()(const double *x) const { return DoEval(*x); }; 131 ; 132 // Indicate whether this class supports gradient calculations, i.e.,; 133 // if it inherits from ROOT::Math::IGradientFunctionOneDim.; 134 virtual bool HasGradient() const { return false; }; 135 ; 136 private:; 137 ; 138 /// implementation of the evaluation function. Must be implemented",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:6311,Integrability,interface,interface,6311,"on. Must be implemented by derived classes; 139 virtual double DoEval(double x) const = 0;; 140 };; 141 ; 142 ; 143//-------- GRAD functions---------------------------; 144 ; 145 ; 146 ; 147//___________________________________________________________________________________; 148 /**; 149 Interface (abstract class) for multi-dimensional functions providing a gradient calculation.; 150 The method ROOT::Math::IFunction::Gradient calculates the full gradient vector,; 151 ROOT::Math::IFunction::Derivative calculates the partial derivative for each coordinate and; 152 ROOT::Math::Fdf calculates the gradient and the function value at the same time.; 153 The pure private virtual method DoDerivative() must be implemented by the derived classes, while; 154 Gradient and FdF are by default implemented using DoDerivative, butthey can be overloaded by the; 155 derived classes to improve the efficiency in the derivative calculation.; 156 ; 157 Gradient interface (abstract class) defining the signature for calculating the gradient of a; 158 multi-dimensional function.; 159 Three methods are provided:; 160 - Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; 161 - Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; 162 - FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/; 163 ; 164 @ingroup GenFunc; 165 */; 166 ; 167 template <class T>; 168 class IGradientFunctionMultiDimTempl : virtual public IBaseFunctionMultiDimTempl<T> {; 169 ; 170 public:; 171 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 172 typedef IGradientFunctionMultiDimTempl<T> BaseGrad;; 173 ; 174 ; 175 /// Evaluate all the vector of function derivatives (gradient) at a point x.; 176 /// Derived classes must re-implement it if more efficient than evaluating one at a time; 177 virtual void Gradient(const T *x, T *grad) const; 178 {; 179 unsigned int ndim = NDim();; 180 for (unsigned i",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:10945,Integrability,interface,interface,10945,"//___________________________________________________________________________________; 240 /**; 241 Interface (abstract class) for one-dimensional functions providing a gradient calculation.; 242 The method ROOT::Math::IFunction::Derivative calculates the derivative and; 243 ROOT::Math::Fdf calculates the derivative and the function values at the same time.; 244 The pure private virtual method DoDerivative() must be implemented by the derived classes, while; 245 FdF is by default implemented using DoDerivative, but it can be overloaded by the; 246 derived classes to improve the efficiency in the derivative calculation.; 247 ; 248 Specialized Gradient interface(abstract class) for one dimensional functions; 249 It provides a method to evaluate the derivative of the function, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at th",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:11627,Integrability,interface,interface,11627,"//___________________________________________________________________________________; 240 /**; 241 Interface (abstract class) for one-dimensional functions providing a gradient calculation.; 242 The method ROOT::Math::IFunction::Derivative calculates the derivative and; 243 ROOT::Math::Fdf calculates the derivative and the function values at the same time.; 244 The pure private virtual method DoDerivative() must be implemented by the derived classes, while; 245 FdF is by default implemented using DoDerivative, but it can be overloaded by the; 246 derived classes to improve the efficiency in the derivative calculation.; 247 ; 248 Specialized Gradient interface(abstract class) for one dimensional functions; 249 It provides a method to evaluate the derivative of the function, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at th",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:11795,Integrability,interface,interface,11795,"s, while; 245 FdF is by default implemented using DoDerivative, but it can be overloaded by the; 246 derived classes to improve the efficiency in the derivative calculation.; 247 ; 248 Specialized Gradient interface(abstract class) for one dimensional functions; 249 It provides a method to evaluate the derivative of the function, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the deriva",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:12482,Integrability,interface,interface,12482,"he derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class.; 289 virtual double DoDerivative(double x) const = 0;; 290 };; 291 ; 292 ; 293 ; 294 } // namespace Math; 295} // namespace ROOT; 296 ; 297#endif /* ROOT_Math_IFunction */; IFunctionfwd.h; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition RSha256.hxx:105; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionMultiDimTempl::Clonevirtual IBaseFunctionMultiDimTempl< T > * Clone() const =0Clone a function.; ROOT::Math::IBaseFunctionMultiDimTempl::HasGradientvirtual bool HasGradient() const",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:17962,Integrability,interface,interface,17962,":Math::IGradientFunctionMultiDimTempl::DoDerivativeWithPrevResultvirtual T DoDerivativeWithPrevResult(const T *x, unsigned int icoord, T *, T *, T *) constIn some cases, the derivative algorithm will use information from the previous step,...Definition IFunction.h:231; ROOT::Math::IGradientFunctionMultiDimTempl::DoDerivativevirtual T DoDerivative(const T *x, unsigned int icoord) const =0Function to evaluate the derivative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionMultiDimTempl::BaseFuncIBaseFunctionMultiDimTempl< T > BaseFuncDefinition IFunction.h:171; ROOT::Math::IGradientFunctionMultiDimTempl::returnsInMinuit2ParameterSpacevirtual bool returnsInMinuit2ParameterSpace() constDefinition IFunction.h:222; ROOT::Math::IGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(const double *x) constCompatibility method with multi-dimensional interface for partial derivative.Definition IFunction.h:266; ROOT::Math::IGradientFunctionOneDim::FdFvirtual void FdF(double x, double &f, double &df) constOptimized method to evaluate at the same time the function value and derivative at a point x.Definition IFunction.h:275; ROOT::Math::IGradientFunctionOneDim::FdFvoid FdF(const double *x, double &f, double *df) constCompatibility method with multi-dimensional interface for Gradient and function evaluation.Definition IFunction.h:282; ROOT::Math::IGradientFunctionOneDim::BaseGradIGradientFunctionOneDim BaseGradDefinition IFunction.h:259; ROOT::Math::IGradientFunctionOneDim::Gradientvoid Gradient(const double *x, double *g) constCompatibility method with multi-dimensional interface for Gradient.Definition IFunction.h:269; ROOT::Math::IGradientFunctionOneDim::BaseFuncIBaseFunctionOneDim BaseFuncDefinition IFunction.h:258; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:18377,Integrability,interface,interface,18377,"vative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionMultiDimTempl::BaseFuncIBaseFunctionMultiDimTempl< T > BaseFuncDefinition IFunction.h:171; ROOT::Math::IGradientFunctionMultiDimTempl::returnsInMinuit2ParameterSpacevirtual bool returnsInMinuit2ParameterSpace() constDefinition IFunction.h:222; ROOT::Math::IGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(const double *x) constCompatibility method with multi-dimensional interface for partial derivative.Definition IFunction.h:266; ROOT::Math::IGradientFunctionOneDim::FdFvirtual void FdF(double x, double &f, double &df) constOptimized method to evaluate at the same time the function value and derivative at a point x.Definition IFunction.h:275; ROOT::Math::IGradientFunctionOneDim::FdFvoid FdF(const double *x, double &f, double *df) constCompatibility method with multi-dimensional interface for Gradient and function evaluation.Definition IFunction.h:282; ROOT::Math::IGradientFunctionOneDim::BaseGradIGradientFunctionOneDim BaseGradDefinition IFunction.h:259; ROOT::Math::IGradientFunctionOneDim::Gradientvoid Gradient(const double *x, double *g) constCompatibility method with multi-dimensional interface for Gradient.Definition IFunction.h:269; ROOT::Math::IGradientFunctionOneDim::BaseFuncIBaseFunctionOneDim BaseFuncDefinition IFunction.h:258; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(double x) constReturn the derivative of the function at a point x Use the private method DoDerivative.Definition IFunction.h:263; ROOT::Math::IGradientFunctionOneDim::DoDerivativevirtual double DoDerivative(double x) const =0Function to evaluate the derivative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionOneDim::HasGradientbool HasGradient() const overrideDefini",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:18693,Integrability,interface,interface,18693,"eterSpace() constDefinition IFunction.h:222; ROOT::Math::IGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(const double *x) constCompatibility method with multi-dimensional interface for partial derivative.Definition IFunction.h:266; ROOT::Math::IGradientFunctionOneDim::FdFvirtual void FdF(double x, double &f, double &df) constOptimized method to evaluate at the same time the function value and derivative at a point x.Definition IFunction.h:275; ROOT::Math::IGradientFunctionOneDim::FdFvoid FdF(const double *x, double &f, double *df) constCompatibility method with multi-dimensional interface for Gradient and function evaluation.Definition IFunction.h:282; ROOT::Math::IGradientFunctionOneDim::BaseGradIGradientFunctionOneDim BaseGradDefinition IFunction.h:259; ROOT::Math::IGradientFunctionOneDim::Gradientvoid Gradient(const double *x, double *g) constCompatibility method with multi-dimensional interface for Gradient.Definition IFunction.h:269; ROOT::Math::IGradientFunctionOneDim::BaseFuncIBaseFunctionOneDim BaseFuncDefinition IFunction.h:258; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(double x) constReturn the derivative of the function at a point x Use the private method DoDerivative.Definition IFunction.h:263; ROOT::Math::IGradientFunctionOneDim::DoDerivativevirtual double DoDerivative(double x) const =0Function to evaluate the derivative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionOneDim::HasGradientbool HasGradient() const overrideDefinition IFunction.h:284; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIFunction.h. ROOT master - Refe",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:1145,Modifiability,adapt,adapter,1145,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:3384,Modifiability,inherit,inherits,3384," ; 65 typedef T BackendType;; 66 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 67 ; 68 virtual ~IBaseFunctionMultiDimTempl() = default;; 69 ; 70 /// Clone a function.; 71 /// Each derived class must implement their version of the Clone method.; 72 virtual IBaseFunctionMultiDimTempl<T> *Clone() const = 0;; 73 ; 74 /// Retrieve the dimension of the function.; 75 virtual unsigned int NDim() const = 0;; 76 ; 77 /// Evaluate the function at a point x[].; 78 /// Use the pure virtual private method DoEval which must be implemented by the sub-classes.; 79 T operator()(const T *x) const { return DoEval(x); }; 80 ; 81#ifdef LATER; 82 /// Template method to evaluate the function using the begin of an iterator.; 83 /// User is responsible to provide correct size for the iterator.; 84 template <class Iterator>; 85 T operator()(const Iterator it) const { return DoEval(&(*it)); }; 86#endif; 87 ; 88 // Indicate whether this class supports gradient calculations, i.e.,; 89 // if it inherits from ROOT::Math::IGradientFunctionMultiDim.; 90 virtual bool HasGradient() const { return false; }; 91 ; 92 private:; 93 ; 94 /// Implementation of the evaluation function. Must be implemented by derived classes.; 95 virtual T DoEval(const T *x) const = 0;; 96 };; 97 ; 98 ; 99//___________________________________________________________________________________; 100 /**; 101 Interface (abstract class) for generic functions objects of one-dimension; 102 Provides a method to evaluate the function given a value (simple double); 103 by implementing operator() (const double ).; 104 In addition it defines the interface for copying functions via the pure virtual method Clone().; 105 Derived classes must implement the pure virtual private method DoEval(double ) for the; 106 function evaluation in addition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ;",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:5177,Modifiability,inherit,inherits,5177,"dition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ; 114 public:; 115 ; 116 typedef IBaseFunctionOneDim BaseFunc;; 117 ; 118 virtual ~IBaseFunctionOneDim() = default;; 119 ; 120 /// Clone a function.; 121 /// Each derived class will implement their version of the private DoClone method.; 122 virtual IBaseFunctionOneDim *Clone() const = 0;; 123 ; 124 /// Evaluate the function at a point x.; 125 /// Use the a pure virtual private method DoEval which must be implemented by sub-classes.; 126 double operator()(double x) const { return DoEval(x); }; 127 ; 128 /// Evaluate the function at a point x[].; 129 /// Compatible method with multi-dimensional functions.; 130 double operator()(const double *x) const { return DoEval(*x); }; 131 ; 132 // Indicate whether this class supports gradient calculations, i.e.,; 133 // if it inherits from ROOT::Math::IGradientFunctionOneDim.; 134 virtual bool HasGradient() const { return false; }; 135 ; 136 private:; 137 ; 138 /// implementation of the evaluation function. Must be implemented by derived classes; 139 virtual double DoEval(double x) const = 0;; 140 };; 141 ; 142 ; 143//-------- GRAD functions---------------------------; 144 ; 145 ; 146 ; 147//___________________________________________________________________________________; 148 /**; 149 Interface (abstract class) for multi-dimensional functions providing a gradient calculation.; 150 The method ROOT::Math::IFunction::Gradient calculates the full gradient vector,; 151 ROOT::Math::IFunction::Derivative calculates the partial derivative for each coordinate and; 152 ROOT::Math::Fdf calculates the gradient and the function value at the same time.; 153 The pure private virtual method DoDerivative() must be implemented by the derived classes, while; 154 Gradient and FdF are by default implemented using DoDerivative, butthey can be",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:8421,Performance,perform,performances,8421,"p, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Derived class should implement this method if performances play an important role and if it is faster to; 201 /// evaluate value and derivative at the same time; 202 virtual void FdF(const T *x, T &f, T *df) const; 203 {; 204 f = BaseFunc::operator()(x);; 205 Gradient(x, df);; 206 }; 207 ; 208 /// Return the partial derivative with respect to the passed coordinate.; 209 T Derivative(const T *x, unsigned int icoord = 0) const { return DoDerivative(x, icoord); }; 210 ; 211 /// In some cases, the derivative algorithm will use information from the previous step, these can be passed; 212 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 213 /// so that these can be passed forward again as well at the call site, if necessary.; 214 T Derivative(const T *x, unsigned int icoord, T *previous_grad, T *previous_g2,; 215 T *previous_gstep) const; 216 {; 217 return DoDerivativeWithPrevResult(x, icoord, previous_grad, previous_g2, previous_gstep);; 218 }; 219 ; 220 bool HasGradient() const { return true; }; 221 ; 222 virtual bool returnsInMinuit2ParameterSpace() const { return false; }; 223 ; 224 private:; 225 /// F",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:12183,Performance,perform,performances,12183,"IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class.; 289 virtual double DoDerivative(double x) const = 0;; 290 };; 291 ; 292 ; 293 ; 294 } // namespace Math; 295} // namespace ROOT; 296 ; 297#endif /* ROOT_Math_IFunction */; IFunctionfwd.h; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition RSha256.hxx:105; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/IFunction_8h_source.html:3907,Usability,simpl,simple,3907,"t NDim() const = 0;; 76 ; 77 /// Evaluate the function at a point x[].; 78 /// Use the pure virtual private method DoEval which must be implemented by the sub-classes.; 79 T operator()(const T *x) const { return DoEval(x); }; 80 ; 81#ifdef LATER; 82 /// Template method to evaluate the function using the begin of an iterator.; 83 /// User is responsible to provide correct size for the iterator.; 84 template <class Iterator>; 85 T operator()(const Iterator it) const { return DoEval(&(*it)); }; 86#endif; 87 ; 88 // Indicate whether this class supports gradient calculations, i.e.,; 89 // if it inherits from ROOT::Math::IGradientFunctionMultiDim.; 90 virtual bool HasGradient() const { return false; }; 91 ; 92 private:; 93 ; 94 /// Implementation of the evaluation function. Must be implemented by derived classes.; 95 virtual T DoEval(const T *x) const = 0;; 96 };; 97 ; 98 ; 99//___________________________________________________________________________________; 100 /**; 101 Interface (abstract class) for generic functions objects of one-dimension; 102 Provides a method to evaluate the function given a value (simple double); 103 by implementing operator() (const double ).; 104 In addition it defines the interface for copying functions via the pure virtual method Clone().; 105 Derived classes must implement the pure virtual private method DoEval(double ) for the; 106 function evaluation in addition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ; 114 public:; 115 ; 116 typedef IBaseFunctionOneDim BaseFunc;; 117 ; 118 virtual ~IBaseFunctionOneDim() = default;; 119 ; 120 /// Clone a function.; 121 /// Each derived class will implement their version of the private DoClone method.; 122 virtual IBaseFunctionOneDim *Clone() const = 0;; 123 ; 124 /// Evaluate the function at a point x.; 125 /// Use the a pure virtual private metho",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
https://root.cern/doc/master/index.html:428,Availability,avail,available,428,". ROOT: ROOT Reference Documentation. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT Reference Documentation . Introduction; Welcome to ROOT!; This is the Reference Guide of the ROOT software toolkit. You can find in the reference documentation page pointers to Reference Guides for all ROOT versions. Manuals. The Manual provides a more in depth explanation of concepts and functionality available in the ROOT system. It is closely linked to the Reference Guide.; A number of topical User Guides and Manuals for various components of the system. Tutorials and courses. A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; ROOT Primer.; ROOT Introductory Course. Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. With a PR; On the ROOT Forum; On our tracker . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/index.html
https://root.cern/doc/master/index.html:772,Usability,feedback,feedback,772,". ROOT: ROOT Reference Documentation. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT Reference Documentation . Introduction; Welcome to ROOT!; This is the Reference Guide of the ROOT software toolkit. You can find in the reference documentation page pointers to Reference Guides for all ROOT versions. Manuals. The Manual provides a more in depth explanation of concepts and functionality available in the ROOT system. It is closely linked to the Reference Guide.; A number of topical User Guides and Manuals for various components of the system. Tutorials and courses. A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; ROOT Primer.; ROOT Introductory Course. Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. With a PR; On the ROOT Forum; On our tracker . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/index.html
https://root.cern/doc/master/Integrator_8h_source.html:5240,Availability,toler,tolerance,5240,"), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param typ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5316,Availability,toler,tolerance,5316,"e = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5377,Availability,toler,tolerance,5377," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6313,Availability,toler,tolerance,6313," OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disab",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6389,Availability,toler,tolerance,6389,"relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 I",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6450,Availability,toler,tolerance,6450,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:30954,Availability,toler,tolerance,30954,"mi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::IntegratorOneDim::Integraldouble Integral()evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with I...Definition Integrator.h:364; ROOT::Math::IntegratorOneDim::GetTypestatic IntegrationOneDim::Type GetType(const char *name)static function to get the enumeration from a stringDefinition Integrator.cxx:53; ROOT::Math::VirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrete Integr...Definition VirtualIntegrator.h:101; ROOT::Math::VirtualIntegratorOneDim::Optionsvirtual ROOT::Math::IntegratorOneDimOptions Options() const =0get the option used for the integration must be implemented by derived class; ROOT::Math::VirtualIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1155,Deployability,integrat,integration,1155,"uide ; .  . Loading...; Searching...; No Matches. Integrator.h. Go to the documentation of this file. 1// @(#)root/mathmore:$Id$; 2// Authors: L. Moneta, M. Slawinska 10/2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performi",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1221,Deployability,integrat,integration,1221,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1321,Deployability,integrat,integration,1321,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2102,Deployability,integrat,integration,2102,"ies.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and sem",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2204,Deployability,integrat,integration,2204,"ional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2308,Deployability,integrat,integration,2308,"ional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2399,Deployability,integrat,integration,2399,"d or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2530,Deployability,integrat,integration,2530,"::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98c",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2660,Deployability,integrat,integration,2660," with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2780,Deployability,integrat,integration,2780," with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2835,Deployability,integrat,integration,2835,"ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type in",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2960,Deployability,integrat,integration,2960,"______________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-interva",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3391,Deployability,integrat,integration,3391,"e integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 11",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3849,Deployability,integrat,integration,3849,"NGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(Integrati",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:4062,Deployability,integrat,integration,4062,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5081,Deployability,integrat,integration,5081,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5155,Deployability,integrat,integration,5155,"le Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C+",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5467,Deployability,integrat,integration,5467," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6131,Deployability,integrat,integration,6131," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6228,Deployability,integrat,integration,6228," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6540,Deployability,integrat,integration,6540,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7654,Deployability,integrat,integration,7654,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7689,Deployability,integrat,integration,7689,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7967,Deployability,integrat,integration,7967," int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8286,Deployability,integrat,integration,8286,"; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8435,Deployability,integrat,integration,8435,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8508,Deployability,integrat,integration,8508,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8734,Deployability,integrat,integration,8734,"ent the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8875,Deployability,integrat,integration,8875,"ent the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9012,Deployability,integrat,integration,9012,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9066,Deployability,integrat,integration,9066,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9291,Deployability,integrat,integration,9291,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9415,Deployability,integrat,integration,9415,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9469,Deployability,integrat,integration,9469,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9749,Deployability,integrat,integration,9749,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10050,Deployability,integrat,integration,10050,"be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double Integr",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10379,Deployability,integrat,integration,10379,"unction f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing o",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10518,Deployability,integrat,integration,10518,"f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement t",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10744,Deployability,integrat,integration,10744,"f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement t",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10868,Deployability,integrat,integration,10868,"he Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11152,Deployability,integrat,integration,11152,"he Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11291,Deployability,integrat,integration,11291,"f); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std:",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11527,Deployability,integrat,integration,11527,"f); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std:",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11651,Deployability,integrat,integration,11651,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11934,Deployability,integrat,integration,11934,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12209,Deployability,integrat,integration,12209,"lable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12517,Deployability,integrat,integration,12517,"; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12779,Deployability,integrat,integration,12779," IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @par",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13156,Deployability,integrat,integration,13156,"menting operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13293,Deployability,integrat,integration,13293,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13347,Deployability,integrat,integration,13347,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13680,Deployability,integrat,integration,13680,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13804,Deployability,integrat,integration,13804,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13858,Deployability,integrat,integration,13858,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14109,Deployability,integrat,integration,14109,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14327,Deployability,integrat,integration,14327,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14381,Deployability,integrat,integration,14381,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14989,Deployability,integrat,integration,14989,"d using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegr",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:15332,Deployability,integrat,integration,15332,"57 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:15955,Deployability,integrat,integration,15955,"; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:17044,Deployability,integrat,integrator,17044,"ral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fInt",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:17653,Deployability,integrat,integrator,17653,"value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:18130,Deployability,integrat,integrator,18130,"value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:18755,Deployability,integrat,integrator,18755,"2 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().Integrator() : std::string(""""); }; 460 ; 461 /// static function to get the enumeration from a string; 462 static IntegrationOneDim::Type GetType(const char * name);; 463 ; 464 /// static function to get a string from the enumeration; 465 static std::string GetName(IntegrationOneDim::Type);; 466 ; 467 ; 468protected:; 469 ; 470 VirtualIntegratorOneDim * CreateIntegrator(IntegrationOneDim::Type type , double absTol, double relTol, unsigned int size, int rule);; 471 ; 472private:; 473 ; 474 VirtualIntegratorOneDim * fIntegrator; ///< pointer to integrator interface class; 475 IGenFunction * fFunc; ///< pointer to owned function; 476 ; 477};; 478 ; 479 ; 480 typedef IntegratorOneDim Integrator;; 481 ; 482 ; 483} // namespace Math; 484} // namespace ROOT; 485 ; 486 ; 487 ; 488 ; 489#include ""Math/WrappedFunction.h""; 490 ; 491template<class Function>; 492void ROOT::Math::IntegratorOneDim::SetFunction( Function & f) {; 493 ::ROOT::Math::WrappedFunction<Function &> wf(f);; 494 // need to copy the wrapper function, the instance created here will be deleted after SetFunction(); 495 SetFunction(wf, true);; 496}; 497 ; 498template<class Function>; 499double ROOT::Math::IntegratorOneDim::Integral(Function & f, double a, double b) {; 500 ::ROOT::Math::WrappedFunction< Function &> wf(f);; 501 SetFunction(wf,false); // no copy is needed in this case; 502 return Integral(a,b);; 503}; 504 ; 505// remove ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:22841,Deployability,integrat,integration,22841,"har dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Def",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:22994,Deployability,integrat,integratorDefinition,22994,"const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFA",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:23106,Deployability,integrat,integration,23106,"ta h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, defa",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:23625,Deployability,integrat,integrationDefinition,23625," for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetR",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:24751,Deployability,integrat,integrator,24751,"enFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegratorOneDim * GetIntegrator()return a pointer to integrator objectDefinition Integrator.h:446; ROOT::Math::IntegratorOneDim::operator=IntegratorOneDim & operator=(const IntegratorOneDim &)Definition Integrator.h:182; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:380; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function pre...Definition Integrator.h:372; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:24879,Deployability,integrat,integratorDefinition,24879,"h::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegratorOneDim * GetIntegrator()return a pointer to integrator objectDefinition Integrator.h:446; ROOT::Math::IntegratorOneDim::operator=IntegratorOneDim & operator=(const IntegratorOneDim &)Definition Integrator.h:182; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:380; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function pre...Definition Integrator.h:372; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::IntegratorOneDim::Resultdouble Result() constreturn the Result of the last Integral calculationDefinition Integrator.h:411; ROOT",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:25022,Deployability,integrat,integrator,25022,"ouble relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegratorOneDim * GetIntegrator()return a pointer to integrator objectDefinition Integrator.h:446; ROOT::Math::IntegratorOneDim::operator=IntegratorOneDim & operator=(const IntegratorOneDim &)Definition Integrator.h:182; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:380; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function pre...Definition Integrator.h:372; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::IntegratorOneDim::Resultdouble Result() constreturn the Result of the last Integral calculationDefinition Integrator.h:411; ROOT::Math::IntegratorOneDim::~IntegratorOneDimvirtual ~IntegratorOneDim()destructor (will delete contained pointers)Definition Integra",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:26893,Deployability,integrat,integration,26893,"::IntegratorOneDim::~IntegratorOneDimvirtual ~IntegratorOneDim()destructor (will delete contained pointers)Definition Integrator.h:173; ROOT::Math::IntegratorOneDim::CreateIntegratorVirtualIntegratorOneDim * CreateIntegrator(IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule)Definition Integrator.cxx:114; ROOT::Math::IntegratorOneDim::SetOptionsvoid SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the optionsDefinition Integrator.h:451; ROOT::Math::IntegratorOneDim::fFuncIGenFunction * fFuncpointer to owned functionDefinition Integrator.h:475; ROOT::Math::IntegratorOneDim::OptionsROOT::Math::IntegratorOneDimOptions Options() constretrieve the optionsDefinition Integrator.h:456; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(const IGenFunction &f, double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(Function &f)method to set the a generic integration functionDefinition Integrator.h:492; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f, double a, double b)evaluate the Integral of a function f over the defined interval (a,b)Definition Integrator.h:241; ROOT::Math::IntegratorOneDim::NEvalint NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition Integrator.h:427; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(Function &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:536; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:404; ROOT::Math::IntegratorOneDim::TypeIntegrationOneDim::Type TypeDefinition Integra",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:27258,Deployability,integrat,integrator,27258,"::Math::IntegratorOneDim::SetOptionsvoid SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the optionsDefinition Integrator.h:451; ROOT::Math::IntegratorOneDim::fFuncIGenFunction * fFuncpointer to owned functionDefinition Integrator.h:475; ROOT::Math::IntegratorOneDim::OptionsROOT::Math::IntegratorOneDimOptions Options() constretrieve the optionsDefinition Integrator.h:456; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(const IGenFunction &f, double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(Function &f)method to set the a generic integration functionDefinition Integrator.h:492; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f, double a, double b)evaluate the Integral of a function f over the defined interval (a,b)Definition Integrator.h:241; ROOT::Math::IntegratorOneDim::NEvalint NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition Integrator.h:427; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(Function &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:536; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:404; ROOT::Math::IntegratorOneDim::TypeIntegrationOneDim::Type TypeDefinition Integrator.h:102; ROOT::Math::IntegratorOneDim::Errordouble Error() constreturn the estimate of the absolute Error of the last Integral calculationDefinition Integrator.h:416; ROOT::Math::IntegratorOneDim::Integraldouble Integral(double a, double b)evaluate the Integral over the defined interval (a,b) using the function previously set with Integrat...De",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:30089,Deployability,integrat,integration,30089,"finition Integrator.h:316; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(const IntegratorOneDim &)Definition Integrator.h:181; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const std::vector< double > &pts)evaluate the Integral over the defined interval (a,b) using the function previously set with Integrat...Definition Integrator.h:396; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(const IGenFunction &f, double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::IntegratorOneDim::Integraldouble Integral()evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with I...Definition Integrator.h:364; ROOT::Math::IntegratorOneDim::GetTypestatic IntegrationOneDim::Type GetType(const char *name)static function to get the enumeration from a stringDefinition Integrator.cxx:53; ROOT::Math::VirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrete Integr...Definition VirtualIntegrator.h:101; ROOT::Math::VirtualIntegratorOneDim::Optionsvirtual ROOT::Math::IntegratorOneDimOptions Options() const =0get the option used for the integration must be implemented by derived class; ROOT::Math::VirtualIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(d",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:30319,Deployability,integrat,integration,30319,"mi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::IntegratorOneDim::Integraldouble Integral()evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with I...Definition Integrator.h:364; ROOT::Math::IntegratorOneDim::GetTypestatic IntegrationOneDim::Type GetType(const char *name)static function to get the enumeration from a stringDefinition Integrator.cxx:53; ROOT::Math::VirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrete Integr...Definition VirtualIntegrator.h:101; ROOT::Math::VirtualIntegratorOneDim::Optionsvirtual ROOT::Math::IntegratorOneDimOptions Options() const =0get the option used for the integration must be implemented by derived class; ROOT::Math::VirtualIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:30469,Deployability,integrat,integration,30469,"mi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::IntegratorOneDim::Integraldouble Integral()evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with I...Definition Integrator.h:364; ROOT::Math::IntegratorOneDim::GetTypestatic IntegrationOneDim::Type GetType(const char *name)static function to get the enumeration from a stringDefinition Integrator.cxx:53; ROOT::Math::VirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrete Integr...Definition VirtualIntegrator.h:101; ROOT::Math::VirtualIntegratorOneDim::Optionsvirtual ROOT::Math::IntegratorOneDimOptions Options() const =0get the option used for the integration must be implemented by derived class; ROOT::Math::VirtualIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:31742,Deployability,integrat,integrator,31742,"alIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last Integral calculation; ROOT::Math::VirtualIntegrator::NEvalvirtual int NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition VirtualIntegrator.h:84; ROOT::Math::VirtualIntegrator::Resultvirtual double Result() const =0return the Result of the last Integral calculation; ROOT::Math::VirtualIntegrator::Statusvirtual int Status() const =0return the Error Status of the last Integral calculation; ROOT::Math::WrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e.Definition WrappedFunction.h:45; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::Math::IntegrationOneDim::kDEFAULT@ kDEFAULTdefault type specified i",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:32258,Deployability,integrat,integration,32258,"uld be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last Integral calculation; ROOT::Math::VirtualIntegrator::NEvalvirtual int NEval() constreturn number of function evaluations in calculating the integral (if integrator do not implement thi...Definition VirtualIntegrator.h:84; ROOT::Math::VirtualIntegrator::Resultvirtual double Result() const =0return the Result of the last Integral calculation; ROOT::Math::VirtualIntegrator::Statusvirtual int Status() const =0return the Error Status of the last Integral calculation; ROOT::Math::WrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e.Definition WrappedFunction.h:45; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::Math::IntegrationOneDim::kDEFAULT@ kDEFAULTdefault type specified in the static optionsDefinition AllIntegrationTypes.h:33; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::IntegratorIntegratorOneDim IntegratorDefinition Integrator.h:480; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIntegrator.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1276,Energy Efficiency,adapt,adaptive,1276,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1293,Energy Efficiency,adapt,adaptive,1293,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1372,Energy Efficiency,adapt,adaptive,1372,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2373,Energy Efficiency,adapt,adaptive,2373,"d or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2390,Energy Efficiency,adapt,adaptive,2390,"d or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2651,Energy Efficiency,adapt,adaptive,2651," with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3817,Energy Efficiency,adapt,adaptive,3817,"NGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(Integrati",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3867,Energy Efficiency,adapt,adaptive,3867,"NGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(Integrati",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3881,Energy Efficiency,adapt,adaptive,3881,"NGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(Integrati",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5173,Energy Efficiency,adapt,adaptive,5173,"le Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C+",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5187,Energy Efficiency,adapt,adaptive,5187,"le Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C+",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6246,Energy Efficiency,adapt,adaptive,6246," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6260,Energy Efficiency,adapt,adaptive,6260," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:24103,Energy Efficiency,adapt,adaptive,24103,"overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegrat",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1155,Integrability,integrat,integration,1155,"uide ; .  . Loading...; Searching...; No Matches. Integrator.h. Go to the documentation of this file. 1// @(#)root/mathmore:$Id$; 2// Authors: L. Moneta, M. Slawinska 10/2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performi",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1221,Integrability,integrat,integration,1221,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1321,Integrability,integrat,integration,1321,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1501,Integrability,interface,interface,1501,"2//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integratio",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:1606,Integrability,interface,interface,1606,"2//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integratio",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2102,Integrability,integrat,integration,2102,"ies.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and sem",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2204,Integrability,integrat,integration,2204,"ional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2308,Integrability,integrat,integration,2308,"ional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2399,Integrability,integrat,integration,2399,"d or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2530,Integrability,integrat,integration,2530,"::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98c",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2660,Integrability,integrat,integration,2660," with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2780,Integrability,integrat,integration,2780," with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2835,Integrability,integrat,integration,2835,"ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type in",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:2960,Integrability,integrat,integration,2960,"______________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-interva",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3391,Integrability,integrat,integration,3391,"e integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 11",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:3849,Integrability,integrat,integration,3849,"NGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(Integrati",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:4062,Integrability,integrat,integration,4062,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5051,Integrability,interface,interface,5051,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5081,Integrability,integrat,integration,5081,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5106,Integrability,interface,interface,5106,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5155,Integrability,integrat,integration,5155,"le Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C+",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:5467,Integrability,integrat,integration,5467," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6131,Integrability,integrat,integration,6131," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6228,Integrability,integrat,integration,6228," size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(F",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:6540,Integrability,integrat,integration,6540,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7654,Integrability,integrat,integration,7654,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7689,Integrability,integrat,integration,7689,"onal Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 155 @param relTol desired relative tolerance; 156 @param size maximum number of sub-intervals; 157 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 158 ; 159 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 160 ; 161 */; 162 ; 163 template<class Function>; 164 explicit; 165 IntegratorOneDim(Function & f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:7967,Integrability,integrat,integration,7967," int size = 0, int rule = 0) :; 166 fIntegrator(nullptr), fFunc(nullptr); 167 {; 168 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 169 SetFunction(f);; 170 }; 171 ; 172 /// destructor (will delete contained pointers); 173 virtual ~IntegratorOneDim() {; 174 if (fIntegrator) delete fIntegrator;; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8286,Integrability,integrat,integration,8286,"; 175 if (fFunc) delete fFunc;; 176 }; 177 ; 178 // disable copy constructor and assignment operator; 179 ; 180private:; 181 IntegratorOneDim(const IntegratorOneDim &) : fIntegrator(nullptr), fFunc(nullptr) {}; 182 IntegratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8411,Integrability,interface,interface,8411,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8435,Integrability,integrat,integration,8435,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8508,Integrability,integrat,integration,8508,"gratorOneDim & operator=(const IntegratorOneDim &) { return *this; }; 183 ; 184public:; 185 ; 186 ; 187 // template methods for generic functors; 188 ; 189 /**; 190 method to set the a generic integration function; 191 @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8734,Integrability,integrat,integration,8734,"ent the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:8875,Integrability,integrat,integration,8875,"ent the assignment operator, <em> double operator() ( double x ) </em>; 192 ; 193 */; 194 ; 195 ; 196 template<class Function>; 197 inline void SetFunction(Function & f);; 198 ; 199 /**; 200 set one dimensional function for 1D integration; 201 */; 202 void SetFunction (const IGenFunction &f, bool copy = false) {; 203 if (!fIntegrator) return;; 204 if (copy) {; 205 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9012,Integrability,integrat,integration,9012,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9066,Integrability,integrat,integration,9066,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9291,Integrability,integrat,integration,9291,"05 if (fFunc) delete fFunc;; 206 fFunc = f.Clone();; 207 fIntegrator->SetFunction(*fFunc);; 208 return;; 209 }; 210 fIntegrator->SetFunction(f);; 211 }; 212 ; 213 ; 214 /**; 215 Set integration function from a multi-dim function type.; 216 Can be used in case of having 1D function implementing the generic interface; 217 @param f integration function; 218 @param icoord index of coordinate on which the integration is performed; 219 @param x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9372,Integrability,interface,interface,9372,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9415,Integrability,integrat,integration,9415,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9469,Integrability,integrat,integration,9469,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:9749,Integrability,integrat,integration,9749,"ram x array of the passed variables values. In case of dim=1 a 0 can be passed; 220 */; 221 void SetFunction(const IMultiGenFunction &f, unsigned int icoord , const double * x );; 222 ; 223 // integration methods using a function; 224 ; 225 /**; 226 evaluate the Integral of a function f over the defined interval (a,b); 227 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 2",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10050,Integrability,integrat,integration,10050,"be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double Integr",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10131,Integrability,interface,interface,10131,"unction f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing o",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10379,Integrability,integrat,integration,10379,"unction f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing o",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10518,Integrability,integrat,integration,10518,"f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement t",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10744,Integrability,integrat,integration,10744,"f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement t",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10825,Integrability,interface,interface,10825,"he Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:10868,Integrability,integrat,integration,10868,"he Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11152,Integrability,integrat,integration,11152,"he Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11291,Integrability,integrat,integration,11291,"f); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std:",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11527,Integrability,integrat,integration,11527,"f); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std:",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11608,Integrability,interface,interface,11608,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11651,Integrability,integrat,integration,11651,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:11934,Integrability,integrat,integration,11934,"tion function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double IntegralUp(const IGenFunction & f, double a ) {; 279 SetFunction(f,false);; 280 return IntegralUp(a);; 281 }; 282 ; 283// /**; 284// evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 285// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first ele",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12209,Integrability,integrat,integration,12209,"lable object implementing operator()(double x); 286// @param b upper value of the integration interval; 287// */; 288// template<class Function>; 289// double IntegralLow(Function & f, double b);; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12517,Integrability,integrat,integration,12517,"; 290 ; 291 /**; 292 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); 293 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 294 @param b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12598,Integrability,interface,interface,12598,"m b upper value of the integration interval; 295 */; 296 double IntegralLow(const IGenFunction & f, double b ) {; 297 SetFunction(f,false);; 298 return IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined i",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:12779,Integrability,integrat,integration,12779," IntegralLow(b);; 299 }; 300 ; 301 /**; 302 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 303 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @par",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13156,Integrability,integrat,integration,13156,"menting operator()(double x); 304 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 305 ; 306 */; 307 template<class Function>; 308 double Integral(Function & f, const std::vector<double> & pts );; 309 ; 310 /**; 311 evaluate the Integral of a function f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13293,Integrability,integrat,integration,13293,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13347,Integrability,integrat,integration,13347,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13680,Integrability,integrat,integration,13680,"on f with known singular points over the defined Integral (a,b); 312 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 313 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 314 ; 315 */; 316 double Integral(const IGenFunction & f, const std::vector<double> & pts ) {; 317 SetFunction(f,false);; 318 return Integral(pts);; 319 }; 320 ; 321 /**; 322 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 323 @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(do",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13761,Integrability,interface,interface,13761,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13804,Integrability,integrat,integration,13804,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:13858,Integrability,integrat,integration,13858,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14109,Integrability,integrat,integration,14109,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14327,Integrability,integrat,integration,14327,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14381,Integrability,integrat,integration,14381,"type must be a C++ callable object implementing operator()(double x); 324 @param a lower value of the integration interval; 325 @param b upper value of the integration interval; 326 @param c position of singularity; 327 ; 328 */; 329 template<class Function>; 330 double IntegralCauchy(Function & f, double a, double b, double c);; 331 ; 332 /**; 333 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 334 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 335 @param a lower value of the integration interval; 336 @param b upper value of the integration interval; 337 @param c position of singularity; 338 ; 339 */; 340 double IntegralCauchy(const IGenFunction & f, double a, double b, double c) {; 341 SetFunction(f,false);; 342 return IntegralCauchy(a,b,c);; 343 }; 344 ; 345 ; 346 ; 347 // integration method using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:14989,Integrability,integrat,integration,14989,"d using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegr",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:15332,Integrability,integrat,integration,15332,"57 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:15955,Integrability,integrat,integration,15955,"; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:17044,Integrability,integrat,integrator,17044,"ral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegrator->Integral(pts);; 398 }; 399 ; 400 /**; 401 evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fInt",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:17653,Integrability,integrat,integrator,17653,"value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:18130,Integrability,integrat,integrator,18130,"value of the integral of a function f over the defined interval (a,b) with a singularity at c; 402 ; 403 */; 404 double IntegralCauchy(double a, double b, double c) {; 405 return !fIntegrator ? 0 : fIntegrator->IntegralCauchy(a,b,c);; 406 }; 407 ; 408 /**; 409 return the Result of the last Integral calculation; 410 */; 411 double Result() const { return !fIntegrator ? 0 : fIntegrator->Result(); }; 412 ; 413 /**; 414 return the estimate of the absolute Error of the last Integral calculation; 415 */; 416 double Error() const { return !fIntegrator ? 0 : fIntegrator->Error(); }; 417 ; 418 /**; 419 return the Error Status of the last Integral calculation; 420 */; 421 int Status() const { return !fIntegrator ? -1 : fIntegrator->Status(); }; 422 ; 423 /**; 424 return number of function evaluations in calculating the integral; 425 (if integrator do not implement this function returns -1); 426 */; 427 int NEval() const { return !fIntegrator ? -1 : fIntegrator->NEval(); }; 428 ; 429 ; 430 // setter for control Parameters (getters are not needed so far ); 431 ; 432 /**; 433 set the desired relative Error; 434 */; 435 void SetRelTolerance(double relTolerance) { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }; 436 ; 437 ; 438 /**; 439 set the desired absolute Error; 440 */; 441 void SetAbsTolerance(double absTolerance) { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }; 442 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:18755,Integrability,integrat,integrator,18755,"2 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().Integrator() : std::string(""""); }; 460 ; 461 /// static function to get the enumeration from a string; 462 static IntegrationOneDim::Type GetType(const char * name);; 463 ; 464 /// static function to get a string from the enumeration; 465 static std::string GetName(IntegrationOneDim::Type);; 466 ; 467 ; 468protected:; 469 ; 470 VirtualIntegratorOneDim * CreateIntegrator(IntegrationOneDim::Type type , double absTol, double relTol, unsigned int size, int rule);; 471 ; 472private:; 473 ; 474 VirtualIntegratorOneDim * fIntegrator; ///< pointer to integrator interface class; 475 IGenFunction * fFunc; ///< pointer to owned function; 476 ; 477};; 478 ; 479 ; 480 typedef IntegratorOneDim Integrator;; 481 ; 482 ; 483} // namespace Math; 484} // namespace ROOT; 485 ; 486 ; 487 ; 488 ; 489#include ""Math/WrappedFunction.h""; 490 ; 491template<class Function>; 492void ROOT::Math::IntegratorOneDim::SetFunction( Function & f) {; 493 ::ROOT::Math::WrappedFunction<Function &> wf(f);; 494 // need to copy the wrapper function, the instance created here will be deleted after SetFunction(); 495 SetFunction(wf, true);; 496}; 497 ; 498template<class Function>; 499double ROOT::Math::IntegratorOneDim::Integral(Function & f, double a, double b) {; 500 ::ROOT::Math::WrappedFunction< Function &> wf(f);; 501 SetFunction(wf,false); // no copy is needed in this case; 502 return Integral(a,b);; 503}; 504 ; 505// remove ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:18766,Integrability,interface,interface,18766,"2 ; 443 /**; 444 return a pointer to integrator object; 445 */; 446 VirtualIntegratorOneDim * GetIntegrator() { return fIntegrator; }; 447 ; 448 /**; 449 set the options; 450 */; 451 void SetOptions(const ROOT::Math::IntegratorOneDimOptions & opt) { if (fIntegrator) fIntegrator->SetOptions(opt); }; 452 ; 453 /**; 454 retrieve the options; 455 */; 456 ROOT::Math::IntegratorOneDimOptions Options() const { return (fIntegrator) ? fIntegrator->Options() : IntegratorOneDimOptions(); }; 457 ; 458 /// return name of integrator; 459 std::string Name() const { return (fIntegrator) ? Options().Integrator() : std::string(""""); }; 460 ; 461 /// static function to get the enumeration from a string; 462 static IntegrationOneDim::Type GetType(const char * name);; 463 ; 464 /// static function to get a string from the enumeration; 465 static std::string GetName(IntegrationOneDim::Type);; 466 ; 467 ; 468protected:; 469 ; 470 VirtualIntegratorOneDim * CreateIntegrator(IntegrationOneDim::Type type , double absTol, double relTol, unsigned int size, int rule);; 471 ; 472private:; 473 ; 474 VirtualIntegratorOneDim * fIntegrator; ///< pointer to integrator interface class; 475 IGenFunction * fFunc; ///< pointer to owned function; 476 ; 477};; 478 ; 479 ; 480 typedef IntegratorOneDim Integrator;; 481 ; 482 ; 483} // namespace Math; 484} // namespace ROOT; 485 ; 486 ; 487 ; 488 ; 489#include ""Math/WrappedFunction.h""; 490 ; 491template<class Function>; 492void ROOT::Math::IntegratorOneDim::SetFunction( Function & f) {; 493 ::ROOT::Math::WrappedFunction<Function &> wf(f);; 494 // need to copy the wrapper function, the instance created here will be deleted after SetFunction(); 495 SetFunction(wf, true);; 496}; 497 ; 498template<class Function>; 499double ROOT::Math::IntegratorOneDim::Integral(Function & f, double a, double b) {; 500 ::ROOT::Math::WrappedFunction< Function &> wf(f);; 501 SetFunction(wf,false); // no copy is needed in this case; 502 return Integral(a,b);; 503}; 504 ; 505// remove ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:19211,Integrability,wrap,wrapper,19211,,MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:22841,Integrability,integrat,integration,22841,"har dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Def",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:22994,Integrability,integrat,integratorDefinition,22994,"const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFA",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:23106,Integrability,integrat,integration,23106,"ta h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, defa",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:23625,Integrability,integrat,integrationDefinition,23625," for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetR",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
https://root.cern/doc/master/Integrator_8h_source.html:24751,Integrability,integrat,integrator,24751,"enFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0)Constructor of one dimensional Integrator, default type is adaptive.Definition Integrator.h:123; ROOT::Math::IntegratorOneDim::IntegralCauchydouble IntegralCauchy(const IGenFunction &f, double a, double b, double c)evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,...Definition Integrator.h:340; ROOT::Math::IntegratorOneDim::operator()double operator()(double x)define operator() for IntegralLowDefinition Integrator.h:386; ROOT::Math::IntegratorOneDim::SetRelTolerancevoid SetRelTolerance(double relTolerance)set the desired relative ErrorDefinition Integrator.h:435; ROOT::Math::IntegratorOneDim::fIntegratorVirtualIntegratorOneDim * fIntegratorpointer to integrator interface classDefinition Integrator.h:474; ROOT::Math::IntegratorOneDim::Namestd::string Name() constreturn name of integratorDefinition Integrator.h:459; ROOT::Math::IntegratorOneDim::GetIntegratorVirtualIntegratorOneDim * GetIntegrator()return a pointer to integrator objectDefinition Integrator.h:446; ROOT::Math::IntegratorOneDim::operator=IntegratorOneDim & operator=(const IntegratorOneDim &)Definition Integrator.h:182; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:380; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function pre...Definition Integrator.h:372; ROOT::Math::IntegratorOneDim::Statusint Status() constreturn the Error Status of the last Integral calculationDefinition Integrator.h:421; ROOT::Math::",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
